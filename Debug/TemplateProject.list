
E:\ME3630Development\software\UCOS-III-Template\Debug\TemplateProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000628c  08000150  08000150  00010150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800667c  0800667c  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00016684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00008b4c  20000000  08006684  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  20008b4c  08006684  00018b4c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00016684  2**0
                  CONTENTS, READONLY
  9 .debug_info   000262b8  00000000  00000000  000166ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e77  00000000  00000000  0003c965  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f20  00000000  00000000  0003f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d30  00000000  00000000  00040700  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000068ab  00000000  00000000  00041430  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000053cb  00000000  00000000  00047cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004d0a6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003820  00000000  00000000  0004d124  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00050944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c05      	ldr	r4, [pc, #20]	; (8000168 <__do_global_dtors_aux+0x18>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b933      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <__do_global_dtors_aux+0x1c>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x12>
 800015c:	4804      	ldr	r0, [pc, #16]	; (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	20000000 	.word	0x20000000
 800016c:	00000000 	.word	0x00000000
 8000170:	080063c4 	.word	0x080063c4

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b03      	ldr	r3, [pc, #12]	; (8000184 <frame_dummy+0x10>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4903      	ldr	r1, [pc, #12]	; (8000188 <frame_dummy+0x14>)
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <frame_dummy+0x18>)
 800017e:	f3af 8000 	nop.w
 8000182:	bd08      	pop	{r3, pc}
 8000184:	00000000 	.word	0x00000000
 8000188:	20000004 	.word	0x20000004
 800018c:	080063c4 	.word	0x080063c4

08000190 <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 8000190:	b672      	cpsid	i
        BX      LR
 8000192:	4770      	bx	lr

08000194 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 8000194:	b662      	cpsie	i
        BX      LR
 8000196:	4770      	bx	lr

08000198 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 8000198:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I 
 800019c:	b672      	cpsid	i
        BX      LR
 800019e:	4770      	bx	lr

080001a0 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                 @ See Note #2.
        MSR     PRIMASK, R0
 80001a0:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80001a4:	4770      	bx	lr

080001a6 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80001a6:	bf30      	wfi
        BX      LR
 80001a8:	4770      	bx	lr

080001aa <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80001aa:	bf20      	wfe
        BX      LR
 80001ac:	4770      	bx	lr

080001ae <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80001ae:	fab0 f080 	clz	r0, r0
        BX      LR
 80001b2:	4770      	bx	lr

080001b4 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 80001b4:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count leading zeros
 80001b8:	fab0 f080 	clz	r0, r0
        BX      LR
 80001bc:	4770      	bx	lr

080001be <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 80001be:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 80001c2:	4770      	bx	lr

080001c4 <OSStartHighRdy>:
@              d) Trigger PendSV exception;
@              e) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************
.thumb_func
OSStartHighRdy:
    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
 80001c4:	4818      	ldr	r0, [pc, #96]	; (8000228 <OS_CPU_PendSVHandler_nosave+0x30>)
    LDR     R1, =NVIC_PENDSV_PRI
 80001c6:	21ff      	movs	r1, #255	; 0xff
    STRB    R1, [R0]
 80001c8:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 80001ca:	2000      	movs	r0, #0
    MSR     PSP, R0
 80001cc:	f380 8809 	msr	PSP, r0

    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80001d0:	4816      	ldr	r0, [pc, #88]	; (800022c <OS_CPU_PendSVHandler_nosave+0x34>)
    LDR     R1, [R0]
 80001d2:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 80001d4:	f381 8808 	msr	MSP, r1

    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80001d8:	4815      	ldr	r0, [pc, #84]	; (8000230 <OS_CPU_PendSVHandler_nosave+0x38>)
    LDR     R1, =NVIC_PENDSVSET
 80001da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 80001de:	6001      	str	r1, [r0, #0]
    
    CPSIE   I                                                   @ Enable interrupts at processor level
 80001e0:	b662      	cpsie	i

080001e2 <OSStartHang>:

OSStartHang:
    B       OSStartHang                                         @ Should never get here
 80001e2:	e7fe      	b.n	80001e2 <OSStartHang>

080001e4 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 80001e4:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 80001e6:	f3ef 8009 	mrs	r0, PSP
    CBZ     R0, OS_CPU_PendSVHandler_nosave                     @ Skip register save the first time
 80001ea:	b128      	cbz	r0, 80001f8 <OS_CPU_PendSVHandler_nosave>

    SUBS    R0, R0, #0x20                                       @ Save remaining regs r4-11 on process stack
 80001ec:	3820      	subs	r0, #32
    STM     R0, {R4-R11}
 80001ee:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}

    LDR     R1, =OSTCBCurPtr                                    @ OSTCBCurPtr->OSTCBStkPtr = SP;
 80001f2:	4910      	ldr	r1, [pc, #64]	; (8000234 <OS_CPU_PendSVHandler_nosave+0x3c>)
    LDR     R1, [R1]
 80001f4:	6809      	ldr	r1, [r1, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80001f6:	6008      	str	r0, [r1, #0]

080001f8 <OS_CPU_PendSVHandler_nosave>:

                                                                @ At this point, entire context of process has been saved
OS_CPU_PendSVHandler_nosave:
    PUSH    {R14}                                               @ Save LR exc_return value
 80001f8:	b500      	push	{lr}
    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 80001fa:	480f      	ldr	r0, [pc, #60]	; (8000238 <OS_CPU_PendSVHandler_nosave+0x40>)
    BLX     R0
 80001fc:	4780      	blx	r0
    POP     {R14}
 80001fe:	f85d eb04 	ldr.w	lr, [sp], #4

    LDR     R0, =OSPrioCur                                      @ OSPrioCur   = OSPrioHighRdy;
 8000202:	480e      	ldr	r0, [pc, #56]	; (800023c <OS_CPU_PendSVHandler_nosave+0x44>)
    LDR     R1, =OSPrioHighRdy
 8000204:	490e      	ldr	r1, [pc, #56]	; (8000240 <OS_CPU_PendSVHandler_nosave+0x48>)
    LDRB    R2, [R1]
 8000206:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000208:	7002      	strb	r2, [r0, #0]

    LDR     R0, =OSTCBCurPtr                                    @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800020a:	480a      	ldr	r0, [pc, #40]	; (8000234 <OS_CPU_PendSVHandler_nosave+0x3c>)
    LDR     R1, =OSTCBHighRdyPtr
 800020c:	490d      	ldr	r1, [pc, #52]	; (8000244 <OS_CPU_PendSVHandler_nosave+0x4c>)
    LDR     R2, [R1]
 800020e:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000210:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000212:	6810      	ldr	r0, [r2, #0]
    LDM     R0, {R4-R11}                                        @ Restore r4-11 from new process stack
 8000214:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    ADDS    R0, R0, #0x20
 8000218:	3020      	adds	r0, #32
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800021a:	f380 8809 	msr	PSP, r0
    ORR     LR, LR, #0x04                                       @ Ensure exception return uses process stack
 800021e:	f04e 0e04 	orr.w	lr, lr, #4
    CPSIE   I
 8000222:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 8000224:	4770      	bx	lr
 8000226:	0000      	.short	0x0000
    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
 8000228:	e000ed22 	.word	0xe000ed22
    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_ExceptStkBase
 800022c:	20007074 	.word	0x20007074
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000230:	e000ed04 	.word	0xe000ed04
    LDR     R1, =OSTCBCurPtr                                    @ OSTCBCurPtr->OSTCBStkPtr = SP;
 8000234:	20008788 	.word	0x20008788
    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 8000238:	08001679 	.word	0x08001679
    LDR     R0, =OSPrioCur                                      @ OSPrioCur   = OSPrioHighRdy;
 800023c:	200086b0 	.word	0x200086b0
    LDR     R1, =OSPrioHighRdy
 8000240:	200086a4 	.word	0x200086a4
    LDR     R1, =OSTCBHighRdyPtr
 8000244:	20008794 	.word	0x20008794

08000248 <FLASH_SetLatency>:
*                       - FLASH_Latency_2: FLASH Two Latency cycles
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_SetLatency(u32 FLASH_Latency)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 8000250:	4a08      	ldr	r2, [pc, #32]	; (8000274 <FLASH_SetLatency+0x2c>)
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <FLASH_SetLatency+0x2c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800025a:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_Latency;
 800025c:	4905      	ldr	r1, [pc, #20]	; (8000274 <FLASH_SetLatency+0x2c>)
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <FLASH_SetLatency+0x2c>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4313      	orrs	r3, r2
 8000266:	600b      	str	r3, [r1, #0]
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40022000 	.word	0x40022000

08000278 <FLASH_PrefetchBufferCmd>:
*                       - FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_PrefetchBufferCmd(u32 FLASH_PrefetchBuffer)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8000280:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <FLASH_PrefetchBufferCmd+0x2c>)
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <FLASH_PrefetchBufferCmd+0x2c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f023 0310 	bic.w	r3, r3, #16
 800028a:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 800028c:	4905      	ldr	r1, [pc, #20]	; (80002a4 <FLASH_PrefetchBufferCmd+0x2c>)
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <FLASH_PrefetchBufferCmd+0x2c>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4313      	orrs	r3, r2
 8000296:	600b      	str	r3, [r1, #0]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40022000 	.word	0x40022000

080002a8 <GPIO_Init>:
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b089      	sub	sp, #36	; 0x24
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
  u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  u32 tmpreg = 0x00, pinmask = 0x00;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	78db      	ldrb	r3, [r3, #3]
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	61fb      	str	r3, [r7, #28]

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	78db      	ldrb	r3, [r3, #3]
 80002d8:	f003 0310 	and.w	r3, r3, #16
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d005      	beq.n	80002ec <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	789b      	ldrb	r3, [r3, #2]
 80002e4:	461a      	mov	r2, r3
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	4313      	orrs	r3, r2
 80002ea:	61fb      	str	r3, [r7, #28]
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d044      	beq.n	8000380 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	617b      	str	r3, [r7, #20]

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
 8000300:	e038      	b.n	8000374 <GPIO_Init+0xcc>
    {
      pos = ((u32)0x01) << pinpos;
 8000302:	2201      	movs	r2, #1
 8000304:	69bb      	ldr	r3, [r7, #24]
 8000306:	fa02 f303 	lsl.w	r3, r2, r3
 800030a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	4013      	ands	r3, r2
 8000316:	613b      	str	r3, [r7, #16]

      if (currentpin == pos)
 8000318:	693a      	ldr	r2, [r7, #16]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d126      	bne.n	800036e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000320:	69bb      	ldr	r3, [r7, #24]
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 8000326:	220f      	movs	r2, #15
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	fa02 f303 	lsl.w	r3, r2, r3
 800032e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	43db      	mvns	r3, r3
 8000334:	697a      	ldr	r2, [r7, #20]
 8000336:	4013      	ands	r3, r2
 8000338:	617b      	str	r3, [r7, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800033a:	69fa      	ldr	r2, [r7, #28]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	fa02 f303 	lsl.w	r3, r2, r3
 8000342:	697a      	ldr	r2, [r7, #20]
 8000344:	4313      	orrs	r3, r2
 8000346:	617b      	str	r3, [r7, #20]

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	78db      	ldrb	r3, [r3, #3]
 800034c:	2b28      	cmp	r3, #40	; 0x28
 800034e:	d105      	bne.n	800035c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 8000350:	2201      	movs	r2, #1
 8000352:	69bb      	ldr	r3, [r7, #24]
 8000354:	409a      	lsls	r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	615a      	str	r2, [r3, #20]
 800035a:	e008      	b.n	800036e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	78db      	ldrb	r3, [r3, #3]
 8000360:	2b48      	cmp	r3, #72	; 0x48
 8000362:	d104      	bne.n	800036e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 8000364:	2201      	movs	r2, #1
 8000366:	69bb      	ldr	r3, [r7, #24]
 8000368:	409a      	lsls	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800036e:	69bb      	ldr	r3, [r7, #24]
 8000370:	3301      	adds	r3, #1
 8000372:	61bb      	str	r3, [r7, #24]
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	2b07      	cmp	r3, #7
 8000378:	d9c3      	bls.n	8000302 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	601a      	str	r2, [r3, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	2bff      	cmp	r3, #255	; 0xff
 8000386:	d946      	bls.n	8000416 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
 8000392:	e03a      	b.n	800040a <GPIO_Init+0x162>
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8000394:	69bb      	ldr	r3, [r7, #24]
 8000396:	3308      	adds	r3, #8
 8000398:	2201      	movs	r2, #1
 800039a:	fa02 f303 	lsl.w	r3, r2, r3
 800039e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	461a      	mov	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	4013      	ands	r3, r2
 80003aa:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80003ac:	693a      	ldr	r2, [r7, #16]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d127      	bne.n	8000404 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 80003ba:	220f      	movs	r2, #15
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	fa02 f303 	lsl.w	r3, r2, r3
 80003c2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	43db      	mvns	r3, r3
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	4013      	ands	r3, r2
 80003cc:	617b      	str	r3, [r7, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003ce:	69fa      	ldr	r2, [r7, #28]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	697a      	ldr	r2, [r7, #20]
 80003d8:	4313      	orrs	r3, r2
 80003da:	617b      	str	r3, [r7, #20]

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	78db      	ldrb	r3, [r3, #3]
 80003e0:	2b28      	cmp	r3, #40	; 0x28
 80003e2:	d105      	bne.n	80003f0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 80003e4:	69bb      	ldr	r3, [r7, #24]
 80003e6:	3308      	adds	r3, #8
 80003e8:	2201      	movs	r2, #1
 80003ea:	409a      	lsls	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	78db      	ldrb	r3, [r3, #3]
 80003f4:	2b48      	cmp	r3, #72	; 0x48
 80003f6:	d105      	bne.n	8000404 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	3308      	adds	r3, #8
 80003fc:	2201      	movs	r2, #1
 80003fe:	409a      	lsls	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000404:	69bb      	ldr	r3, [r7, #24]
 8000406:	3301      	adds	r3, #1
 8000408:	61bb      	str	r3, [r7, #24]
 800040a:	69bb      	ldr	r3, [r7, #24]
 800040c:	2b07      	cmp	r3, #7
 800040e:	d9c1      	bls.n	8000394 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	605a      	str	r2, [r3, #4]
  }
}
 8000416:	bf00      	nop
 8000418:	3724      	adds	r7, #36	; 0x24
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <GPIO_ResetBits>:
*                    x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800042c:	887a      	ldrh	r2, [r7, #2]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	615a      	str	r2, [r3, #20]
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <RCC_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8000440:	4a13      	ldr	r2, [pc, #76]	; (8000490 <RCC_DeInit+0x54>)
 8000442:	4b13      	ldr	r3, [pc, #76]	; (8000490 <RCC_DeInit+0x54>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 800044c:	4910      	ldr	r1, [pc, #64]	; (8000490 <RCC_DeInit+0x54>)
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <RCC_DeInit+0x54>)
 8000450:	685a      	ldr	r2, [r3, #4]
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <RCC_DeInit+0x58>)
 8000454:	4013      	ands	r3, r2
 8000456:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8000458:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <RCC_DeInit+0x54>)
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <RCC_DeInit+0x54>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000466:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8000468:	4a09      	ldr	r2, [pc, #36]	; (8000490 <RCC_DeInit+0x54>)
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <RCC_DeInit+0x54>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000472:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8000474:	4a06      	ldr	r2, [pc, #24]	; (8000490 <RCC_DeInit+0x54>)
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <RCC_DeInit+0x54>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800047e:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000480:	4b03      	ldr	r3, [pc, #12]	; (8000490 <RCC_DeInit+0x54>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000
 8000494:	f8ff0000 	.word	0xf8ff0000

08000498 <RCC_HSEConfig>:
*                         clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_HSEConfig(u32 RCC_HSE)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80004a0:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <RCC_HSEConfig+0x58>)
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <RCC_HSEConfig+0x58>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80004ac:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <RCC_HSEConfig+0x58>)
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <RCC_HSEConfig+0x58>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004b6:	6013      	str	r3, [r2, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004be:	d003      	beq.n	80004c8 <RCC_HSEConfig+0x30>
 80004c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80004c4:	d007      	beq.n	80004d6 <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 80004c6:	e00d      	b.n	80004e4 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEON_Set;
 80004c8:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <RCC_HSEConfig+0x58>)
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <RCC_HSEConfig+0x58>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004d2:	6013      	str	r3, [r2, #0]
      break;
 80004d4:	e006      	b.n	80004e4 <RCC_HSEConfig+0x4c>
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80004d6:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <RCC_HSEConfig+0x58>)
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <RCC_HSEConfig+0x58>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80004e0:	6013      	str	r3, [r2, #0]
      break;
 80004e2:	bf00      	nop
  }
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  vu32 startupcounter = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8000502:	2300      	movs	r3, #0
 8000504:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000506:	2031      	movs	r0, #49	; 0x31
 8000508:	f000 f9be 	bl	8000888 <RCC_GetFlagStatus>
 800050c:	4603      	mov	r3, r0
 800050e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;  
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	603b      	str	r3, [r7, #0]
  } while((hsestatus == RESET) && (startupcounter != HSEStartUp_TimeOut));
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d103      	bne.n	8000524 <RCC_WaitForHSEStartUp+0x30>
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000522:	d1f0      	bne.n	8000506 <RCC_WaitForHSEStartUp+0x12>


  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000524:	2031      	movs	r0, #49	; 0x31
 8000526:	f000 f9af 	bl	8000888 <RCC_GetFlagStatus>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000530:	2301      	movs	r3, #1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	e001      	b.n	800053a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000536:	2300      	movs	r3, #0
 8000538:	71fb      	strb	r3, [r7, #7]
  }  

  return (status);
 800053a:	79fb      	ldrb	r3, [r7, #7]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <RCC_PLLConfig>:
*                    This parameter can be RCC_PLLMul_x where x:[2,16]
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLLConfig(u32 RCC_PLLSource, u32 RCC_PLLMul)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
  u32 tmpreg = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <RCC_PLLConfig+0x38>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800055e:	60fb      	str	r3, [r7, #12]

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	4313      	orrs	r3, r2
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	4313      	orrs	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <RCC_PLLConfig+0x38>)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	6053      	str	r3, [r2, #4]
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <RCC_PLLCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLLCmd(FunctionalState NewState)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <RCC_PLLCmd+0x1c>)
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	42420060 	.word	0x42420060

080005a0 <RCC_SYSCLKConfig>:
*                       - RCC_SYSCLKSource_PLL1CLK: PLL1 selected as system clock // Only for STM32 connectivity line devices 
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_SYSCLKConfig(u32 RCC_SYSCLKSource)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <RCC_SYSCLKConfig+0x34>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	f023 0303 	bic.w	r3, r3, #3
 80005b8:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005c2:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <RCC_SYSCLKConfig+0x34>)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	6053      	str	r3, [r2, #4]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*                       - 0x08: PLL1 used as system clock // Only for STM32 connectivity line devices 
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <RCC_GetSYSCLKSource+0x18>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 030c 	and.w	r3, r3, #12
 80005e6:	b2db      	uxtb	r3, r3
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40021000 	.word	0x40021000

080005f4 <RCC_HCLKConfig>:
*                       - RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_HCLKConfig(u32 RCC_SYSCLK)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <RCC_HCLKConfig+0x34>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800060c:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4313      	orrs	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <RCC_HCLKConfig+0x34>)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6053      	str	r3, [r2, #4]
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <RCC_PCLK1Config>:
*                       - RCC_HCLK_Div16: APB1 clock = HCLK/16
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PCLK1Config(u32 RCC_HCLK)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <RCC_PCLK1Config+0x34>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000644:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4313      	orrs	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <RCC_PCLK1Config+0x34>)
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6053      	str	r3, [r2, #4]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <RCC_PCLK2Config>:
*                       - RCC_HCLK_Div16: APB2 clock = HCLK/16
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PCLK2Config(u32 RCC_HCLK)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <RCC_PCLK2Config+0x34>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800067c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4313      	orrs	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <RCC_PCLK2Config+0x34>)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	6053      	str	r3, [r2, #4]
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40021000 	.word	0x40021000

0800069c <RCC_GetClocksFreq>:
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800069c:	b480      	push	{r7}
 800069e:	b08b      	sub	sp, #44	; 0x2c
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  u32 tmp = 0,/* pllmull = 0, pllsource = 0,*/ presc = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  u32 pll1mull = 0, pll1source = 0, prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80006c4:	4b5b      	ldr	r3, [pc, #364]	; (8000834 <RCC_GetClocksFreq+0x198>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f003 030c 	and.w	r3, r3, #12
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24

  switch (tmp)
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	d007      	beq.n	80006e4 <RCC_GetClocksFreq+0x48>
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d009      	beq.n	80006ec <RCC_GetClocksFreq+0x50>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d155      	bne.n	8000788 <RCC_GetClocksFreq+0xec>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a56      	ldr	r2, [pc, #344]	; (8000838 <RCC_GetClocksFreq+0x19c>)
 80006e0:	601a      	str	r2, [r3, #0]
      break;
 80006e2:	e055      	b.n	8000790 <RCC_GetClocksFreq+0xf4>

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a55      	ldr	r2, [pc, #340]	; (800083c <RCC_GetClocksFreq+0x1a0>)
 80006e8:	601a      	str	r2, [r3, #0]
      break;
 80006ea:	e051      	b.n	8000790 <RCC_GetClocksFreq+0xf4>
//      }
//      break;
 
/* STM32 connectivity line devices */
      /* Get PLL1 clock source and multiplication factor */
      pll1mull = RCC->CFGR & CFGR_PLL1Mull_Mask;
 80006ec:	4b51      	ldr	r3, [pc, #324]	; (8000834 <RCC_GetClocksFreq+0x198>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80006f4:	61fb      	str	r3, [r7, #28]
      pll1mull = ( pll1mull >> 18) + 2; /* !!!!!!!!!!! case where mul = 6.5 !!!!!!!!!!!!!!! */
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	0c9b      	lsrs	r3, r3, #18
 80006fa:	3302      	adds	r3, #2
 80006fc:	61fb      	str	r3, [r7, #28]

      pll1source = RCC->CFGR & CFGR_PLL1SRC_Mask;
 80006fe:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <RCC_GetClocksFreq+0x198>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000706:	61bb      	str	r3, [r7, #24]

      if (pll1source == 0x00)
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d106      	bne.n	800071c <RCC_GetClocksFreq+0x80>
      {/* HSI oscillator clock divided by 2 selected as PLL1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pll1mull;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	4a4b      	ldr	r2, [pc, #300]	; (8000840 <RCC_GetClocksFreq+0x1a4>)
 8000712:	fb02 f203 	mul.w	r2, r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	601a      	str	r2, [r3, #0]
            prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
            pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
            RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pll1mull;                         
        }
      }
      break;
 800071a:	e039      	b.n	8000790 <RCC_GetClocksFreq+0xf4>
         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <RCC_GetClocksFreq+0x198>)
 800071e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000724:	617b      	str	r3, [r7, #20]
         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8000726:	4b43      	ldr	r3, [pc, #268]	; (8000834 <RCC_GetClocksFreq+0x198>)
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3301      	adds	r3, #1
 8000730:	613b      	str	r3, [r7, #16]
        if (prediv1source == 0)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d109      	bne.n	800074c <RCC_GetClocksFreq+0xb0>
           RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pll1mull;          
 8000738:	4a40      	ldr	r2, [pc, #256]	; (800083c <RCC_GetClocksFreq+0x1a0>)
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	fb02 f203 	mul.w	r2, r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	601a      	str	r2, [r3, #0]
      break;
 800074a:	e021      	b.n	8000790 <RCC_GetClocksFreq+0xf4>
            prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 800074c:	4b39      	ldr	r3, [pc, #228]	; (8000834 <RCC_GetClocksFreq+0x198>)
 800074e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000750:	091b      	lsrs	r3, r3, #4
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	3301      	adds	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
            pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <RCC_GetClocksFreq+0x198>)
 800075c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075e:	0a1b      	lsrs	r3, r3, #8
 8000760:	f003 030f 	and.w	r3, r3, #15
 8000764:	3302      	adds	r3, #2
 8000766:	60bb      	str	r3, [r7, #8]
            RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pll1mull;                         
 8000768:	4a34      	ldr	r2, [pc, #208]	; (800083c <RCC_GetClocksFreq+0x1a0>)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	fb02 f203 	mul.w	r2, r2, r3
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	fbb2 f3f3 	udiv	r3, r2, r3
 800077c:	69fa      	ldr	r2, [r7, #28]
 800077e:	fb02 f203 	mul.w	r2, r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]
      break;
 8000786:	e003      	b.n	8000790 <RCC_GetClocksFreq+0xf4>
      
      
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <RCC_GetClocksFreq+0x19c>)
 800078c:	601a      	str	r2, [r3, #0]
      break;
 800078e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <RCC_GetClocksFreq+0x198>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  tmp = tmp >> 4;
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	091b      	lsrs	r3, r3, #4
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  presc = APBAHBPrescTable[tmp];
 80007a0:	4a28      	ldr	r2, [pc, #160]	; (8000844 <RCC_GetClocksFreq+0x1a8>)
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	623b      	str	r3, [r7, #32]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	40da      	lsrs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <RCC_GetClocksFreq+0x198>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  tmp = tmp >> 8;
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  presc = APBAHBPrescTable[tmp];
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <RCC_GetClocksFreq+0x1a8>)
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	4413      	add	r3, r2
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	623b      	str	r3, [r7, #32]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	6a3b      	ldr	r3, [r7, #32]
 80007d6:	40da      	lsrs	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <RCC_GetClocksFreq+0x198>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp = tmp >> 11;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	0adb      	lsrs	r3, r3, #11
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  presc = APBAHBPrescTable[tmp];
 80007ec:	4a15      	ldr	r2, [pc, #84]	; (8000844 <RCC_GetClocksFreq+0x1a8>)
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	623b      	str	r3, [r7, #32]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	40da      	lsrs	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	60da      	str	r2, [r3, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <RCC_GetClocksFreq+0x198>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  tmp = tmp >> 14;
 800080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080e:	0b9b      	lsrs	r3, r3, #14
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  presc = ADCPrescTable[tmp];
 8000812:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <RCC_GetClocksFreq+0x1ac>)
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	623b      	str	r3, [r7, #32]

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	fbb2 f2f3 	udiv	r2, r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	611a      	str	r2, [r3, #16]
}
 800082a:	bf00      	nop
 800082c:	372c      	adds	r7, #44	; 0x2c
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	007a1200 	.word	0x007a1200
 800083c:	017d7840 	.word	0x017d7840
 8000840:	003d0900 	.word	0x003d0900
 8000844:	08006488 	.word	0x08006488
 8000848:	08006498 	.word	0x08006498

0800084c <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d006      	beq.n	800086c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800085e:	4909      	ldr	r1, [pc, #36]	; (8000884 <RCC_APB2PeriphClockCmd+0x38>)
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <RCC_APB2PeriphClockCmd+0x38>)
 8000862:	699a      	ldr	r2, [r3, #24]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4313      	orrs	r3, r2
 8000868:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800086a:	e006      	b.n	800087a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800086c:	4905      	ldr	r1, [pc, #20]	; (8000884 <RCC_APB2PeriphClockCmd+0x38>)
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <RCC_APB2PeriphClockCmd+0x38>)
 8000870:	699a      	ldr	r2, [r3, #24]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	43db      	mvns	r3, r3
 8000876:	4013      	ands	r3, r2
 8000878:	618b      	str	r3, [r1, #24]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000

08000888 <RCC_GetFlagStatus>:
*                       - RCC_FLAG_LPWRRST: Low Power reset
* Output         : None
* Return         : The new state of RCC_FLAG (SET or RESET).
*******************************************************************************/
FlagStatus RCC_GetFlagStatus(u8 RCC_FLAG)
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  u32 tmp = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  u32 statusreg = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	095b      	lsrs	r3, r3, #5
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d103      	bne.n	80008b4 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <RCC_GetFlagStatus+0x70>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e009      	b.n	80008c8 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d103      	bne.n	80008c2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <RCC_GetFlagStatus+0x70>)
 80008bc:	6a1b      	ldr	r3, [r3, #32]
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e002      	b.n	80008c8 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <RCC_GetFlagStatus+0x70>)
 80008c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c6:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 031f 	and.w	r3, r3, #31
 80008ce:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	fa22 f303 	lsr.w	r3, r2, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80008e0:	2301      	movs	r3, #1
 80008e2:	74fb      	strb	r3, [r7, #19]
 80008e4:	e001      	b.n	80008ea <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 80008ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	371c      	adds	r7, #28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008fe:	e003      	b.n	8000908 <LoopCopyDataInit>

08000900 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 8000902:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000904:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000906:	3104      	adds	r1, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 800090c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800090e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000910:	d3f6      	bcc.n	8000900 <CopyDataInit>
	ldr	r2, =_sbss
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 8000914:	e002      	b.n	800091c <LoopFillZerobss>

08000916 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000916:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000918:	f842 3b04 	str.w	r3, [r2], #4

0800091c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <LoopFillZerobss+0x20>)
	cmp	r2, r3
 800091e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000920:	d3f9      	bcc.n	8000916 <FillZerobss>

/* Call the clock system intitialization function.*/
  	@bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 8000922:	f005 fd2b 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000926:	f000 fb2b 	bl	8000f80 <main>
	bx	lr
 800092a:	4770      	bx	lr
	ldr	r3, =_sidata
 800092c:	08006684 	.word	0x08006684
	ldr	r0, =_sdata
 8000930:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000934:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000938:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 800093c:	20008b4c 	.word	0x20008b4c

08000940 <App_NMI_ISR>:
*
*******************************************************************************/

    .section	.text.App_NMI_ISR
App_NMI_ISR:
	b	App_NMI_ISR
 8000940:	e7fe      	b.n	8000940 <App_NMI_ISR>

08000942 <App_Fault_ISR>:
	.size	App_NMI_ISR, .-App_NMI_ISR


    .section	.text.App_Fault_ISR
App_Fault_ISR:
	b	App_Fault_ISR
 8000942:	e7fe      	b.n	8000942 <App_Fault_ISR>

08000944 <App_MemFault_ISR>:
	.size	App_Fault_ISR, .-App_Fault_ISR


    .section	.text.App_MemFault_ISR
App_MemFault_ISR:
	b	App_MemFault_ISR
 8000944:	e7fe      	b.n	8000944 <App_MemFault_ISR>

08000946 <App_BusFault_ISR>:
	.size	App_MemFault_ISR, .-App_MemFault_ISR


    .section	.text.App_BusFault_ISR
App_BusFault_ISR:
	b	App_BusFault_ISR
 8000946:	e7fe      	b.n	8000946 <App_BusFault_ISR>

08000948 <App_UsageFault_ISR>:
	.size	App_BusFault_ISR, .-App_BusFault_ISR


    .section	.text.App_UsageFault_ISR
App_UsageFault_ISR:
	b	App_UsageFault_ISR
 8000948:	e7fe      	b.n	8000948 <App_UsageFault_ISR>

0800094a <App_Spurious_ISR>:
	.size	App_UsageFault_ISR, .-App_UsageFault_ISR

    .section	.text.App_Spurious_ISR
App_Spurious_ISR:
	b	App_Spurious_ISR
 800094a:	e7fe      	b.n	800094a <App_Spurious_ISR>

0800094c <App_Reserved_ISR>:
	.size	App_Spurious_ISR, .-App_Spurious_ISR


    .section	.text.App_Reserved_ISR
App_Reserved_ISR:
	b	App_Reserved_ISR
 800094c:	e7fe      	b.n	800094c <App_Reserved_ISR>
	...

08000950 <BSP_Init>:
*                       requirements.
*********************************************************************************************************
*/

void  BSP_Init (void)
 {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	BSP_IntInit();
 8000954:	f000 f924 	bl	8000ba0 <BSP_IntInit>

	RCC_DeInit();
 8000958:	f7ff fd70 	bl	800043c <RCC_DeInit>
	RCC_HSEConfig(RCC_HSE_ON); /* HSE = 12MHz ext. crystal.                            */
 800095c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000960:	f7ff fd9a 	bl	8000498 <RCC_HSEConfig>
	RCC_WaitForHSEStartUp();
 8000964:	f7ff fdc6 	bl	80004f4 <RCC_WaitForHSEStartUp>
		;
	}
/********************************************************************************************************/
#else
/*********************Sysclk Config for STM32 not connectivity line devices**********************/
	FLASH_SetLatency(FLASH_Latency_2); /* 2 Flash wait states when HCLK > 48MHz.               */
 8000968:	2002      	movs	r0, #2
 800096a:	f7ff fc6d 	bl	8000248 <FLASH_SetLatency>
	FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 800096e:	2010      	movs	r0, #16
 8000970:	f7ff fc82 	bl	8000278 <FLASH_PrefetchBufferCmd>
	RCC_HCLKConfig(RCC_SYSCLK_Div1); /* HCLK    = AHBCLK  = PLL / AHBPRES(1) = 72MHz.       */
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fe3d 	bl	80005f4 <RCC_HCLKConfig>
	RCC_PCLK2Config(RCC_HCLK_Div1); /* APB2CLK = AHBCLK  / APB2DIV(1)  = 72MHz.             */
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fe72 	bl	8000664 <RCC_PCLK2Config>
	RCC_PCLK1Config(RCC_HCLK_Div2); /* APB1CLK = AHBCLK  / APB1DIV(2)  = 36MHz (max).       */
 8000980:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000984:	f7ff fe52 	bl	800062c <RCC_PCLK1Config>
	RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_6); /*PLL = HSE * 6 = 72MHz                                 */
 8000988:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800098c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000990:	f7ff fdd8 	bl	8000544 <RCC_PLLConfig>
	RCC_PLLCmd(ENABLE);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fdf3 	bl	8000580 <RCC_PLLCmd>
	while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET) { /* Wait for PLL to lock.                               */
 800099a:	bf00      	nop
 800099c:	2039      	movs	r0, #57	; 0x39
 800099e:	f7ff ff73 	bl	8000888 <RCC_GetFlagStatus>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f9      	beq.n	800099c <BSP_Init+0x4c>
		;
	}
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); /* HCLK = SYSCLK = PLL = 72MHz.                        */
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fdf9 	bl	80005a0 <RCC_SYSCLKConfig>
	while (RCC_GetSYSCLKSource() != 0x08) {
 80009ae:	bf00      	nop
 80009b0:	f7ff fe12 	bl	80005d8 <RCC_GetSYSCLKSource>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b08      	cmp	r3, #8
 80009b8:	d1fa      	bne.n	80009b0 <BSP_Init+0x60>
		;
	}
/*************************************************************************************************/
#endif /* STM32F10X_CL */

    BSP_CPU_ClkFreq_MHz = BSP_CPU_ClkFreq() / (CPU_INT32U)1000000;
 80009ba:	f000 f815 	bl	80009e8 <BSP_CPU_ClkFreq>
 80009be:	4602      	mov	r2, r0
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <BSP_Init+0x90>)
 80009c2:	fba3 2302 	umull	r2, r3, r3, r2
 80009c6:	0c9b      	lsrs	r3, r3, #18
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <BSP_Init+0x94>)
 80009ca:	6013      	str	r3, [r2, #0]

    BSP_CPU_ClkFreq_MHz = BSP_CPU_ClkFreq_MHz;                  /* Surpress compiler warning BSP_CPU_ClkFreq_MHz    ... */
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <BSP_Init+0x94>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <BSP_Init+0x94>)
 80009d2:	6013      	str	r3, [r2, #0]
                                                                /* ... set and not used.                                */

    BSP_LED_Init();                                             /* Initialize the I/Os for the LED      controls.       */
 80009d4:	f000 f814 	bl	8000a00 <BSP_LED_Init>

    BSP_StatusInit();                                           /* Initialize the status input(s)                       */
 80009d8:	f000 f87c 	bl	8000ad4 <BSP_StatusInit>
#ifdef TRACE_EN                                                 /* See project / compiler preprocessor options.         */
    DBGMCU_CR |=  DBGMCU_CR_TRACE_IOEN_MASK;                    /* Enable tracing (see Note #2).                        */
    DBGMCU_CR &= ~DBGMCU_CR_TRACE_MODE_MASK;                    /* Clr trace mode sel bits.                             */
    DBGMCU_CR |=  DBGMCU_CR_TRACE_MODE_SYNC_04;                 /* Cfg trace mode to synch 4-bit.                       */
#endif
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	200003f4 	.word	0x200003f4

080009e8 <BSP_CPU_ClkFreq>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT32U  BSP_CPU_ClkFreq (void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef  rcc_clocks;


    RCC_GetClocksFreq(&rcc_clocks);
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff fe53 	bl	800069c <RCC_GetClocksFreq>

    return ((CPU_INT32U)rcc_clocks.HCLK_Frequency);
 80009f6:	68bb      	ldr	r3, [r7, #8]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <BSP_LED_Init>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_LED_Init (void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  gpio_init;
    GPIO_InitTypeDef  gpio_init2;


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8000a06:	2101      	movs	r1, #1
 8000a08:	2040      	movs	r0, #64	; 0x40
 8000a0a:	f7ff ff1f 	bl	800084c <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
 8000a0e:	2101      	movs	r1, #1
 8000a10:	2008      	movs	r0, #8
 8000a12:	f7ff ff1b 	bl	800084c <RCC_APB2PeriphClockCmd>

    gpio_init.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 8000a16:	2303      	movs	r3, #3
 8000a18:	80bb      	strh	r3, [r7, #4]
    gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	71bb      	strb	r3, [r7, #6]
    gpio_init.GPIO_Mode  = GPIO_Mode_Out_PP;
 8000a1e:	2310      	movs	r3, #16
 8000a20:	71fb      	strb	r3, [r7, #7]

    gpio_init2.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8000a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a26:	803b      	strh	r3, [r7, #0]
	gpio_init2.GPIO_Speed = GPIO_Speed_50MHz;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	70bb      	strb	r3, [r7, #2]
	gpio_init2.GPIO_Mode = GPIO_Mode_Out_PP;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	70fb      	strb	r3, [r7, #3]

    GPIO_Init(GPIOE, &gpio_init);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <BSP_LED_Init+0x4c>)
 8000a36:	f7ff fc37 	bl	80002a8 <GPIO_Init>
    GPIO_Init(GPIOB, &gpio_init2);
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <BSP_LED_Init+0x50>)
 8000a40:	f7ff fc32 	bl	80002a8 <GPIO_Init>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40011800 	.word	0x40011800
 8000a50:	40010c00 	.word	0x40010c00

08000a54 <BSP_LED_Off>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LED_Off (CPU_INT08U led)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	switch (led) {
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d82d      	bhi.n	8000ac0 <BSP_LED_Off+0x6c>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <BSP_LED_Off+0x18>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a81 	.word	0x08000a81
 8000a70:	08000a95 	.word	0x08000a95
 8000a74:	08000a9f 	.word	0x08000a9f
 8000a78:	08000aa9 	.word	0x08000aa9
 8000a7c:	08000ab5 	.word	0x08000ab5
	case 0:
		GPIO_ResetBits(GPIOE, GPIO_Pin_0 | GPIO_Pin_1);
 8000a80:	2103      	movs	r1, #3
 8000a82:	4812      	ldr	r0, [pc, #72]	; (8000acc <BSP_LED_Off+0x78>)
 8000a84:	f7ff fccc 	bl	8000420 <GPIO_ResetBits>
		GPIO_ResetBits(GPIOB, GPIO_Pin_8 | GPIO_Pin_9);
 8000a88:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <BSP_LED_Off+0x7c>)
 8000a8e:	f7ff fcc7 	bl	8000420 <GPIO_ResetBits>
		break;
 8000a92:	e016      	b.n	8000ac2 <BSP_LED_Off+0x6e>

	case 1:
		GPIO_ResetBits(GPIOE, GPIO_Pin_0);
 8000a94:	2101      	movs	r1, #1
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <BSP_LED_Off+0x78>)
 8000a98:	f7ff fcc2 	bl	8000420 <GPIO_ResetBits>
		break;
 8000a9c:	e011      	b.n	8000ac2 <BSP_LED_Off+0x6e>

	case 2:
		GPIO_ResetBits(GPIOE, GPIO_Pin_1);
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <BSP_LED_Off+0x78>)
 8000aa2:	f7ff fcbd 	bl	8000420 <GPIO_ResetBits>
		break;
 8000aa6:	e00c      	b.n	8000ac2 <BSP_LED_Off+0x6e>

	case 3:
		GPIO_ResetBits(GPIOB, GPIO_Pin_8);
 8000aa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <BSP_LED_Off+0x7c>)
 8000aae:	f7ff fcb7 	bl	8000420 <GPIO_ResetBits>
		break;
 8000ab2:	e006      	b.n	8000ac2 <BSP_LED_Off+0x6e>

	case 4:
		GPIO_ResetBits(GPIOB, GPIO_Pin_9);
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <BSP_LED_Off+0x7c>)
 8000aba:	f7ff fcb1 	bl	8000420 <GPIO_ResetBits>
		break;
 8000abe:	e000      	b.n	8000ac2 <BSP_LED_Off+0x6e>

	default:
		break;
 8000ac0:	bf00      	nop
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40011800 	.word	0x40011800
 8000ad0:	40010c00 	.word	0x40010c00

08000ad4 <BSP_StatusInit>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_StatusInit (void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;


    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_5;             /* PB5 is used to read the status of the LM75 */
 8000ada:	2320      	movs	r3, #32
 8000adc:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <BSP_StatusInit+0x24>)
 8000aec:	f7ff fbdc 	bl	80002a8 <GPIO_Init>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40010c00 	.word	0x40010c00

08000afc <CPU_TS_TmrInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
    CPU_INT32U  cpu_clk_freq_hz;


    DEM_CR         |= (CPU_INT32U)DEM_CR_TRCENA;                /* Enable Cortex-M3's DWT CYCCNT reg.                   */
 8000b02:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <CPU_TS_TmrInit+0x38>)
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <CPU_TS_TmrInit+0x38>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b0c:	6013      	str	r3, [r2, #0]
    DWT_CYCCNT      = (CPU_INT32U)0u;
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <CPU_TS_TmrInit+0x3c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
    DWT_CR         |= (CPU_INT32U)DWT_CR_CYCCNTENA;
 8000b14:	4a09      	ldr	r2, [pc, #36]	; (8000b3c <CPU_TS_TmrInit+0x40>)
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <CPU_TS_TmrInit+0x40>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6013      	str	r3, [r2, #0]

    cpu_clk_freq_hz = BSP_CPU_ClkFreq();
 8000b20:	f7ff ff62 	bl	80009e8 <BSP_CPU_ClkFreq>
 8000b24:	6078      	str	r0, [r7, #4]
    CPU_TS_TmrFreqSet(cpu_clk_freq_hz);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 fabe 	bl	80010a8 <CPU_TS_TmrFreqSet>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	e000edfc 	.word	0xe000edfc
 8000b38:	e0001004 	.word	0xe0001004
 8000b3c:	e0001000 	.word	0xe0001000

08000b40 <CPU_TS_TmrRd>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
    return ((CPU_TS_TMR)DWT_CYCCNT);
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <CPU_TS_TmrRd+0x10>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	e0001004 	.word	0xe0001004

08000b54 <BSP_IntDisAll>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_IntDisAll (void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    CPU_IntDis();
 8000b58:	f7ff fb1a 	bl	8000190 <CPU_IntDis>
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <BSP_IntVectSet>:
*********************************************************************************************************
*/

void  BSP_IntVectSet (CPU_DATA       int_id,
                      CPU_FNCT_VOID  isr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]


    if (int_id < BSP_INT_SRC_NBR) {
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b43      	cmp	r3, #67	; 0x43
 8000b72:	d80e      	bhi.n	8000b92 <BSP_IntVectSet+0x32>
        CPU_CRITICAL_ENTER();
 8000b74:	f7ff fb10 	bl	8000198 <CPU_SR_Save>
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	f000 faef 	bl	800115c <CPU_IntDisMeasStart>
        BSP_IntVectTbl[int_id] = isr;
 8000b7e:	4907      	ldr	r1, [pc, #28]	; (8000b9c <BSP_IntVectSet+0x3c>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        CPU_CRITICAL_EXIT();
 8000b88:	f000 fb08 	bl	800119c <CPU_IntDisMeasStop>
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff fb07 	bl	80001a0 <CPU_SR_Restore>
    }
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000001c 	.word	0x2000001c

08000ba0 <BSP_IntInit>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_IntInit (void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
    CPU_DATA  int_id;


    for (int_id = 0; int_id < BSP_INT_SRC_NBR; int_id++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	e006      	b.n	8000bba <BSP_IntInit+0x1a>
        BSP_IntVectSet(int_id, BSP_IntHandlerDummy);
 8000bac:	4906      	ldr	r1, [pc, #24]	; (8000bc8 <BSP_IntInit+0x28>)
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffd6 	bl	8000b60 <BSP_IntVectSet>
    for (int_id = 0; int_id < BSP_INT_SRC_NBR; int_id++) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b43      	cmp	r3, #67	; 0x43
 8000bbe:	d9f5      	bls.n	8000bac <BSP_IntInit+0xc>
    }
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	08000f75 	.word	0x08000f75

08000bcc <BSP_IntHandlerWWDG>:
*
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_IntHandlerWWDG          (void)  { BSP_IntHandler(BSP_INT_ID_WWDG);            }
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f9a7 	bl	8000f24 <BSP_IntHandler>
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <BSP_IntHandlerPVD>:
void  BSP_IntHandlerPVD           (void)  { BSP_IntHandler(BSP_INT_ID_PVD);             }
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 f9a0 	bl	8000f24 <BSP_IntHandler>
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <BSP_IntHandlerTAMPER>:
void  BSP_IntHandlerTAMPER        (void)  { BSP_IntHandler(BSP_INT_ID_TAMPER);          }
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	2002      	movs	r0, #2
 8000bee:	f000 f999 	bl	8000f24 <BSP_IntHandler>
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <BSP_IntHandlerRTC>:
void  BSP_IntHandlerRTC           (void)  { BSP_IntHandler(BSP_INT_ID_RTC);             }
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f000 f992 	bl	8000f24 <BSP_IntHandler>
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <BSP_IntHandlerFLASH>:
void  BSP_IntHandlerFLASH         (void)  { BSP_IntHandler(BSP_INT_ID_FLASH);           }
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	2004      	movs	r0, #4
 8000c0a:	f000 f98b 	bl	8000f24 <BSP_IntHandler>
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <BSP_IntHandlerRCC>:
void  BSP_IntHandlerRCC           (void)  { BSP_IntHandler(BSP_INT_ID_RCC);             }
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	2005      	movs	r0, #5
 8000c18:	f000 f984 	bl	8000f24 <BSP_IntHandler>
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <BSP_IntHandlerEXTI0>:
void  BSP_IntHandlerEXTI0         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI0);           }
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	2006      	movs	r0, #6
 8000c26:	f000 f97d 	bl	8000f24 <BSP_IntHandler>
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <BSP_IntHandlerEXTI1>:
void  BSP_IntHandlerEXTI1         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI1);           }
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	2007      	movs	r0, #7
 8000c34:	f000 f976 	bl	8000f24 <BSP_IntHandler>
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <BSP_IntHandlerEXTI2>:
void  BSP_IntHandlerEXTI2         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI2);           }
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	2008      	movs	r0, #8
 8000c42:	f000 f96f 	bl	8000f24 <BSP_IntHandler>
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <BSP_IntHandlerEXTI3>:
void  BSP_IntHandlerEXTI3         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI3);           }
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	2009      	movs	r0, #9
 8000c50:	f000 f968 	bl	8000f24 <BSP_IntHandler>
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <BSP_IntHandlerEXTI4>:
void  BSP_IntHandlerEXTI4         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI4);           }
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f000 f961 	bl	8000f24 <BSP_IntHandler>
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <BSP_IntHandlerDMA1_CH1>:
void  BSP_IntHandlerDMA1_CH1      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH1);        }
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	200b      	movs	r0, #11
 8000c6c:	f000 f95a 	bl	8000f24 <BSP_IntHandler>
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <BSP_IntHandlerDMA1_CH2>:
void  BSP_IntHandlerDMA1_CH2      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH2);        }
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	200c      	movs	r0, #12
 8000c7a:	f000 f953 	bl	8000f24 <BSP_IntHandler>
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <BSP_IntHandlerDMA1_CH3>:
void  BSP_IntHandlerDMA1_CH3      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH3);        }
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	200d      	movs	r0, #13
 8000c88:	f000 f94c 	bl	8000f24 <BSP_IntHandler>
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <BSP_IntHandlerDMA1_CH4>:
void  BSP_IntHandlerDMA1_CH4      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH4);        }
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	200e      	movs	r0, #14
 8000c96:	f000 f945 	bl	8000f24 <BSP_IntHandler>
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <BSP_IntHandlerDMA1_CH5>:
void  BSP_IntHandlerDMA1_CH5      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH5);        }
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f93e 	bl	8000f24 <BSP_IntHandler>
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <BSP_IntHandlerDMA1_CH6>:
void  BSP_IntHandlerDMA1_CH6      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH6);        }
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	2010      	movs	r0, #16
 8000cb2:	f000 f937 	bl	8000f24 <BSP_IntHandler>
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <BSP_IntHandlerDMA1_CH7>:
void  BSP_IntHandlerDMA1_CH7      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH7);        }
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	2011      	movs	r0, #17
 8000cc0:	f000 f930 	bl	8000f24 <BSP_IntHandler>
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <BSP_IntHandlerADC1_2>:
void  BSP_IntHandlerADC1_2        (void)  { BSP_IntHandler(BSP_INT_ID_ADC1_2);          }
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	2012      	movs	r0, #18
 8000cce:	f000 f929 	bl	8000f24 <BSP_IntHandler>
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <BSP_IntHandlerCAN1_TX>:
void  BSP_IntHandlerCAN1_TX       (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_TX);         }
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	2013      	movs	r0, #19
 8000cdc:	f000 f922 	bl	8000f24 <BSP_IntHandler>
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <BSP_IntHandlerCAN1_RX0>:
void  BSP_IntHandlerCAN1_RX0      (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_RX0);        }
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	2014      	movs	r0, #20
 8000cea:	f000 f91b 	bl	8000f24 <BSP_IntHandler>
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <BSP_IntHandlerCAN1_RX1>:
void  BSP_IntHandlerCAN1_RX1      (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_RX1);        }
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	2015      	movs	r0, #21
 8000cf8:	f000 f914 	bl	8000f24 <BSP_IntHandler>
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <BSP_IntHandlerCAN1_SCE>:
void  BSP_IntHandlerCAN1_SCE      (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_SCE);        }
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	2016      	movs	r0, #22
 8000d06:	f000 f90d 	bl	8000f24 <BSP_IntHandler>
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <BSP_IntHandlerEXTI9_5>:
void  BSP_IntHandlerEXTI9_5       (void)  { BSP_IntHandler(BSP_INT_ID_EXTI9_5);         }
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	2017      	movs	r0, #23
 8000d14:	f000 f906 	bl	8000f24 <BSP_IntHandler>
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <BSP_IntHandlerTIM1_BRK>:
void  BSP_IntHandlerTIM1_BRK      (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_BRK);        }
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	2018      	movs	r0, #24
 8000d22:	f000 f8ff 	bl	8000f24 <BSP_IntHandler>
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <BSP_IntHandlerTIM1_UP>:
void  BSP_IntHandlerTIM1_UP       (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_UP);         }
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	2019      	movs	r0, #25
 8000d30:	f000 f8f8 	bl	8000f24 <BSP_IntHandler>
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <BSP_IntHandlerTIM1_TRG_COM>:
void  BSP_IntHandlerTIM1_TRG_COM  (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_TRG_COM);    }
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	201a      	movs	r0, #26
 8000d3e:	f000 f8f1 	bl	8000f24 <BSP_IntHandler>
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <BSP_IntHandlerTIM1_CC>:
void  BSP_IntHandlerTIM1_CC       (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_CC);         }
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	201b      	movs	r0, #27
 8000d4c:	f000 f8ea 	bl	8000f24 <BSP_IntHandler>
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <BSP_IntHandlerTIM2>:
void  BSP_IntHandlerTIM2          (void)  { BSP_IntHandler(BSP_INT_ID_TIM2);            }
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	201c      	movs	r0, #28
 8000d5a:	f000 f8e3 	bl	8000f24 <BSP_IntHandler>
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <BSP_IntHandlerTIM3>:
void  BSP_IntHandlerTIM3          (void)  { BSP_IntHandler(BSP_INT_ID_TIM3);            }
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	201d      	movs	r0, #29
 8000d68:	f000 f8dc 	bl	8000f24 <BSP_IntHandler>
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <BSP_IntHandlerTIM4>:
void  BSP_IntHandlerTIM4          (void)  { BSP_IntHandler(BSP_INT_ID_TIM4);            }
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	201e      	movs	r0, #30
 8000d76:	f000 f8d5 	bl	8000f24 <BSP_IntHandler>
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <BSP_IntHandlerI2C1_EV>:
void  BSP_IntHandlerI2C1_EV       (void)  { BSP_IntHandler(BSP_INT_ID_I2C1_EV);         }
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	201f      	movs	r0, #31
 8000d84:	f000 f8ce 	bl	8000f24 <BSP_IntHandler>
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <BSP_IntHandlerI2C1_ER>:
void  BSP_IntHandlerI2C1_ER       (void)  { BSP_IntHandler(BSP_INT_ID_I2C1_ER);         }
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	2020      	movs	r0, #32
 8000d92:	f000 f8c7 	bl	8000f24 <BSP_IntHandler>
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <BSP_IntHandlerI2C2_EV>:
void  BSP_IntHandlerI2C2_EV       (void)  { BSP_IntHandler(BSP_INT_ID_I2C2_EV);         }
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	2021      	movs	r0, #33	; 0x21
 8000da0:	f000 f8c0 	bl	8000f24 <BSP_IntHandler>
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <BSP_IntHandlerI2C2_ER>:
void  BSP_IntHandlerI2C2_ER       (void)  { BSP_IntHandler(BSP_INT_ID_I2C2_ER);         }
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	2022      	movs	r0, #34	; 0x22
 8000dae:	f000 f8b9 	bl	8000f24 <BSP_IntHandler>
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <BSP_IntHandlerSPI1>:
void  BSP_IntHandlerSPI1          (void)  { BSP_IntHandler(BSP_INT_ID_SPI1);            }
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	2023      	movs	r0, #35	; 0x23
 8000dbc:	f000 f8b2 	bl	8000f24 <BSP_IntHandler>
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <BSP_IntHandlerSPI2>:
void  BSP_IntHandlerSPI2          (void)  { BSP_IntHandler(BSP_INT_ID_SPI2);            }
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	2024      	movs	r0, #36	; 0x24
 8000dca:	f000 f8ab 	bl	8000f24 <BSP_IntHandler>
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <BSP_IntHandlerUSART1>:
void  BSP_IntHandlerUSART1        (void)  { BSP_IntHandler(BSP_INT_ID_USART1);          }
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	2025      	movs	r0, #37	; 0x25
 8000dd8:	f000 f8a4 	bl	8000f24 <BSP_IntHandler>
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <BSP_IntHandlerUSART2>:
void  BSP_IntHandlerUSART2        (void)  { BSP_IntHandler(BSP_INT_ID_USART2);          }
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	2026      	movs	r0, #38	; 0x26
 8000de6:	f000 f89d 	bl	8000f24 <BSP_IntHandler>
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}

08000dee <BSP_IntHandlerUSART3>:
void  BSP_IntHandlerUSART3        (void)  { BSP_IntHandler(BSP_INT_ID_USART3);          }
 8000dee:	b580      	push	{r7, lr}
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	2027      	movs	r0, #39	; 0x27
 8000df4:	f000 f896 	bl	8000f24 <BSP_IntHandler>
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <BSP_IntHandlerEXTI15_10>:
void  BSP_IntHandlerEXTI15_10     (void)  { BSP_IntHandler(BSP_INT_ID_EXTI15_10);       }
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	2028      	movs	r0, #40	; 0x28
 8000e02:	f000 f88f 	bl	8000f24 <BSP_IntHandler>
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <BSP_IntHandlerRTCAlarm>:
void  BSP_IntHandlerRTCAlarm      (void)  { BSP_IntHandler(BSP_INT_ID_RTC_ALARM);       }
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	2029      	movs	r0, #41	; 0x29
 8000e10:	f000 f888 	bl	8000f24 <BSP_IntHandler>
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <BSP_IntHandlerUSBWakeUp>:
void  BSP_IntHandlerUSBWakeUp     (void)  { BSP_IntHandler(BSP_INT_ID_OTG_FS_WKUP);     }
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	202a      	movs	r0, #42	; 0x2a
 8000e1e:	f000 f881 	bl	8000f24 <BSP_IntHandler>
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <BSP_IntHandlerTIM5>:
void  BSP_IntHandlerTIM5          (void)  { BSP_IntHandler(BSP_INT_ID_TIM5);            }
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	2032      	movs	r0, #50	; 0x32
 8000e2c:	f000 f87a 	bl	8000f24 <BSP_IntHandler>
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <BSP_IntHandlerSPI3>:
void  BSP_IntHandlerSPI3          (void)  { BSP_IntHandler(BSP_INT_ID_SPI3);            }
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	2033      	movs	r0, #51	; 0x33
 8000e3a:	f000 f873 	bl	8000f24 <BSP_IntHandler>
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <BSP_IntHandlerUSART4>:
void  BSP_IntHandlerUSART4        (void)  { BSP_IntHandler(BSP_INT_ID_USART4);          }
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	2034      	movs	r0, #52	; 0x34
 8000e48:	f000 f86c 	bl	8000f24 <BSP_IntHandler>
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <BSP_IntHandlerUSART5>:
void  BSP_IntHandlerUSART5        (void)  { BSP_IntHandler(BSP_INT_ID_USART5);          }
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	2035      	movs	r0, #53	; 0x35
 8000e56:	f000 f865 	bl	8000f24 <BSP_IntHandler>
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <BSP_IntHandlerTIM6>:
void  BSP_IntHandlerTIM6          (void)  { BSP_IntHandler(BSP_INT_ID_TIM6);            }
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	2036      	movs	r0, #54	; 0x36
 8000e64:	f000 f85e 	bl	8000f24 <BSP_IntHandler>
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <BSP_IntHandlerTIM7>:
void  BSP_IntHandlerTIM7          (void)  { BSP_IntHandler(BSP_INT_ID_TIM7);            }
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	2037      	movs	r0, #55	; 0x37
 8000e72:	f000 f857 	bl	8000f24 <BSP_IntHandler>
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <BSP_IntHandlerDMA2_CH1>:
void  BSP_IntHandlerDMA2_CH1      (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH1);        }
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	2038      	movs	r0, #56	; 0x38
 8000e80:	f000 f850 	bl	8000f24 <BSP_IntHandler>
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <BSP_IntHandlerDMA2_CH2>:
void  BSP_IntHandlerDMA2_CH2      (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH2);        }
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	2039      	movs	r0, #57	; 0x39
 8000e8e:	f000 f849 	bl	8000f24 <BSP_IntHandler>
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <BSP_IntHandlerDMA2_CH3>:
void  BSP_IntHandlerDMA2_CH3      (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH3);        }
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	203a      	movs	r0, #58	; 0x3a
 8000e9c:	f000 f842 	bl	8000f24 <BSP_IntHandler>
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <BSP_IntHandlerDMA2_CH4>:
void  BSP_IntHandlerDMA2_CH4      (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH4);        }
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	203b      	movs	r0, #59	; 0x3b
 8000eaa:	f000 f83b 	bl	8000f24 <BSP_IntHandler>
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <BSP_IntHandlerDMA2_CH5>:
void  BSP_IntHandlerDMA2_CH5      (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH5);        }
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	203c      	movs	r0, #60	; 0x3c
 8000eb8:	f000 f834 	bl	8000f24 <BSP_IntHandler>
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <BSP_IntHandlerETH>:
void  BSP_IntHandlerETH           (void)  { BSP_IntHandler(BSP_INT_ID_ETH);             }
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	203d      	movs	r0, #61	; 0x3d
 8000ec6:	f000 f82d 	bl	8000f24 <BSP_IntHandler>
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <BSP_IntHandlerETHWakeup>:
void  BSP_IntHandlerETHWakeup     (void)  { BSP_IntHandler(BSP_INT_ID_ETH_WKUP);        }
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	203e      	movs	r0, #62	; 0x3e
 8000ed4:	f000 f826 	bl	8000f24 <BSP_IntHandler>
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <BSP_IntHandlerCAN2_TX>:
void  BSP_IntHandlerCAN2_TX       (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_TX);         }
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	203f      	movs	r0, #63	; 0x3f
 8000ee2:	f000 f81f 	bl	8000f24 <BSP_IntHandler>
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <BSP_IntHandlerCAN2_RX0>:
void  BSP_IntHandlerCAN2_RX0      (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_RX0);        }
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	2040      	movs	r0, #64	; 0x40
 8000ef0:	f000 f818 	bl	8000f24 <BSP_IntHandler>
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <BSP_IntHandlerCAN2_RX1>:
void  BSP_IntHandlerCAN2_RX1      (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_RX1);        }
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	2041      	movs	r0, #65	; 0x41
 8000efe:	f000 f811 	bl	8000f24 <BSP_IntHandler>
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <BSP_IntHandlerCAN2_SCE>:
void  BSP_IntHandlerCAN2_SCE      (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_SCE);        }
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	2042      	movs	r0, #66	; 0x42
 8000f0c:	f000 f80a 	bl	8000f24 <BSP_IntHandler>
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <BSP_IntHandlerOTG>:
void  BSP_IntHandlerOTG           (void)  { BSP_IntHandler(BSP_INT_ID_OTG_FS);          }
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	2043      	movs	r0, #67	; 0x43
 8000f1a:	f000 f803 	bl	8000f24 <BSP_IntHandler>
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <BSP_IntHandler>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_IntHandler (CPU_DATA  int_id)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    CPU_FNCT_VOID  isr;
    CPU_SR_ALLOC();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();                                       /* Tell the OS that we are starting an ISR            */
 8000f30:	f7ff f932 	bl	8000198 <CPU_SR_Save>
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	f000 f911 	bl	800115c <CPU_IntDisMeasStart>

    OSIntEnter();
 8000f3a:	f000 fd65 	bl	8001a08 <OSIntEnter>

    CPU_CRITICAL_EXIT();
 8000f3e:	f000 f92d 	bl	800119c <CPU_IntDisMeasStop>
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f7ff f92c 	bl	80001a0 <CPU_SR_Restore>

    if (int_id < BSP_INT_SRC_NBR) {
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b43      	cmp	r3, #67	; 0x43
 8000f4c:	d809      	bhi.n	8000f62 <BSP_IntHandler+0x3e>
        isr = BSP_IntVectTbl[int_id];
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <BSP_IntHandler+0x4c>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	60bb      	str	r3, [r7, #8]
        if (isr != (CPU_FNCT_VOID)0) {
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <BSP_IntHandler+0x3e>
            isr();
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	4798      	blx	r3
        }
    }

    OSIntExit();                                                /* Tell the OS that we are leaving the ISR            */
 8000f62:	f000 fd6d 	bl	8001a40 <OSIntExit>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000001c 	.word	0x2000001c

08000f74 <BSP_IntHandlerDummy>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_IntHandlerDummy (void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <main>:
* Returns     : none
*********************************************************************************************************
*/

int  main (void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af0a      	add	r7, sp, #40	; 0x28
    OS_ERR  err;


    BSP_IntDisAll();                                            /* Disable all interrupts.                              */
 8000f86:	f7ff fde5 	bl	8000b54 <BSP_IntDisAll>

    OSInit(&err);                                               /* Init uC/OS-III.                                      */
 8000f8a:	1dbb      	adds	r3, r7, #6
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fc2d 	bl	80017ec <OSInit>

    OSTaskCreate((OS_TCB     *)&AppTaskStartTCB,                /* Create the start task                                */
 8000f92:	1dbb      	adds	r3, r7, #6
 8000f94:	9308      	str	r3, [sp, #32]
 8000f96:	2303      	movs	r3, #3
 8000f98:	9307      	str	r3, [sp, #28]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9306      	str	r3, [sp, #24]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9305      	str	r3, [sp, #20]
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	9304      	str	r3, [sp, #16]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	9303      	str	r3, [sp, #12]
 8000faa:	230c      	movs	r3, #12
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <main+0x54>)
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <main+0x58>)
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <main+0x5c>)
 8000fbc:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <main+0x60>)
 8000fbe:	f003 f861 	bl	8004084 <OSTaskCreate>
                 (OS_TICK     ) 0u,
                 (void       *) 0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)&err);

    OSStart(&err);                                              /* Start multitasking (i.e. give control to uC/OS-III). */
 8000fc2:	1dbb      	adds	r3, r7, #6
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fe91 	bl	8001cec <OSStart>
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001f4 	.word	0x200001f4
 8000fd8:	08000fe5 	.word	0x08000fe5
 8000fdc:	080063dc 	.word	0x080063dc
 8000fe0:	2000012c 	.word	0x2000012c

08000fe4 <AppTaskStart>:
*                  used.  The compiler should not generate any code for this statement.
*********************************************************************************************************
*/

static  void  AppTaskStart (void *p_arg)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
    OS_ERR      err;


   (void)p_arg;

    BSP_Init();                                                 /* Initialize BSP functions                             */
 8000fec:	f7ff fcb0 	bl	8000950 <BSP_Init>
    CPU_Init();
 8000ff0:	f000 f836 	bl	8001060 <CPU_Init>

    cpu_clk_freq = BSP_CPU_ClkFreq();                           /* Determine SysTick reference freq.                    */
 8000ff4:	f7ff fcf8 	bl	80009e8 <BSP_CPU_ClkFreq>
 8000ff8:	6178      	str	r0, [r7, #20]
    cnts = cpu_clk_freq / (CPU_INT32U)OSCfg_TickRate_Hz;        /* Determine nbr SysTick increments                     */
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <AppTaskStart+0x60>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	fbb2 f3f3 	udiv	r3, r2, r3
 8001004:	613b      	str	r3, [r7, #16]
    OS_CPU_SysTickInit(cnts);                                   /* Init uC/OS periodic time src (SysTick).              */
 8001006:	6938      	ldr	r0, [r7, #16]
 8001008:	f000 fbc0 	bl	800178c <OS_CPU_SysTickInit>

    Mem_Init();                                                 /* Initialize Memory Management Module                  */
 800100c:	f000 f97c 	bl	8001308 <Mem_Init>

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskCPUUsageInit(&err);                               /* Compute CPU capacity with no task running            */
 8001010:	f107 030e 	add.w	r3, r7, #14
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fd61 	bl	8003adc <OSStatTaskCPUUsageInit>
#endif

    CPU_IntDisMeasMaxCurReset();
 800101a:	f000 f853 	bl	80010c4 <CPU_IntDisMeasMaxCurReset>


    
    AppTaskCreate();                                            /* Create Application Tasks                             */
 800101e:	f000 f813 	bl	8001048 <AppTaskCreate>
    
    AppObjCreate();                                             /* Create Application Objects                           */
 8001022:	f000 f817 	bl	8001054 <AppObjCreate>
    
    BSP_LED_Off(0);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fd14 	bl	8000a54 <BSP_LED_Off>

    while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */
        //BSP_LED_Toggle(0);
        OSTimeDlyHMSM(0, 0, 0, 100,
 800102c:	f107 030e 	add.w	r3, r7, #14
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	2300      	movs	r3, #0
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2364      	movs	r3, #100	; 0x64
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2000      	movs	r0, #0
 800103e:	f004 fdf7 	bl	8005c30 <OSTimeDlyHMSM>
 8001042:	e7f3      	b.n	800102c <AppTaskStart+0x48>
 8001044:	080064e4 	.word	0x080064e4

08001048 <AppTaskCreate>:
* Returns    :  none
*********************************************************************************************************
*/

static  void  AppTaskCreate (void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <AppObjCreate>:
* Returns    :  none
*********************************************************************************************************
*/

static  void  AppObjCreate (void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
                                                                /* --------------------- INIT TS ---------------------- */
#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
    CPU_TS_Init();                                              /* See Note #3a.                                        */
 8001064:	f000 f8d6 	bl	8001214 <CPU_TS_Init>
#endif
                                                                /* -------------- INIT INT DIS TIME MEAS -------------- */
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
    CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
 8001068:	f000 f8e0 	bl	800122c <CPU_IntDisMeasInit>
#endif

                                                                /* ------------------ INIT CPU NAME ------------------- */
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
     CPU_NameInit();
 800106c:	f000 f8cc 	bl	8001208 <CPU_NameInit>
#endif
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 800107e:	f7ff f88b 	bl	8000198 <CPU_SR_Save>
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	f000 f86a 	bl	800115c <CPU_IntDisMeasStart>
    Mem_Clr((void     *)&CPU_Name[0],
 8001088:	2110      	movs	r1, #16
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <CPU_NameClr+0x30>)
 800108c:	f000 f984 	bl	8001398 <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 8001090:	f000 f884 	bl	800119c <CPU_IntDisMeasStop>
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff f883 	bl	80001a0 <CPU_SR_Restore>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000418 	.word	0x20000418

080010a8 <CPU_TS_TmrFreqSet>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    CPU_TS_TmrFreq_Hz = freq_hz;
 80010b0:	4a03      	ldr	r2, [pc, #12]	; (80010c0 <CPU_TS_TmrFreqSet+0x18>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	200003fc 	.word	0x200003fc

080010c4 <CPU_IntDisMeasMaxCurReset>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
    CPU_TS_TMR  time_max_cnts;
    CPU_SR_ALLOC();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]


    time_max_cnts             = CPU_IntDisMeasMaxCurGet();
 80010ce:	f000 f811 	bl	80010f4 <CPU_IntDisMeasMaxCurGet>
 80010d2:	6038      	str	r0, [r7, #0]
    CPU_INT_DIS();
 80010d4:	f7ff f860 	bl	8000198 <CPU_SR_Save>
 80010d8:	6078      	str	r0, [r7, #4]
    CPU_IntDisMeasMaxCur_cnts = 0u;
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <CPU_IntDisMeasMaxCurReset+0x2c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    CPU_INT_EN();
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff f85d 	bl	80001a0 <CPU_SR_Restore>

    return (time_max_cnts);
 80010e6:	683b      	ldr	r3, [r7, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000040c 	.word	0x2000040c

080010f4 <CPU_IntDisMeasMaxCurGet>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
    CPU_TS_TMR  time_tot_cnts;
    CPU_TS_TMR  time_max_cnts;
    CPU_SR_ALLOC();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]


    CPU_INT_DIS();
 80010fe:	f7ff f84b 	bl	8000198 <CPU_SR_Save>
 8001102:	60f8      	str	r0, [r7, #12]
    time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <CPU_IntDisMeasMaxCurGet+0x30>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60bb      	str	r3, [r7, #8]
    CPU_INT_EN();
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7ff f848 	bl	80001a0 <CPU_SR_Restore>
    time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 8001110:	68b8      	ldr	r0, [r7, #8]
 8001112:	f000 f8dd 	bl	80012d0 <CPU_IntDisMeasMaxCalc>
 8001116:	6078      	str	r0, [r7, #4]

    return (time_max_cnts);
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000040c 	.word	0x2000040c

08001128 <CPU_IntDisMeasMaxGet>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
CPU_TS_TMR  CPU_IntDisMeasMaxGet (void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
    CPU_TS_TMR  time_tot_cnts;
    CPU_TS_TMR  time_max_cnts;
    CPU_SR_ALLOC();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]


    CPU_INT_DIS();
 8001132:	f7ff f831 	bl	8000198 <CPU_SR_Save>
 8001136:	60f8      	str	r0, [r7, #12]
    time_tot_cnts = CPU_IntDisMeasMax_cnts;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <CPU_IntDisMeasMaxGet+0x30>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60bb      	str	r3, [r7, #8]
    CPU_INT_EN();
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff f82e 	bl	80001a0 <CPU_SR_Restore>
    time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 8001144:	68b8      	ldr	r0, [r7, #8]
 8001146:	f000 f8c3 	bl	80012d0 <CPU_IntDisMeasMaxCalc>
 800114a:	6078      	str	r0, [r7, #4]

    return (time_max_cnts);
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200003f8 	.word	0x200003f8

0800115c <CPU_IntDisMeasStart>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
void  CPU_IntDisMeasStart (void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    CPU_IntDisMeasCtr++;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <CPU_IntDisMeasStart+0x34>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <CPU_IntDisMeasStart+0x34>)
 800116a:	801a      	strh	r2, [r3, #0]
    if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NOT yet dis'd, ...                       */
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <CPU_IntDisMeasStart+0x38>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d104      	bne.n	800117e <CPU_IntDisMeasStart+0x22>
        CPU_IntDisMeasStart_cnts = CPU_TS_TmrRd();                  /* ... get ints dis'd start time.                   */
 8001174:	f7ff fce4 	bl	8000b40 <CPU_TS_TmrRd>
 8001178:	4602      	mov	r2, r0
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <CPU_IntDisMeasStart+0x3c>)
 800117c:	601a      	str	r2, [r3, #0]
    }
    CPU_IntDisNestCtr++;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <CPU_IntDisMeasStart+0x38>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	b29a      	uxth	r2, r3
 8001186:	4b03      	ldr	r3, [pc, #12]	; (8001194 <CPU_IntDisMeasStart+0x38>)
 8001188:	801a      	strh	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000410 	.word	0x20000410
 8001194:	20000404 	.word	0x20000404
 8001198:	20000400 	.word	0x20000400

0800119c <CPU_IntDisMeasStop>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
void  CPU_IntDisMeasStop (void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
    CPU_TS_TMR  time_ints_disd_cnts;


    CPU_IntDisNestCtr--;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <CPU_IntDisMeasStop+0x58>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <CPU_IntDisMeasStop+0x58>)
 80011ac:	801a      	strh	r2, [r3, #0]
    if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NO longer dis'd,        ...              */
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <CPU_IntDisMeasStop+0x58>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d11a      	bne.n	80011ec <CPU_IntDisMeasStop+0x50>
        CPU_IntDisMeasStop_cnts = CPU_TS_TmrRd();                   /* ... get  ints dis'd stop time & ...              */
 80011b6:	f7ff fcc3 	bl	8000b40 <CPU_TS_TmrRd>
 80011ba:	4602      	mov	r2, r0
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <CPU_IntDisMeasStop+0x5c>)
 80011be:	601a      	str	r2, [r3, #0]
                                                                    /* ... calc ints dis'd tot  time (see Note #1b2A).  */
        time_ints_disd_cnts     = CPU_IntDisMeasStop_cnts -
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <CPU_IntDisMeasStop+0x5c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <CPU_IntDisMeasStop+0x60>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	607b      	str	r3, [r7, #4]
                                  CPU_IntDisMeasStart_cnts;
                                                                    /* Calc max ints dis'd times.                       */
        if (CPU_IntDisMeasMaxCur_cnts < time_ints_disd_cnts) {
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <CPU_IntDisMeasStop+0x64>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d202      	bcs.n	80011dc <CPU_IntDisMeasStop+0x40>
            CPU_IntDisMeasMaxCur_cnts = time_ints_disd_cnts;
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <CPU_IntDisMeasStop+0x64>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6013      	str	r3, [r2, #0]
        }
        if (CPU_IntDisMeasMax_cnts    < time_ints_disd_cnts) {
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <CPU_IntDisMeasStop+0x68>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d202      	bcs.n	80011ec <CPU_IntDisMeasStop+0x50>
            CPU_IntDisMeasMax_cnts    = time_ints_disd_cnts;
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <CPU_IntDisMeasStop+0x68>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6013      	str	r3, [r2, #0]
        }
    }
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000404 	.word	0x20000404
 80011f8:	20000408 	.word	0x20000408
 80011fc:	20000400 	.word	0x20000400
 8001200:	2000040c 	.word	0x2000040c
 8001204:	200003f8 	.word	0x200003f8

08001208 <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
    CPU_NameClr();
 800120c:	f7ff ff32 	bl	8001074 <CPU_NameClr>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <CPU_TS_Init>:
*/

#if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
     (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
static  void  CPU_TS_Init (void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <CPU_TS_Init+0x14>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
 800121e:	f7ff fc6d 	bl	8000afc <CPU_TS_TmrInit>
#if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
    CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
    CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
#endif
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200003fc 	.word	0x200003fc

0800122c <CPU_IntDisMeasInit>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
static  void  CPU_IntDisMeasInit (void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
    CPU_TS_TMR  time_meas_tot_cnts;
    CPU_INT16U  i;
    CPU_SR_ALLOC();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]

                                                                /* ----------- INIT INT DIS TIME MEAS CTRLS ----------- */
    CPU_IntDisMeasCtr         = 0u;
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <CPU_IntDisMeasInit+0x88>)
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
    CPU_IntDisNestCtr         = 0u;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <CPU_IntDisMeasInit+0x8c>)
 800123e:	2200      	movs	r2, #0
 8001240:	801a      	strh	r2, [r3, #0]
    CPU_IntDisMeasStart_cnts  = 0u;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <CPU_IntDisMeasInit+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
    CPU_IntDisMeasStop_cnts   = 0u;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <CPU_IntDisMeasInit+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    CPU_IntDisMeasMaxCur_cnts = 0u;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <CPU_IntDisMeasInit+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
    CPU_IntDisMeasMax_cnts    = 0u;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <CPU_IntDisMeasInit+0x9c>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
    CPU_IntDisMeasOvrhd_cnts  = 0u;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <CPU_IntDisMeasInit+0xa0>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

                                                                /* ----------- CALC INT DIS TIME MEAS OVRHD ----------- */
    time_meas_tot_cnts = 0u;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
    CPU_INT_DIS();                                              /* Ints MUST be dis'd for ovrhd calc (see Note #3b).    */
 8001264:	f7fe ff98 	bl	8000198 <CPU_SR_Save>
 8001268:	6078      	str	r0, [r7, #4]
    for (i = 0u; i < CPU_CFG_INT_DIS_MEAS_OVRHD_NBR; i++) {
 800126a:	2300      	movs	r3, #0
 800126c:	817b      	strh	r3, [r7, #10]
 800126e:	e00e      	b.n	800128e <CPU_IntDisMeasInit+0x62>
        CPU_IntDisMeasMaxCur_cnts = 0u;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <CPU_IntDisMeasInit+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
        CPU_IntDisMeasStart();                                  /* Perform multiple consecutive start/stop time meas's  */
 8001276:	f7ff ff71 	bl	800115c <CPU_IntDisMeasStart>
        CPU_IntDisMeasStop();
 800127a:	f7ff ff8f 	bl	800119c <CPU_IntDisMeasStop>
        time_meas_tot_cnts += CPU_IntDisMeasMaxCur_cnts;        /* ...       & sum time meas max's                  ... */
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <CPU_IntDisMeasInit+0x98>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	4413      	add	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
    for (i = 0u; i < CPU_CFG_INT_DIS_MEAS_OVRHD_NBR; i++) {
 8001288:	897b      	ldrh	r3, [r7, #10]
 800128a:	3301      	adds	r3, #1
 800128c:	817b      	strh	r3, [r7, #10]
 800128e:	897b      	ldrh	r3, [r7, #10]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ed      	beq.n	8001270 <CPU_IntDisMeasInit+0x44>
    }
                                                                /* ... to calc avg time meas ovrhd (see Note #3a).      */
    CPU_IntDisMeasOvrhd_cnts  = (time_meas_tot_cnts + (CPU_CFG_INT_DIS_MEAS_OVRHD_NBR / 2u))
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <CPU_IntDisMeasInit+0xa0>)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6013      	str	r3, [r2, #0]
                                                    /  CPU_CFG_INT_DIS_MEAS_OVRHD_NBR;
    CPU_IntDisMeasMaxCur_cnts =  0u;                            /* Reset max ints dis'd times.                          */
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <CPU_IntDisMeasInit+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
    CPU_IntDisMeasMax_cnts    =  0u;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <CPU_IntDisMeasInit+0x9c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
    CPU_INT_EN();
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7fe ff7a 	bl	80001a0 <CPU_SR_Restore>
}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000410 	.word	0x20000410
 80012b8:	20000404 	.word	0x20000404
 80012bc:	20000400 	.word	0x20000400
 80012c0:	20000408 	.word	0x20000408
 80012c4:	2000040c 	.word	0x2000040c
 80012c8:	200003f8 	.word	0x200003f8
 80012cc:	20000414 	.word	0x20000414

080012d0 <CPU_IntDisMeasMaxCalc>:
*********************************************************************************************************
*/

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
static  CPU_TS_TMR  CPU_IntDisMeasMaxCalc (CPU_TS_TMR  time_tot_cnts)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    CPU_TS_TMR  time_max_cnts;


    time_max_cnts = time_tot_cnts;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	60fb      	str	r3, [r7, #12]
    if (time_max_cnts >  CPU_IntDisMeasOvrhd_cnts) {            /* If       max ints dis'd time >  ovrhd time, ...      */
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <CPU_IntDisMeasMaxCalc+0x34>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d905      	bls.n	80012f2 <CPU_IntDisMeasMaxCalc+0x22>
        time_max_cnts -= CPU_IntDisMeasOvrhd_cnts;              /* ... adj  max ints dis'd time by ovrhd time; ...      */
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <CPU_IntDisMeasMaxCalc+0x34>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	e001      	b.n	80012f6 <CPU_IntDisMeasMaxCalc+0x26>
    } else {                                                    /* ... else max ints dis'd time <  ovrhd time, ...      */
        time_max_cnts  = 0u;                                    /* ... clr  max ints dis'd time (see Note #2).          */
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
    }

    return (time_max_cnts);
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000414 	.word	0x20000414

08001308 <Mem_Init>:
*                   (b) BEFORE product's application calls any memory library module function(s)
*********************************************************************************************************
*/

void  Mem_Init (void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
#if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
    MEM_POOL  *pmem_pool;

                                                                        /* --------- INIT MEM HEAP SEG / POOL --------- */
    pmem_pool                   = (MEM_POOL   *)&Mem_PoolHeap;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <Mem_Init+0x80>)
 8001310:	607b      	str	r3, [r7, #4]
    pmem_pool->Type             = (LIB_MEM_TYPE) LIB_MEM_TYPE_HEAP;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <Mem_Init+0x84>)
 8001316:	601a      	str	r2, [r3, #0]
    pmem_pool->SegHeadPtr       = (MEM_POOL   *)&Mem_PoolHeap;          /* Heap seg head = heap seg.                    */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <Mem_Init+0x80>)
 800131c:	605a      	str	r2, [r3, #4]
    pmem_pool->SegPrevPtr       = (MEM_POOL   *) 0;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
    pmem_pool->SegNextPtr       = (MEM_POOL   *) 0;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
    pmem_pool->PoolPrevPtr      = (MEM_POOL   *) 0;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
    pmem_pool->PoolNextPtr      = (MEM_POOL   *) 0;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
    pmem_pool->PoolAddrStart    = (void       *) 0;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
    pmem_pool->PoolAddrEnd      = (void       *) 0;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
    pmem_pool->PoolPtrs         = (void      **) 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
    pmem_pool->BlkSize          = (CPU_SIZE_T  ) 0u;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
    pmem_pool->BlkNbr           = (CPU_SIZE_T  ) 0u;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
    pmem_pool->BlkIx            = (MEM_POOL_IX ) 0u;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
    pmem_pool->SegAddr          = (void       *) LIB_MEM_CFG_HEAP_BASE_ADDR;
    pmem_pool->SegAddrNextAvail = (void       *) LIB_MEM_CFG_HEAP_BASE_ADDR;
#else
    pmem_pool->SegAddr          = (void       *)&Mem_Heap[0];
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <Mem_Init+0x88>)
 800135e:	639a      	str	r2, [r3, #56]	; 0x38
    pmem_pool->SegAddrNextAvail = (void       *)&Mem_Heap[0];
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <Mem_Init+0x88>)
 8001364:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

    pmem_pool->SegSizeTot       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f44f 42d8 	mov.w	r2, #27648	; 0x6c00
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
    pmem_pool->SegSizeRem       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f44f 42d8 	mov.w	r2, #27648	; 0x6c00
 8001374:	645a      	str	r2, [r3, #68]	; 0x44

                                                                        /* ------------ INIT MEM POOL TBL ------------- */
    Mem_PoolTbl = &Mem_PoolHeap;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <Mem_Init+0x8c>)
 8001378:	4a03      	ldr	r2, [pc, #12]	; (8001388 <Mem_Init+0x80>)
 800137a:	601a      	str	r2, [r3, #0]
#endif
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000428 	.word	0x20000428
 800138c:	50414548 	.word	0x50414548
 8001390:	20000470 	.word	0x20000470
 8001394:	20007070 	.word	0x20007070

08001398 <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
    Mem_Set(pmem,
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	2100      	movs	r1, #0
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f804 	bl	80013b4 <Mem_Set>
            0u,                                                 /* See Note #2.                                         */
            size);
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b08b      	sub	sp, #44	; 0x2c
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	460b      	mov	r3, r1
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	72fb      	strb	r3, [r7, #11]
    CPU_DATA     mem_align_mod;
    CPU_DATA     i;


#if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
    if (size < 1) {                                             /* See Note #1.                                         */
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d051      	beq.n	800146c <Mem_Set+0xb8>
        return;
    }
    if (pmem == (void *)0) {
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d050      	beq.n	8001470 <Mem_Set+0xbc>
        return;
    }
#endif


    data_align = 0u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e009      	b.n	80013ec <Mem_Set+0x38>
        data_align <<=  DEF_OCTET_NBR_BITS;
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	623b      	str	r3, [r7, #32]
        data_align  |= (CPU_ALIGN)data_val;
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	6a3a      	ldr	r2, [r7, #32]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d9f2      	bls.n	80013d8 <Mem_Set+0x24>
    }

    size_rem      =  size;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	613b      	str	r3, [r7, #16]

    pmem_08 = (CPU_INT08U *)pmem;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	61bb      	str	r3, [r7, #24]
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d013      	beq.n	8001432 <Mem_Set+0x7e>
        i = mem_align_mod;
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 800140e:	e00a      	b.n	8001426 <Mem_Set+0x72>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	61ba      	str	r2, [r7, #24]
 8001416:	7afa      	ldrb	r2, [r7, #11]
 8001418:	701a      	strb	r2, [r3, #0]
            size_rem -= sizeof(CPU_INT08U);
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	3b01      	subs	r3, #1
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <Mem_Set+0x7e>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d9ee      	bls.n	8001410 <Mem_Set+0x5c>
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	61fb      	str	r3, [r7, #28]
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8001436:	e007      	b.n	8001448 <Mem_Set+0x94>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	1d1a      	adds	r2, r3, #4
 800143c:	61fa      	str	r2, [r7, #28]
 800143e:	6a3a      	ldr	r2, [r7, #32]
 8001440:	601a      	str	r2, [r3, #0]
        size_rem    -= sizeof(CPU_ALIGN);
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	3b04      	subs	r3, #4
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	2b03      	cmp	r3, #3
 800144c:	d8f4      	bhi.n	8001438 <Mem_Set+0x84>
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	61bb      	str	r3, [r7, #24]
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8001452:	e007      	b.n	8001464 <Mem_Set+0xb0>
       *pmem_08++   = data_val;
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	61ba      	str	r2, [r7, #24]
 800145a:	7afa      	ldrb	r2, [r7, #11]
 800145c:	701a      	strb	r2, [r3, #0]
        size_rem   -= sizeof(CPU_INT08U);
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	3b01      	subs	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f4      	bne.n	8001454 <Mem_Set+0xa0>
 800146a:	e002      	b.n	8001472 <Mem_Set+0xbe>
        return;
 800146c:	bf00      	nop
 800146e:	e000      	b.n	8001472 <Mem_Set+0xbe>
        return;
 8001470:	bf00      	nop
    }
}
 8001472:	372c      	adds	r7, #44	; 0x2c
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
	...

0800147c <OSIdleTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSIdleTaskHook (void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <OSIdleTaskHook+0x18>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <OSIdleTaskHook+0x12>
        (*OS_AppIdleTaskHookPtr)();
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <OSIdleTaskHook+0x18>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4798      	blx	r3
    }
#endif
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20008a30 	.word	0x20008a30

08001498 <OSInitHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSInitHook (void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
    CPU_STK_SIZE   i;
    CPU_STK       *p_stk;


    p_stk = OSCfg_ISRStkBasePtr;                            /* Clear the ISR stack                                    */
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <OSInitHook+0x4c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	603b      	str	r3, [r7, #0]
    for (i = 0u; i < OSCfg_ISRStkSize; i++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	e007      	b.n	80014ba <OSInitHook+0x22>
        *p_stk++ = (CPU_STK)0u;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	1d1a      	adds	r2, r3, #4
 80014ae:	603a      	str	r2, [r7, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    for (i = 0u; i < OSCfg_ISRStkSize; i++) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3301      	adds	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <OSInitHook+0x50>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d3f2      	bcc.n	80014aa <OSInitHook+0x12>
    }
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize - 1u);
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <OSInitHook+0x4c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <OSInitHook+0x50>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014d0:	3b01      	subs	r3, #1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <OSInitHook+0x54>)
 80014d8:	6013      	str	r3, [r2, #0]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	080064bc 	.word	0x080064bc
 80014e8:	080064c0 	.word	0x080064c0
 80014ec:	20007074 	.word	0x20007074

080014f0 <OSStatTaskHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSStatTaskHook (void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <OSStatTaskHook+0x18>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <OSStatTaskHook+0x12>
        (*OS_AppStatTaskHookPtr)();
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <OSStatTaskHook+0x18>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4798      	blx	r3
    }
#endif
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20008a50 	.word	0x20008a50

0800150c <OSTaskCreateHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <OSTaskCreateHook+0x20>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <OSTaskCreateHook+0x18>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <OSTaskCreateHook+0x20>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200086ac 	.word	0x200086ac

08001530 <OSTaskDelHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskDelHook (OS_TCB  *p_tcb)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskDelHookPtr != (OS_APP_HOOK_TCB)0) {
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <OSTaskDelHook+0x20>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <OSTaskDelHook+0x18>
        (*OS_AppTaskDelHookPtr)(p_tcb);
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <OSTaskDelHook+0x20>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200087a4 	.word	0x200087a4

08001554 <OSTaskReturnHook>:
* Note(s)    : None.
*********************************************************************************************************
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <OSTaskReturnHook+0x20>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <OSTaskReturnHook+0x18>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <OSTaskReturnHook+0x20>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20008510 	.word	0x20008510

08001578 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
    CPU_STK  *p_stk;


    (void)opt;                                              /* Prevent compiler warning                               */

    p_stk = &p_stk_base[stk_size];                          /* Load stack pointer                                     */
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	617b      	str	r3, [r7, #20]
                                                            /* Registers stacked as if auto-saved on exception        */
    *--p_stk = (CPU_STK)0x01000000u;                        /* xPSR                                                   */
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3b04      	subs	r3, #4
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800159c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_task;                             /* Entry Point                                            */
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3b04      	subs	r3, #4
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)OS_TaskReturn;                      /* R14 (LR)                                               */
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3b04      	subs	r3, #4
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	4a30      	ldr	r2, [pc, #192]	; (8001674 <OSTaskStkInit+0xfc>)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x12121212u;                        /* R12                                                    */
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3b04      	subs	r3, #4
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80015c2:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x03030303u;                        /* R3                                                     */
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3b04      	subs	r3, #4
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80015d0:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x02020202u;                        /* R2                                                     */
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3b04      	subs	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80015de:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_stk_limit;                        /* R1                                                     */
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3b04      	subs	r3, #4
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)p_arg;                              /* R0 : argument                                          */
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3b04      	subs	r3, #4
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	601a      	str	r2, [r3, #0]
                                                            /* Remaining registers saved on process stack             */
    *--p_stk = (CPU_STK)0x11111111u;                        /* R11                                                    */
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3b04      	subs	r3, #4
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8001604:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x10101010u;                        /* R10                                                    */
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3b04      	subs	r3, #4
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8001612:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x09090909u;                        /* R9                                                     */
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3b04      	subs	r3, #4
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8001620:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x08080808u;                        /* R8                                                     */
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3b04      	subs	r3, #4
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800162e:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x07070707u;                        /* R7                                                     */
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3b04      	subs	r3, #4
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800163c:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x06060606u;                        /* R6                                                     */
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3b04      	subs	r3, #4
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800164a:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x05050505u;                        /* R5                                                     */
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3b04      	subs	r3, #4
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8001658:	601a      	str	r2, [r3, #0]
    *--p_stk = (CPU_STK)0x04040404u;                        /* R4                                                     */
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3b04      	subs	r3, #4
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8001666:	601a      	str	r2, [r3, #0]

    return (p_stk);
 8001668:	697b      	ldr	r3, [r7, #20]
}
 800166a:	4618      	mov	r0, r3
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	08004fe9 	.word	0x08004fe9

08001678 <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
#endif



#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 800167e:	4b28      	ldr	r3, [pc, #160]	; (8001720 <OSTaskSwHook+0xa8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <OSTaskSwHook+0x14>
        (*OS_AppTaskSwHookPtr)();
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <OSTaskSwHook+0xa8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4798      	blx	r3
    }
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 800168c:	f7ff fa58 	bl	8000b40 <CPU_TS_TmrRd>
 8001690:	6078      	str	r0, [r7, #4]
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <OSTaskSwHook+0xac>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <OSTaskSwHook+0xb0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d016      	beq.n	80016cc <OSTaskSwHook+0x54>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <OSTaskSwHook+0xac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a20      	ldr	r2, [pc, #128]	; (8001724 <OSTaskSwHook+0xac>)
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	1a8a      	subs	r2, r1, r2
 80016ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <OSTaskSwHook+0xac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <OSTaskSwHook+0xac>)
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 80016be:	4a19      	ldr	r2, [pc, #100]	; (8001724 <OSTaskSwHook+0xac>)
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80016c6:	440a      	add	r2, r1
 80016c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <OSTaskSwHook+0xb0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

#ifdef  CPU_CFG_INT_DIS_MEAS_EN
    int_dis_time = CPU_IntDisMeasMaxCurReset();             /* Keep track of per-task interrupt disable time          */
 80016d6:	f7ff fcf5 	bl	80010c4 <CPU_IntDisMeasMaxCurReset>
 80016da:	6038      	str	r0, [r7, #0]
    if (OSTCBCurPtr->IntDisTimeMax < int_dis_time) {
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <OSTaskSwHook+0xac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d204      	bcs.n	80016f4 <OSTaskSwHook+0x7c>
        OSTCBCurPtr->IntDisTimeMax = int_dis_time;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <OSTaskSwHook+0xac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    }
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
                                                            /* Keep track of per-task scheduler lock time             */
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <OSTaskSwHook+0xac>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <OSTaskSwHook+0xb4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d205      	bcs.n	8001710 <OSTaskSwHook+0x98>
        OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <OSTaskSwHook+0xac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a08      	ldr	r2, [pc, #32]	; (800172c <OSTaskSwHook+0xb4>)
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    }
    OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <OSTaskSwHook+0xb4>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
#endif
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20008a3c 	.word	0x20008a3c
 8001724:	20008788 	.word	0x20008788
 8001728:	20008794 	.word	0x20008794
 800172c:	20008798 	.word	0x20008798

08001730 <OSTimeTickHook>:
* Note(s)    : 1) This function is assumed to be called from the Tick ISR.
*********************************************************************************************************
*/

void  OSTimeTickHook (void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <OSTimeTickHook+0x18>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <OSTimeTickHook+0x12>
        (*OS_AppTimeTickHookPtr)();
 800173c:	4b02      	ldr	r3, [pc, #8]	; (8001748 <OSTimeTickHook+0x18>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4798      	blx	r3
    }
#endif
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200087a8 	.word	0x200087a8

0800174c <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M3 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8001756:	f7fe fd1f 	bl	8000198 <CPU_SR_Save>
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	f7ff fcfe 	bl	800115c <CPU_IntDisMeasStart>
    OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <OS_CPU_SysTickHandler+0x3c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <OS_CPU_SysTickHandler+0x3c>)
 800176a:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 800176c:	f7ff fd16 	bl	800119c <CPU_IntDisMeasStop>
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7fe fd15 	bl	80001a0 <CPU_SR_Restore>

    OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
 8001776:	f004 fb95 	bl	8005ea4 <OSTimeTick>

    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
 800177a:	f000 f961 	bl	8001a40 <OSIntExit>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200087b4 	.word	0x200087b4

0800178c <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (CPU_INT32U  cnts)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
    CPU_INT32U  prio;


    CPU_REG_NVIC_ST_RELOAD = cnts - 1u;
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <OS_CPU_SysTickInit+0x48>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3b01      	subs	r3, #1
 800179a:	6013      	str	r3, [r2, #0]

                                                            /* Set SysTick handler prio.                              */
    prio  = CPU_REG_NVIC_SHPRI3;
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <OS_CPU_SysTickInit+0x4c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
    prio &= DEF_BIT_FIELD(24, 0);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80017a8:	60fb      	str	r3, [r7, #12]
    prio |= DEF_BIT_MASK(OS_CPU_CFG_SYSTICK_PRIO, 24);

    CPU_REG_NVIC_SHPRI3 = prio;
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <OS_CPU_SysTickInit+0x4c>)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6013      	str	r3, [r2, #0]

                                                            /* Enable timer.                                          */
    CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_CLKSOURCE |
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <OS_CPU_SysTickInit+0x50>)
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <OS_CPU_SysTickInit+0x50>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f043 0305 	orr.w	r3, r3, #5
 80017ba:	6013      	str	r3, [r2, #0]
                            CPU_REG_NVIC_ST_CTRL_ENABLE;
                                                            /* Enable timer interrupt.                                */
    CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_TICKINT;
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <OS_CPU_SysTickInit+0x50>)
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <OS_CPU_SysTickInit+0x50>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e014 	.word	0xe000e014
 80017d8:	e000ed20 	.word	0xe000ed20
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <OSCfg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OSCfg_Init (void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
    (void)&OSCfg_TmrTaskStkSize;
    (void)&OSCfg_TmrTaskStkSizeRAM;
    (void)&OSCfg_TmrWheelSize;
    (void)&OSCfg_TmrWheelSizeRAM;
#endif
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <OSInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSInit (OS_ERR  *p_err)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSInitHook();                                           /* Call port specific initialization code                 */
 80017f4:	f7ff fe50 	bl	8001498 <OSInitHook>

    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 80017f8:	4b6a      	ldr	r3, [pc, #424]	; (80019a4 <OSInit+0x1b8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]

    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 80017fe:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <OSInit+0x1bc>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]

    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 8001804:	4b69      	ldr	r3, [pc, #420]	; (80019ac <OSInit+0x1c0>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]

    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 800180a:	4b69      	ldr	r3, [pc, #420]	; (80019b0 <OSInit+0x1c4>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <OSInit+0x1c8>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]

    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 8001816:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <OSInit+0x1cc>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy                   = (OS_PRIO)0;
 800181c:	4b67      	ldr	r3, [pc, #412]	; (80019bc <OSInit+0x1d0>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
    OSPrioSaved                     = (OS_PRIO)0;
 8001822:	4b67      	ldr	r3, [pc, #412]	; (80019c0 <OSInit+0x1d4>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeBegin            = (CPU_TS)0;
 8001828:	4b66      	ldr	r3, [pc, #408]	; (80019c4 <OSInit+0x1d8>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMax              = (CPU_TS)0;
 800182e:	4b66      	ldr	r3, [pc, #408]	; (80019c8 <OSInit+0x1dc>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
    OSSchedLockTimeMaxCur           = (CPU_TS)0;
 8001834:	4b65      	ldr	r3, [pc, #404]	; (80019cc <OSInit+0x1e0>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag       =  DEF_FALSE;
#endif

#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OSSchedRoundRobinEn             = DEF_FALSE;
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <OSInit+0x1e4>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
 8001840:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <OSInit+0x1e8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a64      	ldr	r2, [pc, #400]	; (80019d8 <OSInit+0x1ec>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	4a63      	ldr	r2, [pc, #396]	; (80019dc <OSInit+0x1f0>)
 800184e:	6013      	str	r3, [r2, #0]
#endif

    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 8001850:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <OSInit+0x1f4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d015      	beq.n	8001884 <OSInit+0x98>
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
 8001858:	4b62      	ldr	r3, [pc, #392]	; (80019e4 <OSInit+0x1f8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
        if (p_stk != (CPU_STK *)0) {
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00f      	beq.n	8001884 <OSInit+0x98>
            size  = OSCfg_ISRStkSize;
 8001864:	4b5e      	ldr	r3, [pc, #376]	; (80019e0 <OSInit+0x1f4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60bb      	str	r3, [r7, #8]
            while (size > (CPU_STK_SIZE)0) {
 800186a:	e008      	b.n	800187e <OSInit+0x92>
                size--;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	3b01      	subs	r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
               *p_stk = (CPU_STK)0;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
                p_stk++;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3304      	adds	r3, #4
 800187c:	60fb      	str	r3, [r7, #12]
            while (size > (CPU_STK_SIZE)0) {
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f3      	bne.n	800186c <OSInit+0x80>
            }
        }
    }

#if OS_CFG_APP_HOOKS_EN > 0u
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
 8001884:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <OSInit+0x1fc>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 800188a:	4b58      	ldr	r3, [pc, #352]	; (80019ec <OSInit+0x200>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 8001890:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <OSInit+0x204>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8001896:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <OSInit+0x208>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 800189c:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <OSInit+0x20c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 80018a2:	4b56      	ldr	r3, [pc, #344]	; (80019fc <OSInit+0x210>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 80018a8:	4b55      	ldr	r3, [pc, #340]	; (8001a00 <OSInit+0x214>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID    = (OS_REG_ID)0;
 80018ae:	4b55      	ldr	r3, [pc, #340]	; (8001a04 <OSInit+0x218>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
#endif

    OS_PrioInit();                                          /* Initialize the priority bitmap table                   */
 80018b4:	f001 fe4c 	bl	8003550 <OS_PrioInit>

    OS_RdyListInit();                                       /* Initialize the Ready List                              */
 80018b8:	f000 fd24 	bl	8002304 <OS_RdyListInit>

    
#if OS_CFG_FLAG_EN > 0u                                     /* Initialize the Event Flag module                       */
    OS_FlagInit(p_err);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f001 f8c1 	bl	8002a44 <OS_FlagInit>
    if (*p_err != OS_ERR_NONE) {
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d151      	bne.n	800196e <OSInit+0x182>
    }
#endif


#if OS_CFG_MEM_EN > 0u                                      /* Initialize the Memory Manager module                   */
    OS_MemInit(p_err);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f001 fcd2 	bl	8003274 <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d14c      	bne.n	8001972 <OSInit+0x186>
    }
#endif


#if (OS_MSG_EN) > 0u                                        /* Initialize the free list of OS_MSGs                    */
    OS_MsgPoolInit(p_err);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f001 fce1 	bl	80032a0 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d147      	bne.n	8001976 <OSInit+0x18a>
    }
#endif


#if OS_CFG_MUTEX_EN > 0u                                    /* Initialize the Mutex Manager module                    */
    OS_MutexInit(p_err);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f001 fe1c 	bl	8003524 <OS_MutexInit>
    if (*p_err != OS_ERR_NONE) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d142      	bne.n	800197a <OSInit+0x18e>
    }
#endif


#if OS_CFG_Q_EN > 0u
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f001 feb5 	bl	8003664 <OS_QInit>
    if (*p_err != OS_ERR_NONE) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d13d      	bne.n	800197e <OSInit+0x192>
    }
#endif


#if OS_CFG_SEM_EN > 0u                                      /* Initialize the Semaphore Manager module                */
    OS_SemInit(p_err);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f001 ff7a 	bl	80037fc <OS_SemInit>
    if (*p_err != OS_ERR_NONE) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d138      	bne.n	8001982 <OSInit+0x196>
        return;
    }
#endif


    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f003 f89f 	bl	8004a54 <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d133      	bne.n	8001986 <OSInit+0x19a>
        return;
    }


#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    OS_IntQTaskInit(p_err);                                 /* Initialize the Interrupt Queue Handler Task            */
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f001 fbf6 	bl	8003110 <OS_IntQTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d12e      	bne.n	800198a <OSInit+0x19e>
        return;
    }
#endif

    
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 fa3f 	bl	8001db0 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d129      	bne.n	800198e <OSInit+0x1a2>
        return;
    }


    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f003 fdb8 	bl	80054b0 <OS_TickTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d124      	bne.n	8001992 <OSInit+0x1a6>
        return;
    }


#if OS_CFG_STAT_TASK_EN > 0u                                /* Initialize the Statistic Task                          */
    OS_StatTaskInit(p_err);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f002 fb31 	bl	8003fb0 <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d11f      	bne.n	8001996 <OSInit+0x1aa>
    }
#endif


#if OS_CFG_TMR_EN > 0u                                      /* Initialize the Timer Manager module                    */
    OS_TmrInit(p_err);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f004 facc 	bl	8005ef4 <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11a      	bne.n	800199a <OSInit+0x1ae>
    }
#endif


#if OS_CFG_DBG_EN > 0u
    OS_Dbg_Init();
 8001964:	f000 ff4a 	bl	80027fc <OS_Dbg_Init>
#endif


    OSCfg_Init();
 8001968:	f7ff ff3a 	bl	80017e0 <OSCfg_Init>
 800196c:	e016      	b.n	800199c <OSInit+0x1b0>
        return;
 800196e:	bf00      	nop
 8001970:	e014      	b.n	800199c <OSInit+0x1b0>
        return;
 8001972:	bf00      	nop
 8001974:	e012      	b.n	800199c <OSInit+0x1b0>
        return;
 8001976:	bf00      	nop
 8001978:	e010      	b.n	800199c <OSInit+0x1b0>
        return;
 800197a:	bf00      	nop
 800197c:	e00e      	b.n	800199c <OSInit+0x1b0>
        return;
 800197e:	bf00      	nop
 8001980:	e00c      	b.n	800199c <OSInit+0x1b0>
        return;
 8001982:	bf00      	nop
 8001984:	e00a      	b.n	800199c <OSInit+0x1b0>
        return;
 8001986:	bf00      	nop
 8001988:	e008      	b.n	800199c <OSInit+0x1b0>
        return;
 800198a:	bf00      	nop
 800198c:	e006      	b.n	800199c <OSInit+0x1b0>
        return;
 800198e:	bf00      	nop
 8001990:	e004      	b.n	800199c <OSInit+0x1b0>
        return;
 8001992:	bf00      	nop
 8001994:	e002      	b.n	800199c <OSInit+0x1b0>
        return;
 8001996:	bf00      	nop
 8001998:	e000      	b.n	800199c <OSInit+0x1b0>
        return;
 800199a:	bf00      	nop
}
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200087b4 	.word	0x200087b4
 80019a8:	2000851d 	.word	0x2000851d
 80019ac:	2000850c 	.word	0x2000850c
 80019b0:	20008788 	.word	0x20008788
 80019b4:	20008794 	.word	0x20008794
 80019b8:	200086b0 	.word	0x200086b0
 80019bc:	200086a4 	.word	0x200086a4
 80019c0:	20008792 	.word	0x20008792
 80019c4:	20008784 	.word	0x20008784
 80019c8:	20008a5c 	.word	0x20008a5c
 80019cc:	20008798 	.word	0x20008798
 80019d0:	20008b3c 	.word	0x20008b3c
 80019d4:	080064e4 	.word	0x080064e4
 80019d8:	cccccccd 	.word	0xcccccccd
 80019dc:	20008a2c 	.word	0x20008a2c
 80019e0:	080064c0 	.word	0x080064c0
 80019e4:	080064bc 	.word	0x080064bc
 80019e8:	200086ac 	.word	0x200086ac
 80019ec:	200087a4 	.word	0x200087a4
 80019f0:	20008510 	.word	0x20008510
 80019f4:	20008a30 	.word	0x20008a30
 80019f8:	20008a50 	.word	0x20008a50
 80019fc:	20008a3c 	.word	0x20008a3c
 8001a00:	200087a8 	.word	0x200087a8
 8001a04:	2000851c 	.word	0x2000851c

08001a08 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 250 levels deep.
************************************************************************************************************************
*/

void  OSIntEnter (void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <OSIntEnter+0x30>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d10a      	bne.n	8001a2a <OSIntEnter+0x22>
        return;                                             /* No                                                     */
    }

    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <OSIntEnter+0x34>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2bf9      	cmp	r3, #249	; 0xf9
 8001a1a:	d808      	bhi.n	8001a2e <OSIntEnter+0x26>
        return;                                             /* Yes                                                    */
    }

    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <OSIntEnter+0x34>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <OSIntEnter+0x34>)
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e002      	b.n	8001a30 <OSIntEnter+0x28>
        return;                                             /* No                                                     */
 8001a2a:	bf00      	nop
 8001a2c:	e000      	b.n	8001a30 <OSIntEnter+0x28>
        return;                                             /* Yes                                                    */
 8001a2e:	bf00      	nop
}
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	2000851d 	.word	0x2000851d
 8001a3c:	200087b4 	.word	0x200087b4

08001a40 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSIntExit (void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]



    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
 8001a4a:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <OSIntExit+0xbc>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d150      	bne.n	8001af4 <OSIntExit+0xb4>
        return;                                             /* No                                                     */
    }

    CPU_INT_DIS();
 8001a52:	f7fe fba1 	bl	8000198 <CPU_SR_Save>
 8001a56:	6078      	str	r0, [r7, #4]
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <OSIntExit+0xc0>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d103      	bne.n	8001a68 <OSIntExit+0x28>
        CPU_INT_EN();
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7fe fb9d 	bl	80001a0 <CPU_SR_Restore>
        return;
 8001a66:	e046      	b.n	8001af6 <OSIntExit+0xb6>
    }
    OSIntNestingCtr--;
 8001a68:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <OSIntExit+0xc0>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <OSIntExit+0xc0>)
 8001a72:	701a      	strb	r2, [r3, #0]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <OSIntExit+0xc0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <OSIntExit+0x44>
        CPU_INT_EN();                                       /* Yes                                                    */
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7fe fb8f 	bl	80001a0 <CPU_SR_Restore>
        return;
 8001a82:	e038      	b.n	8001af6 <OSIntExit+0xb6>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler still locked?                                */
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <OSIntExit+0xc4>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <OSIntExit+0x54>
        CPU_INT_EN();                                       /* Yes                                                    */
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7fe fb87 	bl	80001a0 <CPU_SR_Restore>
        return;
 8001a92:	e030      	b.n	8001af6 <OSIntExit+0xb6>
    }

    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8001a94:	f001 fd74 	bl	8003580 <OS_PrioGetHighest>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <OSIntExit+0xc8>)
 8001a9e:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <OSIntExit+0xc8>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <OSIntExit+0xcc>)
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	440b      	add	r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <OSIntExit+0xd0>)
 8001ab6:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <OSIntExit+0xd0>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <OSIntExit+0xd4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d103      	bne.n	8001acc <OSIntExit+0x8c>
        CPU_INT_EN();                                       /* Yes                                                    */
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7fe fb6b 	bl	80001a0 <CPU_SR_Restore>
        return;
 8001aca:	e014      	b.n	8001af6 <OSIntExit+0xb6>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <OSIntExit+0xd0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001ad4:	3201      	adds	r2, #1
 8001ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <OSIntExit+0xd8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <OSIntExit+0xd8>)
 8001ae2:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <OSIntExit+0xdc>)
 8001ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aea:	601a      	str	r2, [r3, #0]
    CPU_INT_EN();
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7fe fb57 	bl	80001a0 <CPU_SR_Restore>
 8001af2:	e000      	b.n	8001af6 <OSIntExit+0xb6>
        return;                                             /* No                                                     */
 8001af4:	bf00      	nop
}
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000851d 	.word	0x2000851d
 8001b00:	200087b4 	.word	0x200087b4
 8001b04:	2000850c 	.word	0x2000850c
 8001b08:	200086a4 	.word	0x200086a4
 8001b0c:	20008520 	.word	0x20008520
 8001b10:	20008794 	.word	0x20008794
 8001b14:	20008788 	.word	0x20008788
 8001b18:	200087b0 	.word	0x200087b0
 8001b1c:	e000ed04 	.word	0xe000ed04

08001b20 <OSSched>:
* Note(s)    : 1) Rescheduling is prevented when the scheduler is locked (see OSSchedLock())
************************************************************************************************************************
*/

void  OSSched (void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]



    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <OSSched+0x8c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d136      	bne.n	8001ba0 <OSSched+0x80>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <OSSched+0x90>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d134      	bne.n	8001ba4 <OSSched+0x84>
        return;                                             /* Yes                                                    */
    }

    CPU_INT_DIS();
 8001b3a:	f7fe fb2d 	bl	8000198 <CPU_SR_Save>
 8001b3e:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8001b40:	f001 fd1e 	bl	8003580 <OS_PrioGetHighest>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <OSSched+0x94>)
 8001b4a:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <OSSched+0x94>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	4a19      	ldr	r2, [pc, #100]	; (8001bb8 <OSSched+0x98>)
 8001b54:	460b      	mov	r3, r1
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	440b      	add	r3, r1
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a16      	ldr	r2, [pc, #88]	; (8001bbc <OSSched+0x9c>)
 8001b62:	6013      	str	r3, [r2, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <OSSched+0x9c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <OSSched+0xa0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d103      	bne.n	8001b78 <OSSched+0x58>
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7fe fb15 	bl	80001a0 <CPU_SR_Restore>
        return;
 8001b76:	e016      	b.n	8001ba6 <OSSched+0x86>
    }

#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <OSSched+0x9c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001b80:	3201      	adds	r2, #1
 8001b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <OSSched+0xa4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <OSSched+0xa4>)
 8001b8e:	6013      	str	r3, [r2, #0]

#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskSw();
#endif

    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <OSSched+0xa8>)
 8001b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b96:	601a      	str	r2, [r3, #0]
    CPU_INT_EN();
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7fe fb01 	bl	80001a0 <CPU_SR_Restore>
 8001b9e:	e002      	b.n	8001ba6 <OSSched+0x86>
        return;                                             /* Yes ... only schedule when no nested ISRs              */
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <OSSched+0x86>
        return;                                             /* Yes                                                    */
 8001ba4:	bf00      	nop
}
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200087b4 	.word	0x200087b4
 8001bb0:	2000850c 	.word	0x2000850c
 8001bb4:	200086a4 	.word	0x200086a4
 8001bb8:	20008520 	.word	0x20008520
 8001bbc:	20008794 	.word	0x20008794
 8001bc0:	20008788 	.word	0x20008788
 8001bc4:	200087b0 	.word	0x200087b0
 8001bc8:	e000ed04 	.word	0xe000ed04

08001bcc <OSSchedLock>:
*                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedLock (OS_ERR  *p_err)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <OSSchedLock+0x74>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d004      	beq.n	8001bea <OSSchedLock+0x1e>
       *p_err = OS_ERR_SCHED_LOCK_ISR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f646 5262 	movw	r2, #28002	; 0x6d62
 8001be6:	801a      	strh	r2, [r3, #0]
        return;
 8001be8:	e026      	b.n	8001c38 <OSSchedLock+0x6c>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <OSSchedLock+0x78>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d004      	beq.n	8001bfc <OSSchedLock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f645 6289 	movw	r2, #24201	; 0x5e89
 8001bf8:	801a      	strh	r2, [r3, #0]
        return;
 8001bfa:	e01d      	b.n	8001c38 <OSSchedLock+0x6c>
    }

    if (OSSchedLockNestingCtr >= (OS_NESTING_CTR)250u) {    /* Prevent OSSchedLockNestingCtr overflowing              */
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <OSSchedLock+0x7c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2bf9      	cmp	r3, #249	; 0xf9
 8001c02:	d904      	bls.n	8001c0e <OSSchedLock+0x42>
       *p_err = OS_ERR_LOCK_NESTING_OVF;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f245 2209 	movw	r2, #21001	; 0x5209
 8001c0a:	801a      	strh	r2, [r3, #0]
        return;
 8001c0c:	e014      	b.n	8001c38 <OSSchedLock+0x6c>
    }

    CPU_CRITICAL_ENTER();
 8001c0e:	f7fe fac3 	bl	8000198 <CPU_SR_Save>
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	f7ff faa2 	bl	800115c <CPU_IntDisMeasStart>
    OSSchedLockNestingCtr++;                                /* Increment lock nesting level                           */
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <OSSchedLock+0x7c>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <OSSchedLock+0x7c>)
 8001c22:	701a      	strb	r2, [r3, #0]
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStart();
 8001c24:	f000 fd00 	bl	8002628 <OS_SchedLockTimeMeasStart>
#endif
    CPU_CRITICAL_EXIT();
 8001c28:	f7ff fab8 	bl	800119c <CPU_IntDisMeasStop>
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7fe fab7 	bl	80001a0 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	801a      	strh	r2, [r3, #0]
}
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200087b4 	.word	0x200087b4
 8001c44:	2000851d 	.word	0x2000851d
 8001c48:	2000850c 	.word	0x2000850c

08001c4c <OSSchedUnlock>:
*                 OSSchedLock() you MUST have a call to OSSchedUnlock().
************************************************************************************************************************
*/

void  OSSchedUnlock (OS_ERR  *p_err)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <OSSchedUnlock+0x94>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <OSSchedUnlock+0x1e>
       *p_err = OS_ERR_SCHED_UNLOCK_ISR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f646 5265 	movw	r2, #28005	; 0x6d65
 8001c66:	801a      	strh	r2, [r3, #0]
        return;
 8001c68:	e036      	b.n	8001cd8 <OSSchedUnlock+0x8c>
    }
#endif

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <OSSchedUnlock+0x98>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d004      	beq.n	8001c7c <OSSchedUnlock+0x30>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f645 6289 	movw	r2, #24201	; 0x5e89
 8001c78:	801a      	strh	r2, [r3, #0]
        return;
 8001c7a:	e02d      	b.n	8001cd8 <OSSchedUnlock+0x8c>
    }

    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* See if the scheduler is locked                         */
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <OSSchedUnlock+0x9c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d104      	bne.n	8001c8e <OSSchedUnlock+0x42>
       *p_err = OS_ERR_SCHED_NOT_LOCKED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f646 5264 	movw	r2, #28004	; 0x6d64
 8001c8a:	801a      	strh	r2, [r3, #0]
        return;
 8001c8c:	e024      	b.n	8001cd8 <OSSchedUnlock+0x8c>
    }

    CPU_CRITICAL_ENTER();
 8001c8e:	f7fe fa83 	bl	8000198 <CPU_SR_Save>
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	f7ff fa62 	bl	800115c <CPU_IntDisMeasStart>
    OSSchedLockNestingCtr--;                                /* Decrement lock nesting level                           */
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <OSSchedUnlock+0x9c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <OSSchedUnlock+0x9c>)
 8001ca2:	701a      	strb	r2, [r3, #0]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <OSSchedUnlock+0x9c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d009      	beq.n	8001cc0 <OSSchedUnlock+0x74>
        CPU_CRITICAL_EXIT();                                /* Scheduler is still locked                              */
 8001cac:	f7ff fa76 	bl	800119c <CPU_IntDisMeasStop>
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7fe fa75 	bl	80001a0 <CPU_SR_Restore>
       *p_err = OS_ERR_SCHED_LOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f646 5263 	movw	r2, #28003	; 0x6d63
 8001cbc:	801a      	strh	r2, [r3, #0]
        return;
 8001cbe:	e00b      	b.n	8001cd8 <OSSchedUnlock+0x8c>
    }

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OS_SchedLockTimeMeasStop();
 8001cc0:	f000 fcc4 	bl	800264c <OS_SchedLockTimeMeasStop>
#endif

    CPU_CRITICAL_EXIT();                                    /* Scheduler should be re-enabled                         */
 8001cc4:	f7ff fa6a 	bl	800119c <CPU_IntDisMeasStop>
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f7fe fa69 	bl	80001a0 <CPU_SR_Restore>
    OSSched();                                              /* Run the scheduler                                      */
 8001cce:	f7ff ff27 	bl	8001b20 <OSSched>
   *p_err = OS_ERR_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	801a      	strh	r2, [r3, #0]
}
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200087b4 	.word	0x200087b4
 8001ce4:	2000851d 	.word	0x2000851d
 8001ce8:	2000850c 	.word	0x2000850c

08001cec <OSStart>:
*              2) OSStart() is not supposed to return.  If it does, that would be considered a fatal error.
************************************************************************************************************************
*/

void  OSStart (OS_ERR  *p_err)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (OSRunning == OS_STATE_OS_STOPPED) {
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <OSStart+0x68>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d123      	bne.n	8001d44 <OSStart+0x58>
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8001cfc:	f001 fc40 	bl	8003580 <OS_PrioGetHighest>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <OSStart+0x6c>)
 8001d06:	701a      	strb	r2, [r3, #0]
        OSPrioCur       = OSPrioHighRdy;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <OSStart+0x6c>)
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <OSStart+0x70>)
 8001d0e:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <OSStart+0x6c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <OSStart+0x74>)
 8001d18:	460b      	mov	r3, r1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	440b      	add	r3, r1
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <OSStart+0x78>)
 8001d26:	6013      	str	r3, [r2, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <OSStart+0x78>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <OSStart+0x7c>)
 8001d2e:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <OSStart+0x68>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
 8001d36:	f7fe fa45 	bl	80001c4 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f643 2299 	movw	r2, #15001	; 0x3a99
 8001d40:	801a      	strh	r2, [r3, #0]
    } else {
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
    }
}
 8001d42:	e003      	b.n	8001d4c <OSStart+0x60>
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f645 628a 	movw	r2, #24202	; 0x5e8a
 8001d4a:	801a      	strh	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2000851d 	.word	0x2000851d
 8001d58:	200086a4 	.word	0x200086a4
 8001d5c:	200086b0 	.word	0x200086b0
 8001d60:	20008520 	.word	0x20008520
 8001d64:	20008794 	.word	0x20008794
 8001d68:	20008788 	.word	0x20008788

08001d6c <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/

void  OS_IdleTask (void  *p_arg)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]


    p_arg = p_arg;                                          /* Prevent compiler warning for not using 'p_arg'         */

    while (DEF_ON) {
        CPU_CRITICAL_ENTER();
 8001d78:	f7fe fa0e 	bl	8000198 <CPU_SR_Save>
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	f7ff f9ed 	bl	800115c <CPU_IntDisMeasStart>
        OSIdleTaskCtr++;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <OS_IdleTask+0x3c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <OS_IdleTask+0x3c>)
 8001d8a:	6013      	str	r3, [r2, #0]
#if OS_CFG_STAT_TASK_EN > 0u
        OSStatTaskCtr++;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <OS_IdleTask+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a06      	ldr	r2, [pc, #24]	; (8001dac <OS_IdleTask+0x40>)
 8001d94:	6013      	str	r3, [r2, #0]
#endif
        CPU_CRITICAL_EXIT();
 8001d96:	f7ff fa01 	bl	800119c <CPU_IntDisMeasStop>
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f7fe fa00 	bl	80001a0 <CPU_SR_Restore>

        OSIdleTaskHook();                                   /* Call user definable HOOK                               */
 8001da0:	f7ff fb6c 	bl	800147c <OSIdleTaskHook>
        CPU_CRITICAL_ENTER();
 8001da4:	e7e8      	b.n	8001d78 <OS_IdleTask+0xc>
 8001da6:	bf00      	nop
 8001da8:	20008a48 	.word	0x20008a48
 8001dac:	20008518 	.word	0x20008518

08001db0 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	; 0x30
 8001db4:	af0a      	add	r7, sp, #40	; 0x28
 8001db6:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <OS_IdleTaskInit+0x4c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
                                                            /* ---------------- CREATE THE IDLE TASK ---------------- */
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <OS_IdleTaskInit+0x50>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <OS_IdleTaskInit+0x54>)
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	4910      	ldr	r1, [pc, #64]	; (8001e08 <OS_IdleTaskInit+0x58>)
 8001dc8:	6809      	ldr	r1, [r1, #0]
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	9008      	str	r0, [sp, #32]
 8001dce:	200b      	movs	r0, #11
 8001dd0:	9007      	str	r0, [sp, #28]
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	9006      	str	r0, [sp, #24]
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	9005      	str	r0, [sp, #20]
 8001dda:	2000      	movs	r0, #0
 8001ddc:	9004      	str	r0, [sp, #16]
 8001dde:	9103      	str	r1, [sp, #12]
 8001de0:	9202      	str	r2, [sp, #8]
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	231f      	movs	r3, #31
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2300      	movs	r3, #0
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <OS_IdleTaskInit+0x5c>)
 8001dec:	4908      	ldr	r1, [pc, #32]	; (8001e10 <OS_IdleTaskInit+0x60>)
 8001dee:	4809      	ldr	r0, [pc, #36]	; (8001e14 <OS_IdleTaskInit+0x64>)
 8001df0:	f002 f948 	bl	8004084 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20008a48 	.word	0x20008a48
 8001e00:	0800649c 	.word	0x0800649c
 8001e04:	080064a0 	.word	0x080064a0
 8001e08:	080064a4 	.word	0x080064a4
 8001e0c:	08001d6d 	.word	0x08001d6d
 8001e10:	080063ec 	.word	0x080063ec
 8001e14:	20008890 	.word	0x20008890

08001e18 <OS_Pend>:

void  OS_Pend (OS_PEND_DATA  *p_pend_data,
               OS_PEND_OBJ   *p_obj,
               OS_STATE       pending_on,
               OS_TICK        timeout)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	71fb      	strb	r3, [r7, #7]
    OS_PEND_LIST  *p_pend_list;



    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <OS_Pend+0x80>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	79fa      	ldrb	r2, [r7, #7]
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <OS_Pend+0x80>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    OS_TaskBlock(OSTCBCurPtr,                                /* Block the task and add it to the tick list if needed  */
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <OS_Pend+0x80>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6839      	ldr	r1, [r7, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fc9e 	bl	8002784 <OS_TaskBlock>
                 timeout);

    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d011      	beq.n	8001e72 <OS_Pend+0x5a>
        p_pend_list             = &p_obj->PendList;          /* ... if there is an object to pend on                  */
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3308      	adds	r3, #8
 8001e52:	617b      	str	r3, [r7, #20]
        p_pend_data->PendObjPtr = p_obj;                     /* Save the pointer to the object pending on             */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	60da      	str	r2, [r3, #12]
        OS_PendDataInit((OS_TCB       *)OSTCBCurPtr,         /* Initialize the remaining field                        */
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <OS_Pend+0x80>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	68f9      	ldr	r1, [r7, #12]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f81a 	bl	8001e9c <OS_PendDataInit>
                        (OS_PEND_DATA *)p_pend_data,
                        (OS_OBJ_QTY    )1);
        OS_PendListInsertPrio(p_pend_list,                   /* Insert in the pend list in priority order             */
 8001e68:	68f9      	ldr	r1, [r7, #12]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f000 f8ac 	bl	8001fc8 <OS_PendListInsertPrio>
 8001e70:	e007      	b.n	8001e82 <OS_Pend+0x6a>
                              p_pend_data);
    } else {
        OSTCBCurPtr->PendDataTblEntries = (OS_OBJ_QTY    )0; /* If no object being pended on the clear these fields   */
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <OS_Pend+0x80>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	87da      	strh	r2, [r3, #62]	; 0x3e
        OSTCBCurPtr->PendDataTblPtr     = (OS_PEND_DATA *)0; /* ... in the TCB                                        */
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <OS_Pend+0x80>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
    }
#if OS_CFG_DBG_EN > 0u
    OS_PendDbgNameAdd(p_obj,
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <OS_Pend+0x80>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4619      	mov	r1, r3
 8001e88:	68b8      	ldr	r0, [r7, #8]
 8001e8a:	f000 f83b 	bl	8001f04 <OS_PendDbgNameAdd>
                      OSTCBCurPtr);
#endif
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20008788 	.word	0x20008788

08001e9c <OS_PendDataInit>:
*/

void  OS_PendDataInit (OS_TCB        *p_tcb,
                       OS_PEND_DATA  *p_pend_data_tbl,
                       OS_OBJ_QTY     tbl_size)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	80fb      	strh	r3, [r7, #6]
    OS_OBJ_QTY  i;



    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	631a      	str	r2, [r3, #48]	; 0x30

    for (i = 0u; i < tbl_size; i++) {
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	82fb      	strh	r3, [r7, #22]
 8001eba:	e01a      	b.n	8001ef2 <OS_PendDataInit+0x56>
        p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;    /* Initialize all the fields                              */
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	605a      	str	r2, [r3, #4]
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
        p_pend_data_tbl->RdyObjPtr  = (OS_PEND_OBJ  *)0;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	831a      	strh	r2, [r3, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	61da      	str	r2, [r3, #28]
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	609a      	str	r2, [r3, #8]
        p_pend_data_tbl++;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3320      	adds	r3, #32
 8001eea:	60bb      	str	r3, [r7, #8]
    for (i = 0u; i < tbl_size; i++) {
 8001eec:	8afb      	ldrh	r3, [r7, #22]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	82fb      	strh	r3, [r7, #22]
 8001ef2:	8afa      	ldrh	r2, [r7, #22]
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3e0      	bcc.n	8001ebc <OS_PendDataInit+0x20>
    }
}
 8001efa:	bf00      	nop
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <OS_PendDbgNameAdd>:


#if OS_CFG_DBG_EN > 0u
void  OS_PendDbgNameAdd (OS_PEND_OBJ  *p_obj,
                         OS_TCB       *p_tcb)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    if (p_obj != (OS_PEND_OBJ *)0) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d012      	beq.n	8001f3a <OS_PendDbgNameAdd+0x36>
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                /* Task pending on this object ... save name in TCB       */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        p_pend_list       = &p_obj->PendList;               /* Find name of HP task pending on this object ...        */
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3308      	adds	r3, #8
 8001f22:	617b      	str	r3, [r7, #20]
        p_pend_data       =  p_pend_list->HeadPtr;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	613b      	str	r3, [r7, #16]
        p_tcb1            =  p_pend_data->TCBPtr;
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	61da      	str	r2, [r3, #28]
            default:
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
                 break;
        }
    }
}
 8001f38:	e016      	b.n	8001f68 <OS_PendDbgNameAdd+0x64>
        switch (p_tcb->PendOn) {
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d002      	beq.n	8001f4a <OS_PendDbgNameAdd+0x46>
 8001f44:	2b07      	cmp	r3, #7
 8001f46:	d005      	beq.n	8001f54 <OS_PendDbgNameAdd+0x50>
 8001f48:	e009      	b.n	8001f5e <OS_PendDbgNameAdd+0x5a>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <OS_PendDbgNameAdd+0x70>)
 8001f4e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                 break;
 8001f52:	e009      	b.n	8001f68 <OS_PendDbgNameAdd+0x64>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <OS_PendDbgNameAdd+0x74>)
 8001f58:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                 break;
 8001f5c:	e004      	b.n	8001f68 <OS_PendDbgNameAdd+0x64>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <OS_PendDbgNameAdd+0x78>)
 8001f62:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
                 break;
 8001f66:	bf00      	nop
}
 8001f68:	bf00      	nop
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	08006400 	.word	0x08006400
 8001f78:	08006408 	.word	0x08006408
 8001f7c:	08006414 	.word	0x08006414

08001f80 <OS_PendDbgNameRemove>:



void  OS_PendDbgNameRemove (OS_PEND_OBJ  *p_obj,
                            OS_TCB       *p_tcb)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_TCB        *p_tcb1;


    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <OS_PendDbgNameRemove+0x44>)
 8001f8e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    p_pend_list       = &p_obj->PendList;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3308      	adds	r3, #8
 8001f96:	617b      	str	r3, [r7, #20]
    p_pend_data       =  p_pend_list->HeadPtr;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	613b      	str	r3, [r7, #16]
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <OS_PendDbgNameRemove+0x34>
        p_tcb1            = p_pend_data->TCBPtr;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	60fb      	str	r3, [r7, #12]
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a1a      	ldr	r2, [r3, #32]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	61da      	str	r2, [r3, #28]
    } else {
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
    }
}
 8001fb2:	e002      	b.n	8001fba <OS_PendDbgNameRemove+0x3a>
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <OS_PendDbgNameRemove+0x44>)
 8001fb8:	61da      	str	r2, [r3, #28]
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	08006414 	.word	0x08006414

08001fc8 <OS_PendListInsertPrio>:
************************************************************************************************************************
*/

void  OS_PendListInsertPrio (OS_PEND_LIST  *p_pend_list,
                             OS_PEND_DATA  *p_pend_data)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_pend_data_prev;
    OS_PEND_DATA  *p_pend_data_next;



    p_tcb = p_pend_data->TCBPtr;                                      /* Obtain the priority of the task to insert    */
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]
    prio  = p_tcb->Prio;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001fde:	75fb      	strb	r3, [r7, #23]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	891b      	ldrh	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10f      	bne.n	8002008 <OS_PendListInsertPrio+0x40>
        p_pend_list->NbrEntries = (OS_OBJ_QTY)1;                      /*         This is the first entry              */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	811a      	strh	r2, [r3, #8]
        p_pend_data->NextPtr    = (OS_PEND_DATA *)0;                  /*         No other OS_PEND_DATAs in the list   */
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr    = p_pend_data;                        /*                                              */
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr    = p_pend_data;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
                p_pend_data_next->PrevPtr  = p_pend_data;
            }
        }
    }
}
 8002006:	e04d      	b.n	80020a4 <OS_PendListInsertPrio+0xdc>
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	891b      	ldrh	r3, [r3, #8]
 800200c:	3301      	adds	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	811a      	strh	r2, [r3, #8]
        p_pend_data_next = p_pend_list->HeadPtr;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 800201a:	e00b      	b.n	8002034 <OS_PendListInsertPrio+0x6c>
            p_tcb_next   = p_pend_data_next->TCBPtr;
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	613b      	str	r3, [r7, #16]
            if (prio < p_tcb_next->Prio) {
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002028:	7dfa      	ldrb	r2, [r7, #23]
 800202a:	429a      	cmp	r2, r3
 800202c:	d306      	bcc.n	800203c <OS_PendListInsertPrio+0x74>
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61fb      	str	r3, [r7, #28]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <OS_PendListInsertPrio+0x54>
 800203a:	e000      	b.n	800203e <OS_PendListInsertPrio+0x76>
                break;                                                /*         Found! ... insert BEFORE current     */
 800203c:	bf00      	nop
        if (p_pend_data_next == (OS_PEND_DATA *)0) {                  /*         TCB to insert is lower in prio       */
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10f      	bne.n	8002064 <OS_PendListInsertPrio+0x9c>
            p_pend_data->NextPtr      = (OS_PEND_DATA *)0;            /*         ... insert at the tail.              */
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
            p_pend_data_prev          = p_pend_list->TailPtr;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	60fb      	str	r3, [r7, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	601a      	str	r2, [r3, #0]
            p_pend_data_prev->NextPtr = p_pend_data;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	605a      	str	r2, [r3, #4]
            p_pend_list->TailPtr      = p_pend_data;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	605a      	str	r2, [r3, #4]
}
 8002062:	e01f      	b.n	80020a4 <OS_PendListInsertPrio+0xdc>
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10c      	bne.n	8002086 <OS_PendListInsertPrio+0xbe>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	601a      	str	r2, [r3, #0]
                p_pend_data->PrevPtr       = (OS_PEND_DATA *)0;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	605a      	str	r2, [r3, #4]
                p_pend_list->HeadPtr       = p_pend_data;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	e00e      	b.n	80020a4 <OS_PendListInsertPrio+0xdc>
                p_pend_data_prev           = p_pend_data_next->PrevPtr;/*        No,  insert in between two entries   */
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]
                p_pend_data->PrevPtr       = p_pend_data_prev;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	601a      	str	r2, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	605a      	str	r2, [r3, #4]
                p_pend_data_prev->NextPtr  = p_pend_data;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	605a      	str	r2, [r3, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	3724      	adds	r7, #36	; 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <OS_PendListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PendListRemove (OS_TCB  *p_tcb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
    OS_PEND_LIST   *p_pend_list;
    OS_PEND_OBJ    *p_obj;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c0:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {
 80020c2:	e00f      	b.n	80020e4 <OS_PendListRemove+0x36>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60fb      	str	r3, [r7, #12]
        p_pend_list = &p_obj->PendList;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3308      	adds	r3, #8
 80020ce:	60bb      	str	r3, [r7, #8]
        OS_PendListRemove1(p_pend_list,
 80020d0:	6939      	ldr	r1, [r7, #16]
 80020d2:	68b8      	ldr	r0, [r7, #8]
 80020d4:	f000 f813 	bl	80020fe <OS_PendListRemove1>
                           p_pend_data);
        p_pend_data++;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	3320      	adds	r3, #32
 80020dc:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 80020de:	8afb      	ldrh	r3, [r7, #22]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	82fb      	strh	r3, [r7, #22]
    while (n_pend_list > (OS_OBJ_QTY)0) {
 80020e4:	8afb      	ldrh	r3, [r7, #22]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ec      	bne.n	80020c4 <OS_PendListRemove+0x16>
    }
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <OS_PendListRemove1>:
************************************************************************************************************************
*/

void  OS_PendListRemove1 (OS_PEND_LIST  *p_pend_list,
                          OS_PEND_DATA  *p_pend_data)
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
    OS_PEND_DATA  *p_prev;
    OS_PEND_DATA  *p_next;



    if (p_pend_list->NbrEntries == 1u) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	891b      	ldrh	r3, [r3, #8]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d106      	bne.n	800211e <OS_PendListRemove1+0x20>
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	e027      	b.n	800216e <OS_PendListRemove1+0x70>

    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <OS_PendListRemove1+0x3c>
        p_next               = p_pend_data->NextPtr;        /* Yes                                                    */
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	60fb      	str	r3, [r7, #12]
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
        p_pend_list->HeadPtr = p_next;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e019      	b.n	800216e <OS_PendListRemove1+0x70>

    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <OS_PendListRemove1+0x58>
        p_prev               = p_pend_data->PrevPtr;        /* Yes                                                    */
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60bb      	str	r3, [r7, #8]
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2200      	movs	r2, #0
 800214c:	605a      	str	r2, [r3, #4]
        p_pend_list->TailPtr = p_prev;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	e00b      	b.n	800216e <OS_PendListRemove1+0x70>

    } else {
        p_prev               = p_pend_data->PrevPtr;        /* Remove from inside the list                            */
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60bb      	str	r3, [r7, #8]
        p_next               = p_pend_data->NextPtr;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
        p_prev->NextPtr      = p_next;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
        p_next->PrevPtr      = p_prev;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	601a      	str	r2, [r3, #0]
    }
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	891b      	ldrh	r3, [r3, #8]
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	811a      	strh	r2, [r3, #8]
    p_pend_data->NextPtr = (OS_PEND_DATA *)0;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2200      	movs	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <OS_Post>:
void  OS_Post (OS_PEND_OBJ  *p_obj,
               OS_TCB       *p_tcb,
               void         *p_void,
               OS_MSG_SIZE   msg_size,
               CPU_TS        ts)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	807b      	strh	r3, [r7, #2]
    switch (p_tcb->TaskState) {
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80021a4:	2b07      	cmp	r3, #7
 80021a6:	d879      	bhi.n	800229c <OS_Post+0x10c>
 80021a8:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <OS_Post+0x20>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	0800229d 	.word	0x0800229d
 80021b4:	0800229d 	.word	0x0800229d
 80021b8:	080021d1 	.word	0x080021d1
 80021bc:	080021d1 	.word	0x080021d1
 80021c0:	0800229d 	.word	0x0800229d
 80021c4:	0800229d 	.word	0x0800229d
 80021c8:	08002237 	.word	0x08002237
 80021cc:	08002237 	.word	0x08002237
        case OS_TASK_STATE_DLY_SUSPENDED:                        /* Cannot Post a suspended task that was also dly'd  */
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d109      	bne.n	80021ee <OS_Post+0x5e>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f85e 	bl	80022a8 <OS_Post1>
 80021ec:	e009      	b.n	8002202 <OS_Post+0x72>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	65da      	str	r2, [r3, #92]	; 0x5c
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
#endif
                 p_tcb->TS      = ts;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
             }
             if (p_obj != (OS_PEND_OBJ *)0) {
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d006      	beq.n	8002216 <OS_Post+0x86>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 8002208:	68b8      	ldr	r0, [r7, #8]
 800220a:	f7ff ff50 	bl	80020ae <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f7ff feb5 	bl	8001f80 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             OS_TaskRdy(p_tcb);                                  /* Make task ready to run                            */
 8002216:	68b8      	ldr	r0, [r7, #8]
 8002218:	f000 fadb 	bl	80027d2 <OS_TaskRdy>
             p_tcb->TaskState  = OS_TASK_STATE_RDY;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 8002234:	e033      	b.n	800229e <OS_Post+0x10e>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800223c:	2b03      	cmp	r3, #3
 800223e:	d109      	bne.n	8002254 <OS_Post+0xc4>
                 OS_Post1(p_obj,                                 /* Indicate which object was posted to               */
 8002240:	887a      	ldrh	r2, [r7, #2]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	4613      	mov	r3, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f82b 	bl	80022a8 <OS_Post1>
 8002252:	e009      	b.n	8002268 <OS_Post+0xd8>
                          p_void,
                          msg_size,
                          ts);
             } else {
#if (OS_MSG_EN > 0u)
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	887a      	ldrh	r2, [r7, #2]
 800225e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
#endif
                 p_tcb->TS      = ts;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
             }
             OS_TickListRemove(p_tcb);                           /* Cancel any timeout                                */
 8002268:	68b8      	ldr	r0, [r7, #8]
 800226a:	f003 fa9b 	bl	80057a4 <OS_TickListRemove>
             if (p_obj != (OS_PEND_OBJ *)0) {
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <OS_Post+0xf2>
                 OS_PendListRemove(p_tcb);                       /* Remove task from wait list(s)                     */
 8002274:	68b8      	ldr	r0, [r7, #8]
 8002276:	f7ff ff1a 	bl	80020ae <OS_PendListRemove>
#if OS_CFG_DBG_EN > 0u
                 OS_PendDbgNameRemove(p_obj,
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7ff fe7f 	bl	8001f80 <OS_PendDbgNameRemove>
                                      p_tcb);
#endif
             }
             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2204      	movs	r2, #4
 8002286:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
             break;
 800229a:	e000      	b.n	800229e <OS_Post+0x10e>

        default:
             break;
 800229c:	bf00      	nop
    }
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop

080022a8 <OS_Post1>:
void  OS_Post1 (OS_PEND_OBJ  *p_obj,
                OS_TCB       *p_tcb,
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                CPU_TS        ts)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	807b      	strh	r3, [r7, #2]
    OS_OBJ_QTY      n_pend_list;                                    /* Number of pend lists                           */
    OS_PEND_DATA   *p_pend_data;



    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	613b      	str	r3, [r7, #16]
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c0:	82fb      	strh	r3, [r7, #22]

    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 80022c2:	e017      	b.n	80022f4 <OS_Post1+0x4c>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d10c      	bne.n	80022e8 <OS_Post1+0x40>
            p_pend_data->RdyObjPtr  = p_obj;                        /* Yes, indicate the object in the .RdyObjPtr     */
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	611a      	str	r2, [r3, #16]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	615a      	str	r2, [r3, #20]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	887a      	ldrh	r2, [r7, #2]
 80022de:	831a      	strh	r2, [r3, #24]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	6a3a      	ldr	r2, [r7, #32]
 80022e4:	61da      	str	r2, [r3, #28]
            break;
 80022e6:	e008      	b.n	80022fa <OS_Post1+0x52>
        }
        p_pend_data++;
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	3320      	adds	r3, #32
 80022ec:	613b      	str	r3, [r7, #16]
        n_pend_list--;
 80022ee:	8afb      	ldrh	r3, [r7, #22]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	82fb      	strh	r3, [r7, #22]
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 80022f4:	8afb      	ldrh	r3, [r7, #22]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e4      	bne.n	80022c4 <OS_Post1+0x1c>
    }
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <OS_RdyListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInit (void)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
    OS_PRIO       i;
    OS_RDY_LIST  *p_rdy_list;



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 800230a:	2300      	movs	r3, #0
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	e013      	b.n	8002338 <OS_RdyListInit+0x34>
        p_rdy_list = &OSRdyList[i];
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <OS_RdyListInit+0x44>)
 800231c:	4413      	add	r3, r2
 800231e:	603b      	str	r3, [r7, #0]
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	811a      	strh	r2, [r3, #8]
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	605a      	str	r2, [r3, #4]
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	3301      	adds	r3, #1
 8002336:	71fb      	strb	r3, [r7, #7]
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	2b1f      	cmp	r3, #31
 800233c:	d9e8      	bls.n	8002310 <OS_RdyListInit+0xc>
    }
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	20008520 	.word	0x20008520

0800234c <OS_RdyListInsert>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_RdyListInsert (OS_TCB  *p_tcb)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    OS_PrioInsert(p_tcb->Prio);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800235a:	4618      	mov	r0, r3
 800235c:	f001 f934 	bl	80035c8 <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <OS_RdyListInsert+0x38>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d103      	bne.n	8002376 <OS_RdyListInsert+0x2a>
        OS_RdyListInsertTail(p_tcb);                        /* Yes, insert readied task at the end of the list        */
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f84a 	bl	8002408 <OS_RdyListInsertTail>
    } else {
        OS_RdyListInsertHead(p_tcb);                        /* No,  insert readied task at the beginning of the list  */
    }
}
 8002374:	e002      	b.n	800237c <OS_RdyListInsert+0x30>
        OS_RdyListInsertHead(p_tcb);                        /* No,  insert readied task at the beginning of the list  */
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f806 	bl	8002388 <OS_RdyListInsertHead>
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200086b0 	.word	0x200086b0

08002388 <OS_RdyListInsertHead>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertHead (OS_TCB  *p_tcb)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002396:	461a      	mov	r2, r3
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4a18      	ldr	r2, [pc, #96]	; (8002404 <OS_RdyListInsertHead+0x7c>)
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	891b      	ldrh	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10f      	bne.n	80023ce <OS_RdyListInsertHead+0x46>
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         =  (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr    =  p_tcb;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	605a      	str	r2, [r3, #4]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
        p_tcb2->PrevPtr        = p_tcb;
        p_rdy_list->HeadPtr    = p_tcb;
    }
}
 80023cc:	e015      	b.n	80023fa <OS_RdyListInsertHead+0x72>
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	891b      	ldrh	r3, [r3, #8]
 80023d2:	3301      	adds	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
        p_tcb2                 = p_rdy_list->HeadPtr;       /*         Adjust old head of list's links                */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60bb      	str	r3, [r7, #8]
        p_tcb2->PrevPtr        = p_tcb;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	20008520 	.word	0x20008520

08002408 <OS_RdyListInsertTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListInsertTail (OS_TCB  *p_tcb)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
    OS_RDY_LIST  *p_rdy_list;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002416:	461a      	mov	r2, r3
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4a18      	ldr	r2, [pc, #96]	; (8002484 <OS_RdyListInsertTail+0x7c>)
 8002422:	4413      	add	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	891b      	ldrh	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10f      	bne.n	800244e <OS_RdyListInsertTail+0x46>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         No other OS_TCBs in the list                   */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	601a      	str	r2, [r3, #0]
        p_rdy_list->TailPtr     = p_tcb;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	605a      	str	r2, [r3, #4]
        p_tcb2                  = p_rdy_list->TailPtr;
        p_tcb->PrevPtr          = p_tcb2;
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
        p_rdy_list->TailPtr     = p_tcb;
    }
}
 800244c:	e014      	b.n	8002478 <OS_RdyListInsertTail+0x70>
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	891b      	ldrh	r3, [r3, #8]
 8002452:	3301      	adds	r3, #1
 8002454:	b29a      	uxth	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	811a      	strh	r2, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	60da      	str	r2, [r3, #12]
        p_tcb2                  = p_rdy_list->TailPtr;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	60bb      	str	r3, [r7, #8]
        p_tcb->PrevPtr          = p_tcb2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	611a      	str	r2, [r3, #16]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	60da      	str	r2, [r3, #12]
        p_rdy_list->TailPtr     = p_tcb;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	605a      	str	r2, [r3, #4]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20008520 	.word	0x20008520

08002488 <OS_RdyListMoveHeadToTail>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListMoveHeadToTail (OS_RDY_LIST  *p_rdy_list)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb2;
    OS_TCB  *p_tcb3;



    switch (p_rdy_list->NbrEntries) {
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	891b      	ldrh	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db1c      	blt.n	80024d2 <OS_RdyListMoveHeadToTail+0x4a>
 8002498:	2b01      	cmp	r3, #1
 800249a:	dd36      	ble.n	800250a <OS_RdyListMoveHeadToTail+0x82>
 800249c:	2b02      	cmp	r3, #2
 800249e:	d118      	bne.n	80024d2 <OS_RdyListMoveHeadToTail+0x4a>
        case 0:
        case 1:
             break;

        case 2:                                             /* SWAP the TCBs                                          */
             p_tcb1              = p_rdy_list->HeadPtr;     /* Point to current head                                  */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	617b      	str	r3, [r7, #20]
             p_tcb2              = p_rdy_list->TailPtr;     /* Point to current tail                                  */
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	613b      	str	r3, [r7, #16]
             p_tcb1->PrevPtr     = p_tcb2;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	611a      	str	r2, [r3, #16]
             p_tcb1->NextPtr     = (OS_TCB *)0;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2200      	movs	r2, #0
 80024b6:	60da      	str	r2, [r3, #12]
             p_tcb2->PrevPtr     = (OS_TCB *)0;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
             p_tcb2->NextPtr     = p_tcb1;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	60da      	str	r2, [r3, #12]
             p_rdy_list->HeadPtr = p_tcb2;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr = p_tcb1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	605a      	str	r2, [r3, #4]
             break;
 80024d0:	e01c      	b.n	800250c <OS_RdyListMoveHeadToTail+0x84>

        default:                                            /* Move only if there are more than 2 OS_TCBs in the list */
             p_tcb1              = p_rdy_list->HeadPtr;     /* Point to current head                                  */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	617b      	str	r3, [r7, #20]
             p_tcb2              = p_rdy_list->TailPtr;     /* Point to current tail                                  */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
             p_tcb3              = p_tcb1->NextPtr;         /* Point to new list head                                 */
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	60fb      	str	r3, [r7, #12]
             p_tcb3->PrevPtr     = (OS_TCB *)0;             /* Adjust back    link of new list head                   */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
             p_tcb1->NextPtr     = (OS_TCB *)0;             /* Adjust forward link of new list tail                   */
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
             p_tcb1->PrevPtr     = p_tcb2;                  /* Adjust back    link of new list tail                   */
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	611a      	str	r2, [r3, #16]
             p_tcb2->NextPtr     = p_tcb1;                  /* Adjust forward link of old list tail                   */
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	60da      	str	r2, [r3, #12]
             p_rdy_list->HeadPtr = p_tcb3;                  /* Adjust new list head and tail pointers                 */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	601a      	str	r2, [r3, #0]
             p_rdy_list->TailPtr = p_tcb1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	605a      	str	r2, [r3, #4]
             break;
 8002508:	e000      	b.n	800250c <OS_RdyListMoveHeadToTail+0x84>
             break;
 800250a:	bf00      	nop
    }
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <OS_RdyListRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_RdyListRemove (OS_TCB  *p_tcb)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
    OS_TCB       *p_tcb1;
    OS_TCB       *p_tcb2;



    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002526:	461a      	mov	r2, r3
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <OS_RdyListRemove+0xac>)
 8002532:	4413      	add	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	613b      	str	r3, [r7, #16]
    p_tcb2     = p_tcb->NextPtr;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60fb      	str	r3, [r7, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d11f      	bne.n	8002588 <OS_RdyListRemove+0x70>
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <OS_RdyListRemove+0x56>
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2200      	movs	r2, #0
 8002552:	811a      	strh	r2, [r3, #8]
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
            OS_PrioRemove(p_tcb->Prio);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002566:	4618      	mov	r0, r3
 8002568:	f001 f854 	bl	8003614 <OS_PrioRemove>
 800256c:	e01f      	b.n	80025ae <OS_RdyListRemove+0x96>
        } else {
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	891b      	ldrh	r3, [r3, #8]
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	811a      	strh	r2, [r3, #8]
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e012      	b.n	80025ae <OS_RdyListRemove+0x96>
        }
    } else {
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	891b      	ldrh	r3, [r3, #8]
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	811a      	strh	r2, [r3, #8]
        p_tcb1->NextPtr = p_tcb2;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	60da      	str	r2, [r3, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <OS_RdyListRemove+0x90>
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	e002      	b.n	80025ae <OS_RdyListRemove+0x96>
        } else {
            p_tcb2->PrevPtr     = p_tcb1;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	611a      	str	r2, [r3, #16]
        }
    }
    p_tcb->PrevPtr = (OS_TCB *)0;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
    p_tcb->NextPtr = (OS_TCB *)0;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20008520 	.word	0x20008520

080025c8 <OS_Sched0>:
************************************************************************************************************************
*/

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
void  OS_Sched0 (void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]



    CPU_INT_DIS();
 80025d2:	f7fd fde1 	bl	8000198 <CPU_SR_Save>
 80025d6:	6078      	str	r0, [r7, #4]
    OSPrioHighRdy   = (OS_PRIO)0;                           /* Force the priority to 0                                */
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <OS_Sched0+0x4c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
    OSTCBHighRdyPtr = &OSIntQTaskTCB;                       /* Always schedule the ISR handler task                   */
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <OS_Sched0+0x50>)
 80025e0:	4a0e      	ldr	r2, [pc, #56]	; (800261c <OS_Sched0+0x54>)
 80025e2:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <OS_Sched0+0x50>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80025ec:	3201      	adds	r2, #1
 80025ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <OS_Sched0+0x58>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	4a09      	ldr	r2, [pc, #36]	; (8002620 <OS_Sched0+0x58>)
 80025fa:	6013      	str	r3, [r2, #0]
    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <OS_Sched0+0x5c>)
 80025fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002602:	601a      	str	r2, [r3, #0]
    CPU_INT_EN();
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7fd fdcb 	bl	80001a0 <CPU_SR_Restore>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200086a4 	.word	0x200086a4
 8002618:	20008794 	.word	0x20008794
 800261c:	2000895c 	.word	0x2000895c
 8002620:	200087b0 	.word	0x200087b0
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <OS_SchedLockTimeMeasStart>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
void  OS_SchedLockTimeMeasStart (void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
    if (OSSchedLockNestingCtr == 1u) {
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <OS_SchedLockTimeMeasStart+0x1c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d104      	bne.n	800263e <OS_SchedLockTimeMeasStart+0x16>
        OSSchedLockTimeBegin = CPU_TS_TmrRd();
 8002634:	f7fe fa84 	bl	8000b40 <CPU_TS_TmrRd>
 8002638:	4602      	mov	r2, r0
 800263a:	4b03      	ldr	r3, [pc, #12]	; (8002648 <OS_SchedLockTimeMeasStart+0x20>)
 800263c:	601a      	str	r2, [r3, #0]
    }
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000850c 	.word	0x2000850c
 8002648:	20008784 	.word	0x20008784

0800264c <OS_SchedLockTimeMeasStop>:




void  OS_SchedLockTimeMeasStop (void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
    CPU_TS_TMR  delta;


    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* Make sure we fully un-nested scheduler lock            */
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <OS_SchedLockTimeMeasStop+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <OS_SchedLockTimeMeasStop+0x3c>
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 800265a:	f7fe fa71 	bl	8000b40 <CPU_TS_TmrRd>
 800265e:	4602      	mov	r2, r0
              - OSSchedLockTimeBegin;
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <OS_SchedLockTimeMeasStop+0x48>)
 8002662:	681b      	ldr	r3, [r3, #0]
        delta = CPU_TS_TmrRd()                              /* Compute the delta time between begin and end           */
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	607b      	str	r3, [r7, #4]
        if (OSSchedLockTimeMax    < delta) {                /* Detect peak value                                      */
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <OS_SchedLockTimeMeasStop+0x4c>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	d202      	bcs.n	8002678 <OS_SchedLockTimeMeasStop+0x2c>
            OSSchedLockTimeMax    = delta;
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <OS_SchedLockTimeMeasStop+0x4c>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6013      	str	r3, [r2, #0]
        }
        if (OSSchedLockTimeMaxCur < delta) {                /* Detect peak value (for resettable value)               */
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <OS_SchedLockTimeMeasStop+0x50>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d202      	bcs.n	8002688 <OS_SchedLockTimeMeasStop+0x3c>
            OSSchedLockTimeMaxCur = delta;
 8002682:	4a06      	ldr	r2, [pc, #24]	; (800269c <OS_SchedLockTimeMeasStop+0x50>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6013      	str	r3, [r2, #0]
        }
    }
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	2000850c 	.word	0x2000850c
 8002694:	20008784 	.word	0x20008784
 8002698:	20008a5c 	.word	0x20008a5c
 800269c:	20008798 	.word	0x20008798

080026a0 <OS_SchedRoundRobin>:
************************************************************************************************************************
*/

#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
void  OS_SchedRoundRobin (OS_RDY_LIST  *p_rdy_list)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
    OS_TCB   *p_tcb;
    CPU_SR_ALLOC();
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]



    if (OSSchedRoundRobinEn != DEF_TRUE) {                  /* Make sure round-robin has been enabled                 */
 80026ac:	4b31      	ldr	r3, [pc, #196]	; (8002774 <OS_SchedRoundRobin+0xd4>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d15a      	bne.n	800276a <OS_SchedRoundRobin+0xca>
        return;
    }

    CPU_CRITICAL_ENTER();
 80026b4:	f7fd fd70 	bl	8000198 <CPU_SR_Save>
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	f7fe fd4f 	bl	800115c <CPU_IntDisMeasStart>
    p_tcb = p_rdy_list->HeadPtr;                            /* Decrement time quanta counter                          */
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60bb      	str	r3, [r7, #8]

    if (p_tcb == (OS_TCB *)0) {
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <OS_SchedRoundRobin+0x36>
        CPU_CRITICAL_EXIT();
 80026ca:	f7fe fd67 	bl	800119c <CPU_IntDisMeasStop>
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7fd fd66 	bl	80001a0 <CPU_SR_Restore>
        return;
 80026d4:	e04a      	b.n	800276c <OS_SchedRoundRobin+0xcc>
    }

    if (p_tcb == &OSIdleTaskTCB) {
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <OS_SchedRoundRobin+0xd8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d105      	bne.n	80026ea <OS_SchedRoundRobin+0x4a>
        CPU_CRITICAL_EXIT();
 80026de:	f7fe fd5d 	bl	800119c <CPU_IntDisMeasStop>
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7fd fd5c 	bl	80001a0 <CPU_SR_Restore>
        return;
 80026e8:	e040      	b.n	800276c <OS_SchedRoundRobin+0xcc>
    }

    if (p_tcb->TimeQuantaCtr > (OS_TICK)0) {
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <OS_SchedRoundRobin+0x5c>
        p_tcb->TimeQuantaCtr--;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	1e5a      	subs	r2, r3, #1
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	659a      	str	r2, [r3, #88]	; 0x58
    }

    if (p_tcb->TimeQuantaCtr > (OS_TICK)0) {                /* Task not done with its time quanta                     */
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <OS_SchedRoundRobin+0x70>
        CPU_CRITICAL_EXIT();
 8002704:	f7fe fd4a 	bl	800119c <CPU_IntDisMeasStop>
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7fd fd49 	bl	80001a0 <CPU_SR_Restore>
        return;
 800270e:	e02d      	b.n	800276c <OS_SchedRoundRobin+0xcc>
    }

    if (p_rdy_list->NbrEntries < (OS_OBJ_QTY)2) {           /* See if it's time to time slice current task            */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	891b      	ldrh	r3, [r3, #8]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d805      	bhi.n	8002724 <OS_SchedRoundRobin+0x84>
        CPU_CRITICAL_EXIT();                                /* ... only if multiple tasks at same priority            */
 8002718:	f7fe fd40 	bl	800119c <CPU_IntDisMeasStop>
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7fd fd3f 	bl	80001a0 <CPU_SR_Restore>
        return;
 8002722:	e023      	b.n	800276c <OS_SchedRoundRobin+0xcc>
    }

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Can't round-robin if the scheduler is locked           */
 8002724:	4b15      	ldr	r3, [pc, #84]	; (800277c <OS_SchedRoundRobin+0xdc>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <OS_SchedRoundRobin+0x98>
        CPU_CRITICAL_EXIT();
 800272c:	f7fe fd36 	bl	800119c <CPU_IntDisMeasStop>
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7fd fd35 	bl	80001a0 <CPU_SR_Restore>
        return;
 8002736:	e019      	b.n	800276c <OS_SchedRoundRobin+0xcc>
    }

    OS_RdyListMoveHeadToTail(p_rdy_list);                   /* Move current OS_TCB to the end of the list             */
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fea5 	bl	8002488 <OS_RdyListMoveHeadToTail>
    p_tcb = p_rdy_list->HeadPtr;                            /* Point to new OS_TCB at head of the list                */
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60bb      	str	r3, [r7, #8]
    if (p_tcb->TimeQuanta == (OS_TICK)0) {                  /* See if we need to use the default time slice           */
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <OS_SchedRoundRobin+0xb6>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <OS_SchedRoundRobin+0xe0>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	659a      	str	r2, [r3, #88]	; 0x58
 8002754:	e003      	b.n	800275e <OS_SchedRoundRobin+0xbe>
    } else {
        p_tcb->TimeQuantaCtr = p_tcb->TimeQuanta;           /* Load time slice counter with new time                  */
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    CPU_CRITICAL_EXIT();
 800275e:	f7fe fd1d 	bl	800119c <CPU_IntDisMeasStop>
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f7fd fd1c 	bl	80001a0 <CPU_SR_Restore>
 8002768:	e000      	b.n	800276c <OS_SchedRoundRobin+0xcc>
        return;
 800276a:	bf00      	nop
}
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20008b3c 	.word	0x20008b3c
 8002778:	20008890 	.word	0x20008890
 800277c:	2000850c 	.word	0x2000850c
 8002780:	20008a2c 	.word	0x20008a2c

08002784 <OS_TaskBlock>:
************************************************************************************************************************
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
    OS_ERR  err;


    if (timeout > (OS_TICK)0) {                             /* Add task to tick list if timeout non zero               */
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <OS_TaskBlock+0x38>
        OS_TickListInsert(p_tcb,
 8002794:	f107 030e 	add.w	r3, r7, #14
 8002798:	2202      	movs	r2, #2
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f002 ff09 	bl	80055b4 <OS_TickListInsert>
                          timeout,
                          OS_OPT_TIME_TIMEOUT,
                         &err);
        if (err == OS_ERR_NONE) {
 80027a2:	89fb      	ldrh	r3, [r7, #14]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d104      	bne.n	80027b2 <OS_TaskBlock+0x2e>
            p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2203      	movs	r2, #3
 80027ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80027b0:	e008      	b.n	80027c4 <OS_TaskBlock+0x40>
        } else {
            p_tcb->TaskState = OS_TASK_STATE_PEND;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80027ba:	e003      	b.n	80027c4 <OS_TaskBlock+0x40>
        }
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
    OS_RdyListRemove(p_tcb);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fea7 	bl	8002518 <OS_RdyListRemove>
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <OS_TaskRdy>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TaskRdy (OS_TCB  *p_tcb)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
    OS_TickListRemove(p_tcb);                               /* Remove from tick list                                  */
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f002 ffe2 	bl	80057a4 <OS_TickListRemove>
    if ((p_tcb->TaskState & OS_TASK_STATE_BIT_SUSPENDED) == (OS_STATE)0) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <OS_TaskRdy+0x22>
        OS_RdyListInsert(p_tcb);                            /* Insert the task in the ready list                      */
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fdac 	bl	800234c <OS_RdyListInsert>
    }
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <OS_Dbg_Init>:
*                  DOES NOT optimize out the 'const' variables above.
************************************************************************************************************************
*/

void  OS_Dbg_Init (void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
    CPU_INT08U const  *p_temp08;
    CPU_INT16U const  *p_temp16;
    CPU_INT32U const  *p_temp32;


    p_temp08 = (CPU_INT08U const *)&OSDbg_DbgEn;
 8002802:	4b49      	ldr	r3, [pc, #292]	; (8002928 <OS_Dbg_Init+0x12c>)
 8002804:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_DataSize;
 8002806:	4b49      	ldr	r3, [pc, #292]	; (800292c <OS_Dbg_Init+0x130>)
 8002808:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_ArgChkEn;
 800280a:	4b49      	ldr	r3, [pc, #292]	; (8002930 <OS_Dbg_Init+0x134>)
 800280c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_AppHooksEn;
 800280e:	4b49      	ldr	r3, [pc, #292]	; (8002934 <OS_Dbg_Init+0x138>)
 8002810:	60fb      	str	r3, [r7, #12]

    p_temp32 = (CPU_INT32U const *)&OSDbg_EndiannessTest;
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <OS_Dbg_Init+0x13c>)
 8002814:	60bb      	str	r3, [r7, #8]

    p_temp08 = (CPU_INT08U const *)&OSDbg_CalledFromISRChkEn;
 8002816:	4b49      	ldr	r3, [pc, #292]	; (800293c <OS_Dbg_Init+0x140>)
 8002818:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrp;
 800281a:	4b49      	ldr	r3, [pc, #292]	; (8002940 <OS_Dbg_Init+0x144>)
 800281c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagEn;
 800281e:	4b49      	ldr	r3, [pc, #292]	; (8002944 <OS_Dbg_Init+0x148>)
 8002820:	60fb      	str	r3, [r7, #12]
#if OS_CFG_FLAG_EN > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagDelEn;
 8002822:	4b49      	ldr	r3, [pc, #292]	; (8002948 <OS_Dbg_Init+0x14c>)
 8002824:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagModeClrEn;
 8002826:	4b49      	ldr	r3, [pc, #292]	; (800294c <OS_Dbg_Init+0x150>)
 8002828:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_FlagPendAbortEn;
 800282a:	4b49      	ldr	r3, [pc, #292]	; (8002950 <OS_Dbg_Init+0x154>)
 800282c:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagGrpSize;
 800282e:	4b49      	ldr	r3, [pc, #292]	; (8002954 <OS_Dbg_Init+0x158>)
 8002830:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_FlagWidth;
 8002832:	4b49      	ldr	r3, [pc, #292]	; (8002958 <OS_Dbg_Init+0x15c>)
 8002834:	607b      	str	r3, [r7, #4]
#endif

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_IntQ;
 8002836:	4b49      	ldr	r3, [pc, #292]	; (800295c <OS_Dbg_Init+0x160>)
 8002838:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ISRPostDeferredEn;
 800283a:	4b49      	ldr	r3, [pc, #292]	; (8002960 <OS_Dbg_Init+0x164>)
 800283c:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mem;
 800283e:	4b49      	ldr	r3, [pc, #292]	; (8002964 <OS_Dbg_Init+0x168>)
 8002840:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MemEn;
 8002842:	4b49      	ldr	r3, [pc, #292]	; (8002968 <OS_Dbg_Init+0x16c>)
 8002844:	60fb      	str	r3, [r7, #12]
#if OS_CFG_MEM_EN > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MemSize;
 8002846:	4b49      	ldr	r3, [pc, #292]	; (800296c <OS_Dbg_Init+0x170>)
 8002848:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_MsgEn;
 800284a:	4b49      	ldr	r3, [pc, #292]	; (8002970 <OS_Dbg_Init+0x174>)
 800284c:	60fb      	str	r3, [r7, #12]
#if (OS_MSG_EN) > 0u
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgSize;
 800284e:	4b49      	ldr	r3, [pc, #292]	; (8002974 <OS_Dbg_Init+0x178>)
 8002850:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgPoolSize;
 8002852:	4b49      	ldr	r3, [pc, #292]	; (8002978 <OS_Dbg_Init+0x17c>)
 8002854:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MsgQSize;
 8002856:	4b49      	ldr	r3, [pc, #292]	; (800297c <OS_Dbg_Init+0x180>)
 8002858:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_Mutex;
 800285a:	4b49      	ldr	r3, [pc, #292]	; (8002980 <OS_Dbg_Init+0x184>)
 800285c:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexEn;
 800285e:	4b49      	ldr	r3, [pc, #292]	; (8002984 <OS_Dbg_Init+0x188>)
 8002860:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_MUTEX_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexDelEn;
 8002862:	4b49      	ldr	r3, [pc, #292]	; (8002988 <OS_Dbg_Init+0x18c>)
 8002864:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_MutexPendAbortEn;
 8002866:	4b49      	ldr	r3, [pc, #292]	; (800298c <OS_Dbg_Init+0x190>)
 8002868:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_MutexSize;
 800286a:	4b49      	ldr	r3, [pc, #292]	; (8002990 <OS_Dbg_Init+0x194>)
 800286c:	607b      	str	r3, [r7, #4]
#endif

    p_temp08 = (CPU_INT08U const *)&OSDbg_ObjTypeChkEn;
 800286e:	4b49      	ldr	r3, [pc, #292]	; (8002994 <OS_Dbg_Init+0x198>)
 8002870:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_PendMultiEn;
 8002872:	4b49      	ldr	r3, [pc, #292]	; (8002998 <OS_Dbg_Init+0x19c>)
 8002874:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendDataSize;
 8002876:	4b49      	ldr	r3, [pc, #292]	; (800299c <OS_Dbg_Init+0x1a0>)
 8002878:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendListSize;
 800287a:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <OS_Dbg_Init+0x1a4>)
 800287c:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PendObjSize;
 800287e:	4b49      	ldr	r3, [pc, #292]	; (80029a4 <OS_Dbg_Init+0x1a8>)
 8002880:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioMax;
 8002882:	4b49      	ldr	r3, [pc, #292]	; (80029a8 <OS_Dbg_Init+0x1ac>)
 8002884:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_PrioTblSize;
 8002886:	4b49      	ldr	r3, [pc, #292]	; (80029ac <OS_Dbg_Init+0x1b0>)
 8002888:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_PtrSize;
 800288a:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <OS_Dbg_Init+0x1b4>)
 800288c:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Q;
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <OS_Dbg_Init+0x1b8>)
 8002890:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QEn;
 8002892:	4b49      	ldr	r3, [pc, #292]	; (80029b8 <OS_Dbg_Init+0x1bc>)
 8002894:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_Q_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_QDelEn;
 8002896:	4b49      	ldr	r3, [pc, #292]	; (80029bc <OS_Dbg_Init+0x1c0>)
 8002898:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QFlushEn;
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <OS_Dbg_Init+0x1c4>)
 800289c:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_QPendAbortEn;
 800289e:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <OS_Dbg_Init+0x1c8>)
 80028a0:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_QSize;
 80028a2:	4b49      	ldr	r3, [pc, #292]	; (80029c8 <OS_Dbg_Init+0x1cc>)
 80028a4:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_SchedRoundRobinEn;
 80028a6:	4b49      	ldr	r3, [pc, #292]	; (80029cc <OS_Dbg_Init+0x1d0>)
 80028a8:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_Sem;
 80028aa:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <OS_Dbg_Init+0x1d4>)
 80028ac:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemEn;
 80028ae:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <OS_Dbg_Init+0x1d8>)
 80028b0:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_SEM_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemDelEn;
 80028b2:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <OS_Dbg_Init+0x1dc>)
 80028b4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_SemPendAbortEn;
 80028b6:	4b49      	ldr	r3, [pc, #292]	; (80029dc <OS_Dbg_Init+0x1e0>)
 80028b8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSetEn;
 80028ba:	4b49      	ldr	r3, [pc, #292]	; (80029e0 <OS_Dbg_Init+0x1e4>)
 80028bc:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_SemSize;
 80028be:	4b49      	ldr	r3, [pc, #292]	; (80029e4 <OS_Dbg_Init+0x1e8>)
 80028c0:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_RdyList;
 80028c2:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <OS_Dbg_Init+0x1ec>)
 80028c4:	607b      	str	r3, [r7, #4]
    p_temp32 = (CPU_INT32U const *)&OSDbg_RdyListSize;
 80028c6:	4b49      	ldr	r3, [pc, #292]	; (80029ec <OS_Dbg_Init+0x1f0>)
 80028c8:	60bb      	str	r3, [r7, #8]

    p_temp16 = (CPU_INT16U const *)&OSDbg_StkWidth;
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <OS_Dbg_Init+0x1f4>)
 80028cc:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskEn;
 80028ce:	4b49      	ldr	r3, [pc, #292]	; (80029f4 <OS_Dbg_Init+0x1f8>)
 80028d0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_StatTaskStkChkEn;
 80028d2:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <OS_Dbg_Init+0x1fc>)
 80028d4:	60fb      	str	r3, [r7, #12]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskChangePrioEn;
 80028d6:	4b49      	ldr	r3, [pc, #292]	; (80029fc <OS_Dbg_Init+0x200>)
 80028d8:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskDelEn;
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <OS_Dbg_Init+0x204>)
 80028dc:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQEn;
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <OS_Dbg_Init+0x208>)
 80028e0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskQPendAbortEn;
 80028e2:	4b49      	ldr	r3, [pc, #292]	; (8002a08 <OS_Dbg_Init+0x20c>)
 80028e4:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskProfileEn;
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <OS_Dbg_Init+0x210>)
 80028e8:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TaskRegTblSize;
 80028ea:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <OS_Dbg_Init+0x214>)
 80028ec:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSemPendAbortEn;
 80028ee:	4b49      	ldr	r3, [pc, #292]	; (8002a14 <OS_Dbg_Init+0x218>)
 80028f0:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TaskSuspendEn;
 80028f2:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <OS_Dbg_Init+0x21c>)
 80028f4:	60fb      	str	r3, [r7, #12]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TCBSize;
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <OS_Dbg_Init+0x220>)
 80028f8:	607b      	str	r3, [r7, #4]

    p_temp16 = (CPU_INT16U const *)&OSDbg_TickSpokeSize;
 80028fa:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <OS_Dbg_Init+0x224>)
 80028fc:	607b      	str	r3, [r7, #4]

    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyHMSMEn;
 80028fe:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <OS_Dbg_Init+0x228>)
 8002900:	60fb      	str	r3, [r7, #12]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TimeDlyResumeEn;
 8002902:	4b49      	ldr	r3, [pc, #292]	; (8002a28 <OS_Dbg_Init+0x22c>)
 8002904:	60fb      	str	r3, [r7, #12]


    p_temp16 = (CPU_INT16U const *)&OSDbg_Tmr;
 8002906:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <OS_Dbg_Init+0x230>)
 8002908:	607b      	str	r3, [r7, #4]
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrEn;
 800290a:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <OS_Dbg_Init+0x234>)
 800290c:	60fb      	str	r3, [r7, #12]
#if (OS_CFG_TMR_EN) > 0u
    p_temp08 = (CPU_INT08U const *)&OSDbg_TmrDelEn;
 800290e:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <OS_Dbg_Init+0x238>)
 8002910:	60fb      	str	r3, [r7, #12]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSize;
 8002912:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <OS_Dbg_Init+0x23c>)
 8002914:	607b      	str	r3, [r7, #4]
    p_temp16 = (CPU_INT16U const *)&OSDbg_TmrSpokeSize;
 8002916:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <OS_Dbg_Init+0x240>)
 8002918:	607b      	str	r3, [r7, #4]
#endif

    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;
 800291a:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <OS_Dbg_Init+0x244>)
 800291c:	607b      	str	r3, [r7, #4]

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    p_temp16 = p_temp16;
    p_temp32 = p_temp32;
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	0800650e 	.word	0x0800650e
 800292c:	08006678 	.word	0x08006678
 8002930:	0800650f 	.word	0x0800650f
 8002934:	08006510 	.word	0x08006510
 8002938:	08006514 	.word	0x08006514
 800293c:	08006518 	.word	0x08006518
 8002940:	0800651c 	.word	0x0800651c
 8002944:	08006519 	.word	0x08006519
 8002948:	08006544 	.word	0x08006544
 800294c:	08006545 	.word	0x08006545
 8002950:	08006546 	.word	0x08006546
 8002954:	08006548 	.word	0x08006548
 8002958:	0800654a 	.word	0x0800654a
 800295c:	0800654c 	.word	0x0800654c
 8002960:	0800654e 	.word	0x0800654e
 8002964:	08006550 	.word	0x08006550
 8002968:	08006570 	.word	0x08006570
 800296c:	08006572 	.word	0x08006572
 8002970:	08006574 	.word	0x08006574
 8002974:	08006576 	.word	0x08006576
 8002978:	08006578 	.word	0x08006578
 800297c:	0800657a 	.word	0x0800657a
 8002980:	0800657c 	.word	0x0800657c
 8002984:	080065a8 	.word	0x080065a8
 8002988:	080065a9 	.word	0x080065a9
 800298c:	080065aa 	.word	0x080065aa
 8002990:	080065ac 	.word	0x080065ac
 8002994:	080065ae 	.word	0x080065ae
 8002998:	080065af 	.word	0x080065af
 800299c:	080065b0 	.word	0x080065b0
 80029a0:	080065b2 	.word	0x080065b2
 80029a4:	080065b4 	.word	0x080065b4
 80029a8:	080065b6 	.word	0x080065b6
 80029ac:	080065b8 	.word	0x080065b8
 80029b0:	080065ba 	.word	0x080065ba
 80029b4:	080065bc 	.word	0x080065bc
 80029b8:	080065ec 	.word	0x080065ec
 80029bc:	080065ed 	.word	0x080065ed
 80029c0:	080065ee 	.word	0x080065ee
 80029c4:	080065ef 	.word	0x080065ef
 80029c8:	080065f0 	.word	0x080065f0
 80029cc:	080065f2 	.word	0x080065f2
 80029d0:	080065f4 	.word	0x080065f4
 80029d4:	0800661c 	.word	0x0800661c
 80029d8:	0800661d 	.word	0x0800661d
 80029dc:	0800661e 	.word	0x0800661e
 80029e0:	0800661f 	.word	0x0800661f
 80029e4:	08006620 	.word	0x08006620
 80029e8:	08006622 	.word	0x08006622
 80029ec:	08006624 	.word	0x08006624
 80029f0:	08006628 	.word	0x08006628
 80029f4:	08006629 	.word	0x08006629
 80029f8:	0800662a 	.word	0x0800662a
 80029fc:	0800662b 	.word	0x0800662b
 8002a00:	0800662c 	.word	0x0800662c
 8002a04:	0800662d 	.word	0x0800662d
 8002a08:	0800662e 	.word	0x0800662e
 8002a0c:	0800662f 	.word	0x0800662f
 8002a10:	08006630 	.word	0x08006630
 8002a14:	08006632 	.word	0x08006632
 8002a18:	08006633 	.word	0x08006633
 8002a1c:	08006634 	.word	0x08006634
 8002a20:	08006636 	.word	0x08006636
 8002a24:	08006638 	.word	0x08006638
 8002a28:	08006639 	.word	0x08006639
 8002a2c:	0800663c 	.word	0x0800663c
 8002a30:	08006670 	.word	0x08006670
 8002a34:	08006671 	.word	0x08006671
 8002a38:	08006672 	.word	0x08006672
 8002a3c:	08006674 	.word	0x08006674
 8002a40:	08006676 	.word	0x08006676

08002a44 <OS_FlagInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_FlagInit (OS_ERR  *p_err)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <OS_FlagInit+0x24>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
#endif

    OSFlagQty        = (OS_OBJ_QTY   )0;
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <OS_FlagInit+0x28>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	801a      	strh	r2, [r3, #0]
   *p_err            = OS_ERR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	801a      	strh	r2, [r3, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	20008a58 	.word	0x20008a58
 8002a6c:	20008a54 	.word	0x20008a54

08002a70 <OS_FlagPost>:
OS_FLAGS  OS_FlagPost (OS_FLAG_GRP  *p_grp,
                       OS_FLAGS      flags,
                       OS_OPT        opt,
                       CPU_TS        ts,
                       OS_ERR       *p_err)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
    OS_OPT          mode;
    OS_PEND_DATA   *p_pend_data;
    OS_PEND_DATA   *p_pend_data_next;
    OS_PEND_LIST   *p_pend_list;
    OS_TCB         *p_tcb;
    CPU_SR_ALLOC();
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24



    CPU_CRITICAL_ENTER();
 8002a84:	f7fd fb88 	bl	8000198 <CPU_SR_Save>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24
 8002a8a:	f7fe fb67 	bl	800115c <CPU_IntDisMeasStart>
    switch (opt) {
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d013      	beq.n	8002abc <OS_FlagPost+0x4c>
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	dc02      	bgt.n	8002a9e <OS_FlagPost+0x2e>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <OS_FlagPost+0x3e>
 8002a9c:	e016      	b.n	8002acc <OS_FlagPost+0x5c>
 8002a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa2:	d004      	beq.n	8002aae <OS_FlagPost+0x3e>
 8002aa4:	f248 0201 	movw	r2, #32769	; 0x8001
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <OS_FlagPost+0x4c>
 8002aac:	e00e      	b.n	8002acc <OS_FlagPost+0x5c>
        case OS_OPT_POST_FLAG_SET:
        case OS_OPT_POST_FLAG_SET | OS_OPT_POST_NO_SCHED:
             p_grp->Flags |=  flags;                            /* Set   the flags specified in the group             */
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	621a      	str	r2, [r3, #32]
             break;
 8002aba:	e012      	b.n	8002ae2 <OS_FlagPost+0x72>

        case OS_OPT_POST_FLAG_CLR:
        case OS_OPT_POST_FLAG_CLR | OS_OPT_POST_NO_SCHED:
             p_grp->Flags &= ~flags;                            /* Clear the flags specified in the group             */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1a      	ldr	r2, [r3, #32]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
             break;
 8002aca:	e00a      	b.n	8002ae2 <OS_FlagPost+0x72>

        default:
             CPU_CRITICAL_EXIT();                               /* INVALID option                                     */
 8002acc:	f7fe fb66 	bl	800119c <CPU_IntDisMeasStop>
 8002ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ad2:	f7fd fb65 	bl	80001a0 <CPU_SR_Restore>
            *p_err = OS_ERR_OPT_INVALID;
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	f645 6225 	movw	r2, #24101	; 0x5e25
 8002adc:	801a      	strh	r2, [r3, #0]
             return ((OS_FLAGS)0);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e105      	b.n	8002cee <OS_FlagPost+0x27e>
    }
    p_grp->TS   = ts;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24
    p_pend_list = &p_grp->PendList;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3308      	adds	r3, #8
 8002aec:	623b      	str	r3, [r7, #32]
    if (p_pend_list->NbrEntries == 0u) {                        /* Any task waiting on event flag group?              */
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	891b      	ldrh	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <OS_FlagPost+0x9c>
        CPU_CRITICAL_EXIT();                                    /* No                                                 */
 8002af6:	f7fe fb51 	bl	800119c <CPU_IntDisMeasStop>
 8002afa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002afc:	f7fd fb50 	bl	80001a0 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8002b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b02:	2200      	movs	r2, #0
 8002b04:	801a      	strh	r2, [r3, #0]
        return (p_grp->Flags);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	e0f0      	b.n	8002cee <OS_FlagPost+0x27e>
    }

    OS_CRITICAL_ENTER_CPU_EXIT();
 8002b0c:	4b7a      	ldr	r3, [pc, #488]	; (8002cf8 <OS_FlagPost+0x288>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b78      	ldr	r3, [pc, #480]	; (8002cf8 <OS_FlagPost+0x288>)
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	4b77      	ldr	r3, [pc, #476]	; (8002cf8 <OS_FlagPost+0x288>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <OS_FlagPost+0xb4>
 8002b20:	f7ff fd82 	bl	8002628 <OS_SchedLockTimeMeasStart>
 8002b24:	f7fe fb3a 	bl	800119c <CPU_IntDisMeasStop>
 8002b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b2a:	f7fd fb39 	bl	80001a0 <CPU_SR_Restore>
    p_pend_data = p_pend_list->HeadPtr;
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    p_tcb       = p_pend_data->TCBPtr;
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)      */
 8002b3a:	e0a7      	b.n	8002c8c <OS_FlagPost+0x21c>
        p_pend_data_next = p_pend_data->NextPtr;
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	61fb      	str	r3, [r7, #28]
        mode             = p_tcb->FlagsOpt & OS_OPT_PEND_FLAG_MASK;
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	837b      	strh	r3, [r7, #26]
        switch (mode) {
 8002b4e:	8b7b      	ldrh	r3, [r7, #26]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	2b07      	cmp	r3, #7
 8002b54:	d85a      	bhi.n	8002c0c <OS_FlagPost+0x19c>
 8002b56:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <OS_FlagPost+0xec>)
 8002b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5c:	08002bc3 	.word	0x08002bc3
 8002b60:	08002beb 	.word	0x08002beb
 8002b64:	08002c0d 	.word	0x08002c0d
 8002b68:	08002b7d 	.word	0x08002b7d
 8002b6c:	08002c0d 	.word	0x08002c0d
 8002b70:	08002c0d 	.word	0x08002c0d
 8002b74:	08002c0d 	.word	0x08002c0d
 8002b78:	08002ba3 	.word	0x08002ba3
            case OS_OPT_PEND_FLAG_SET_ALL:                      /* See if all req. flags are set for current node     */
                 flags_rdy = (OS_FLAGS)(p_grp->Flags & p_tcb->FlagsPend);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1a      	ldr	r2, [r3, #32]
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b86:	4013      	ands	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
                 if (flags_rdy == p_tcb->FlagsPend) {
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d168      	bne.n	8002c68 <OS_FlagPost+0x1f8>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	6979      	ldr	r1, [r7, #20]
 8002b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b9c:	f000 f8b0 	bl	8002d00 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8002ba0:	e062      	b.n	8002c68 <OS_FlagPost+0x1f8>

            case OS_OPT_PEND_FLAG_SET_ANY:                      /* See if any flag set                                */
                 flags_rdy = (OS_FLAGS)(p_grp->Flags & p_tcb->FlagsPend);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bac:	4013      	ands	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
                 if (flags_rdy != (OS_FLAGS)0) {
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d05a      	beq.n	8002c6c <OS_FlagPost+0x1fc>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	6979      	ldr	r1, [r7, #20]
 8002bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bbc:	f000 f8a0 	bl	8002d00 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8002bc0:	e054      	b.n	8002c6c <OS_FlagPost+0x1fc>

#if OS_CFG_FLAG_MODE_CLR_EN > 0u
            case OS_OPT_PEND_FLAG_CLR_ALL:                      /* See if all req. flags are set for current node     */
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bce:	4013      	ands	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
                 if (flags_rdy == p_tcb->FlagsPend) {
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d148      	bne.n	8002c70 <OS_FlagPost+0x200>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	6979      	ldr	r1, [r7, #20]
 8002be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002be4:	f000 f88c 	bl	8002d00 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8002be8:	e042      	b.n	8002c70 <OS_FlagPost+0x200>

            case OS_OPT_PEND_FLAG_CLR_ANY:                      /* See if any flag set                                */
                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
                 if (flags_rdy != (OS_FLAGS)0) {
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d039      	beq.n	8002c74 <OS_FlagPost+0x204>
                     OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	6979      	ldr	r1, [r7, #20]
 8002c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c06:	f000 f87b 	bl	8002d00 <OS_FlagTaskRdy>
                                    flags_rdy,
                                    ts);
                 }
                 break;
 8002c0a:	e033      	b.n	8002c74 <OS_FlagPost+0x204>
#endif
            default:
                 OS_CRITICAL_EXIT();
 8002c0c:	f7fd fac4 	bl	8000198 <CPU_SR_Save>
 8002c10:	6278      	str	r0, [r7, #36]	; 0x24
 8002c12:	f7fe faa3 	bl	800115c <CPU_IntDisMeasStart>
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <OS_FlagPost+0x288>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <OS_FlagPost+0x288>)
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <OS_FlagPost+0x288>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d113      	bne.n	8002c52 <OS_FlagPost+0x1e2>
 8002c2a:	f7ff fd0f 	bl	800264c <OS_SchedLockTimeMeasStop>
 8002c2e:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <OS_FlagPost+0x28c>)
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <OS_FlagPost+0x1d6>
 8002c36:	f7fe fab1 	bl	800119c <CPU_IntDisMeasStop>
 8002c3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c3c:	f7fd fab0 	bl	80001a0 <CPU_SR_Restore>
 8002c40:	f7ff fcc2 	bl	80025c8 <OS_Sched0>
 8002c44:	e00a      	b.n	8002c5c <OS_FlagPost+0x1ec>
 8002c46:	f7fe faa9 	bl	800119c <CPU_IntDisMeasStop>
 8002c4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c4c:	f7fd faa8 	bl	80001a0 <CPU_SR_Restore>
 8002c50:	e004      	b.n	8002c5c <OS_FlagPost+0x1ec>
 8002c52:	f7fe faa3 	bl	800119c <CPU_IntDisMeasStop>
 8002c56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c58:	f7fd faa2 	bl	80001a0 <CPU_SR_Restore>
                *p_err = OS_ERR_FLAG_PEND_OPT;
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	f643 22ff 	movw	r2, #15103	; 0x3aff
 8002c62:	801a      	strh	r2, [r3, #0]
                 return ((OS_FLAGS)0);
 8002c64:	2300      	movs	r3, #0
 8002c66:	e042      	b.n	8002cee <OS_FlagPost+0x27e>
                 break;
 8002c68:	bf00      	nop
 8002c6a:	e004      	b.n	8002c76 <OS_FlagPost+0x206>
                 break;
 8002c6c:	bf00      	nop
 8002c6e:	e002      	b.n	8002c76 <OS_FlagPost+0x206>
                 break;
 8002c70:	bf00      	nop
 8002c72:	e000      	b.n	8002c76 <OS_FlagPost+0x206>
                 break;
 8002c74:	bf00      	nop
        }
        p_pend_data = p_pend_data_next;                         /* Point to next task waiting for event flag(s)       */
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (p_pend_data != (OS_PEND_DATA *)0) {
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <OS_FlagPost+0x218>
            p_tcb = p_pend_data->TCBPtr;
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c86:	e001      	b.n	8002c8c <OS_FlagPost+0x21c>
        } else {
            p_tcb = (OS_TCB *)0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)      */
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f47f af54 	bne.w	8002b3c <OS_FlagPost+0xcc>
        }
    }
    OS_CRITICAL_EXIT_NO_SCHED();
 8002c94:	f7fd fa80 	bl	8000198 <CPU_SR_Save>
 8002c98:	6278      	str	r0, [r7, #36]	; 0x24
 8002c9a:	f7fe fa5f 	bl	800115c <CPU_IntDisMeasStart>
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <OS_FlagPost+0x288>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <OS_FlagPost+0x288>)
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <OS_FlagPost+0x288>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <OS_FlagPost+0x246>
 8002cb2:	f7ff fccb 	bl	800264c <OS_SchedLockTimeMeasStop>
 8002cb6:	f7fe fa71 	bl	800119c <CPU_IntDisMeasStop>
 8002cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cbc:	f7fd fa70 	bl	80001a0 <CPU_SR_Restore>

    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8002cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db01      	blt.n	8002ccc <OS_FlagPost+0x25c>
        OSSched();
 8002cc8:	f7fe ff2a 	bl	8001b20 <OSSched>
    }

    CPU_CRITICAL_ENTER();
 8002ccc:	f7fd fa64 	bl	8000198 <CPU_SR_Save>
 8002cd0:	6278      	str	r0, [r7, #36]	; 0x24
 8002cd2:	f7fe fa43 	bl	800115c <CPU_IntDisMeasStart>
    flags_cur = p_grp->Flags;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8002cdc:	f7fe fa5e 	bl	800119c <CPU_IntDisMeasStop>
 8002ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ce2:	f7fd fa5d 	bl	80001a0 <CPU_SR_Restore>
   *p_err     = OS_ERR_NONE;
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce8:	2200      	movs	r2, #0
 8002cea:	801a      	strh	r2, [r3, #0]
    return (flags_cur);
 8002cec:	693b      	ldr	r3, [r7, #16]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3730      	adds	r7, #48	; 0x30
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2000850c 	.word	0x2000850c
 8002cfc:	20008b44 	.word	0x20008b44

08002d00 <OS_FlagTaskRdy>:
*/

void   OS_FlagTaskRdy (OS_TCB    *p_tcb,
                       OS_FLAGS   flags_rdy,
                       CPU_TS     ts)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
    p_tcb->FlagsRdy   = flags_rdy;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    p_tcb->PendStatus = OS_STATUS_PEND_OK;                  /* Clear pend status                                      */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;            /* Indicate no longer pending                             */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    p_tcb->TS         = ts;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
    switch (p_tcb->TaskState) {
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002d30:	2b07      	cmp	r3, #7
 8002d32:	d820      	bhi.n	8002d76 <OS_FlagTaskRdy+0x76>
 8002d34:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <OS_FlagTaskRdy+0x3c>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d77 	.word	0x08002d77
 8002d40:	08002d77 	.word	0x08002d77
 8002d44:	08002d5d 	.word	0x08002d5d
 8002d48:	08002d5d 	.word	0x08002d5d
 8002d4c:	08002d77 	.word	0x08002d77
 8002d50:	08002d77 	.word	0x08002d77
 8002d54:	08002d6d 	.word	0x08002d6d
 8002d58:	08002d6d 	.word	0x08002d6d
        case OS_TASK_STATE_SUSPENDED:
             break;

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             OS_TaskRdy(p_tcb);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff fd38 	bl	80027d2 <OS_TaskRdy>
             p_tcb->TaskState = OS_TASK_STATE_RDY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             break;
 8002d6a:	e005      	b.n	8002d78 <OS_FlagTaskRdy+0x78>

        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             break;
 8002d74:	e000      	b.n	8002d78 <OS_FlagTaskRdy+0x78>

        default:
             break;
 8002d76:	bf00      	nop
    }
    OS_PendListRemove(p_tcb);
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7ff f998 	bl	80020ae <OS_PendListRemove>
}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop

08002d88 <OS_IntQPost>:
                   OS_MSG_SIZE   msg_size,
                   OS_FLAGS      flags,
                   OS_OPT        opt,
                   CPU_TS        ts,
                   OS_ERR       *p_err)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	807b      	strh	r3, [r7, #2]
    CPU_SR_ALLOC();
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8002d9a:	f7fd f9fd 	bl	8000198 <CPU_SR_Save>
 8002d9e:	6178      	str	r0, [r7, #20]
 8002da0:	f7fe f9dc 	bl	800115c <CPU_IntDisMeasStart>
    if (OSIntQNbrEntries < OSCfg_IntQSize) {                /* Make sure we haven't already filled the ISR queue      */
 8002da4:	4b30      	ldr	r3, [pc, #192]	; (8002e68 <OS_IntQPost+0xe0>)
 8002da6:	881a      	ldrh	r2, [r3, #0]
 8002da8:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <OS_IntQPost+0xe4>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d248      	bcs.n	8002e42 <OS_IntQPost+0xba>
        OSIntQNbrEntries++;
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <OS_IntQPost+0xe0>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <OS_IntQPost+0xe0>)
 8002dba:	801a      	strh	r2, [r3, #0]

        if (OSIntQNbrEntriesMax < OSIntQNbrEntries) {
 8002dbc:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <OS_IntQPost+0xe8>)
 8002dbe:	881a      	ldrh	r2, [r3, #0]
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <OS_IntQPost+0xe0>)
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d203      	bcs.n	8002dd0 <OS_IntQPost+0x48>
            OSIntQNbrEntriesMax = OSIntQNbrEntries;
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <OS_IntQPost+0xe0>)
 8002dca:	881a      	ldrh	r2, [r3, #0]
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <OS_IntQPost+0xe8>)
 8002dce:	801a      	strh	r2, [r3, #0]
        }

        OSIntQInPtr->Type       = type;                     /* Save object type being posted                          */
 8002dd0:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <OS_IntQPost+0xec>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	601a      	str	r2, [r3, #0]
        OSIntQInPtr->ObjPtr     = p_obj;                    /* Save pointer to object being posted                    */
 8002dd8:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <OS_IntQPost+0xec>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]
        OSIntQInPtr->MsgPtr     = p_void;                   /* Save pointer to message if posting to a message queue  */
 8002de0:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <OS_IntQPost+0xec>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
        OSIntQInPtr->MsgSize    = msg_size;                 /* Save the message size   if posting to a message queue  */
 8002de8:	4b22      	ldr	r3, [pc, #136]	; (8002e74 <OS_IntQPost+0xec>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	887a      	ldrh	r2, [r7, #2]
 8002dee:	821a      	strh	r2, [r3, #16]
        OSIntQInPtr->Flags      = flags;                    /* Save the flags if posting to an event flag group       */
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <OS_IntQPost+0xec>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a3a      	ldr	r2, [r7, #32]
 8002df6:	615a      	str	r2, [r3, #20]
        OSIntQInPtr->Opt        = opt;                      /* Save post options                                      */
 8002df8:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <OS_IntQPost+0xec>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dfe:	831a      	strh	r2, [r3, #24]
        OSIntQInPtr->TS         = ts;                       /* Save time stamp                                        */
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <OS_IntQPost+0xec>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e06:	61da      	str	r2, [r3, #28]

        OSIntQInPtr             =  OSIntQInPtr->NextPtr;    /* Point to the next interrupt handler queue entry        */
 8002e08:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <OS_IntQPost+0xec>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <OS_IntQPost+0xec>)
 8002e10:	6013      	str	r3, [r2, #0]

        OSRdyList[0].NbrEntries = (OS_OBJ_QTY)1;            /* Make the interrupt handler task ready to run           */
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <OS_IntQPost+0xf0>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	811a      	strh	r2, [r3, #8]
        OSRdyList[0].HeadPtr    = &OSIntQTaskTCB;
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <OS_IntQPost+0xf0>)
 8002e1a:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <OS_IntQPost+0xf4>)
 8002e1c:	601a      	str	r2, [r3, #0]
        OSRdyList[0].TailPtr    = &OSIntQTaskTCB;
 8002e1e:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <OS_IntQPost+0xf0>)
 8002e20:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <OS_IntQPost+0xf4>)
 8002e22:	605a      	str	r2, [r3, #4]
        OS_PrioInsert(0u);                                  /* Add task priority 0 in the priority table              */
 8002e24:	2000      	movs	r0, #0
 8002e26:	f000 fbcf 	bl	80035c8 <OS_PrioInsert>
        if (OSPrioCur != 0) {                               /* Chk if OSIntQTask is not running                       */
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <OS_IntQPost+0xf8>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <OS_IntQPost+0xb2>
            OSPrioSaved         = OSPrioCur;                /* Save current priority                                  */
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <OS_IntQPost+0xf8>)
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <OS_IntQPost+0xfc>)
 8002e38:	701a      	strb	r2, [r3, #0]
        }

       *p_err                   = OS_ERR_NONE;
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	801a      	strh	r2, [r3, #0]
 8002e40:	e009      	b.n	8002e56 <OS_IntQPost+0xce>
    } else {
        OSIntQOvfCtr++;                                     /* Count the number of ISR queue overflows                */
 8002e42:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <OS_IntQPost+0x100>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <OS_IntQPost+0x100>)
 8002e4c:	801a      	strh	r2, [r3, #0]
       *p_err                   = OS_ERR_INT_Q_FULL;
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	f244 6253 	movw	r2, #18003	; 0x4653
 8002e54:	801a      	strh	r2, [r3, #0]
    }
    CPU_CRITICAL_EXIT();
 8002e56:	f7fe f9a1 	bl	800119c <CPU_IntDisMeasStop>
 8002e5a:	6978      	ldr	r0, [r7, #20]
 8002e5c:	f7fd f9a0 	bl	80001a0 <CPU_SR_Restore>
}
 8002e60:	bf00      	nop
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20008b44 	.word	0x20008b44
 8002e6c:	080064ac 	.word	0x080064ac
 8002e70:	20008790 	.word	0x20008790
 8002e74:	200086a0 	.word	0x200086a0
 8002e78:	20008520 	.word	0x20008520
 8002e7c:	2000895c 	.word	0x2000895c
 8002e80:	200086b0 	.word	0x200086b0
 8002e84:	20008792 	.word	0x20008792
 8002e88:	20008a56 	.word	0x20008a56

08002e8c <OS_IntQRePost>:
* Returns    : none
************************************************************************************************************************
*/

void  OS_IntQRePost (void)
{
 8002e8c:	b5b0      	push	{r4, r5, r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af02      	add	r7, sp, #8
    CPU_TS  ts;
    OS_ERR  err;


    switch (OSIntQOutPtr->Type) {                           /* Re-post to task                                        */
 8002e92:	4b5f      	ldr	r3, [pc, #380]	; (8003010 <OS_IntQRePost+0x184>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a5e      	ldr	r2, [pc, #376]	; (8003014 <OS_IntQRePost+0x188>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d053      	beq.n	8002f46 <OS_IntQRePost+0xba>
 8002e9e:	4a5d      	ldr	r2, [pc, #372]	; (8003014 <OS_IntQRePost+0x188>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d809      	bhi.n	8002eb8 <OS_IntQRePost+0x2c>
 8002ea4:	4a5c      	ldr	r2, [pc, #368]	; (8003018 <OS_IntQRePost+0x18c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d017      	beq.n	8002eda <OS_IntQRePost+0x4e>
 8002eaa:	4a5c      	ldr	r2, [pc, #368]	; (800301c <OS_IntQRePost+0x190>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d06a      	beq.n	8002f86 <OS_IntQRePost+0xfa>
 8002eb0:	4a5b      	ldr	r2, [pc, #364]	; (8003020 <OS_IntQRePost+0x194>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d03a      	beq.n	8002f2c <OS_IntQRePost+0xa0>
             }
#endif
             break;

        default:
             break;
 8002eb6:	e0a7      	b.n	8003008 <OS_IntQRePost+0x17c>
    switch (OSIntQOutPtr->Type) {                           /* Re-post to task                                        */
 8002eb8:	4a5a      	ldr	r2, [pc, #360]	; (8003024 <OS_IntQRePost+0x198>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d05a      	beq.n	8002f74 <OS_IntQRePost+0xe8>
 8002ebe:	4a59      	ldr	r2, [pc, #356]	; (8003024 <OS_IntQRePost+0x198>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d803      	bhi.n	8002ecc <OS_IntQRePost+0x40>
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <OS_IntQRePost+0x19c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d073      	beq.n	8002fb2 <OS_IntQRePost+0x126>
             break;
 8002eca:	e09d      	b.n	8003008 <OS_IntQRePost+0x17c>
    switch (OSIntQOutPtr->Type) {                           /* Re-post to task                                        */
 8002ecc:	4a57      	ldr	r2, [pc, #348]	; (800302c <OS_IntQRePost+0x1a0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d066      	beq.n	8002fa0 <OS_IntQRePost+0x114>
 8002ed2:	4a57      	ldr	r2, [pc, #348]	; (8003030 <OS_IntQRePost+0x1a4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d012      	beq.n	8002efe <OS_IntQRePost+0x72>
             break;
 8002ed8:	e096      	b.n	8003008 <OS_IntQRePost+0x17c>
             (void)OS_FlagPost((OS_FLAG_GRP *) OSIntQOutPtr->ObjPtr,
 8002eda:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <OS_IntQRePost+0x184>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6898      	ldr	r0, [r3, #8]
                               (OS_FLAGS     ) OSIntQOutPtr->Flags,
 8002ee0:	4b4b      	ldr	r3, [pc, #300]	; (8003010 <OS_IntQRePost+0x184>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6959      	ldr	r1, [r3, #20]
                               (OS_OPT       ) OSIntQOutPtr->Opt,
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <OS_IntQRePost+0x184>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	8b1a      	ldrh	r2, [r3, #24]
                               (CPU_TS       ) OSIntQOutPtr->TS,
 8002eec:	4b48      	ldr	r3, [pc, #288]	; (8003010 <OS_IntQRePost+0x184>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69dc      	ldr	r4, [r3, #28]
             (void)OS_FlagPost((OS_FLAG_GRP *) OSIntQOutPtr->ObjPtr,
 8002ef2:	1cbb      	adds	r3, r7, #2
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	f7ff fdba 	bl	8002a70 <OS_FlagPost>
             break;
 8002efc:	e084      	b.n	8003008 <OS_IntQRePost+0x17c>
             OS_QPost((OS_Q      *) OSIntQOutPtr->ObjPtr,
 8002efe:	4b44      	ldr	r3, [pc, #272]	; (8003010 <OS_IntQRePost+0x184>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6898      	ldr	r0, [r3, #8]
                      (void      *) OSIntQOutPtr->MsgPtr,
 8002f04:	4b42      	ldr	r3, [pc, #264]	; (8003010 <OS_IntQRePost+0x184>)
 8002f06:	681b      	ldr	r3, [r3, #0]
             OS_QPost((OS_Q      *) OSIntQOutPtr->ObjPtr,
 8002f08:	68d9      	ldr	r1, [r3, #12]
                      (OS_MSG_SIZE) OSIntQOutPtr->MsgSize,
 8002f0a:	4b41      	ldr	r3, [pc, #260]	; (8003010 <OS_IntQRePost+0x184>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	8a1c      	ldrh	r4, [r3, #16]
                      (OS_OPT     ) OSIntQOutPtr->Opt,
 8002f10:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <OS_IntQRePost+0x184>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	8b1d      	ldrh	r5, [r3, #24]
                      (CPU_TS     ) OSIntQOutPtr->TS,
 8002f16:	4b3e      	ldr	r3, [pc, #248]	; (8003010 <OS_IntQRePost+0x184>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69db      	ldr	r3, [r3, #28]
             OS_QPost((OS_Q      *) OSIntQOutPtr->ObjPtr,
 8002f1c:	1cba      	adds	r2, r7, #2
 8002f1e:	9201      	str	r2, [sp, #4]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	462b      	mov	r3, r5
 8002f24:	4622      	mov	r2, r4
 8002f26:	f000 fbb3 	bl	8003690 <OS_QPost>
             break;
 8002f2a:	e06d      	b.n	8003008 <OS_IntQRePost+0x17c>
             (void)OS_SemPost((OS_SEM *) OSIntQOutPtr->ObjPtr,
 8002f2c:	4b38      	ldr	r3, [pc, #224]	; (8003010 <OS_IntQRePost+0x184>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6898      	ldr	r0, [r3, #8]
                              (OS_OPT  ) OSIntQOutPtr->Opt,
 8002f32:	4b37      	ldr	r3, [pc, #220]	; (8003010 <OS_IntQRePost+0x184>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	8b19      	ldrh	r1, [r3, #24]
                              (CPU_TS  ) OSIntQOutPtr->TS,
 8002f38:	4b35      	ldr	r3, [pc, #212]	; (8003010 <OS_IntQRePost+0x184>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69da      	ldr	r2, [r3, #28]
             (void)OS_SemPost((OS_SEM *) OSIntQOutPtr->ObjPtr,
 8002f3e:	1cbb      	adds	r3, r7, #2
 8002f40:	f000 fc72 	bl	8003828 <OS_SemPost>
             break;
 8002f44:	e060      	b.n	8003008 <OS_IntQRePost+0x17c>
             OS_TaskQPost((OS_TCB    *) OSIntQOutPtr->ObjPtr,
 8002f46:	4b32      	ldr	r3, [pc, #200]	; (8003010 <OS_IntQRePost+0x184>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6898      	ldr	r0, [r3, #8]
                          (void      *) OSIntQOutPtr->MsgPtr,
 8002f4c:	4b30      	ldr	r3, [pc, #192]	; (8003010 <OS_IntQRePost+0x184>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
             OS_TaskQPost((OS_TCB    *) OSIntQOutPtr->ObjPtr,
 8002f50:	68d9      	ldr	r1, [r3, #12]
                          (OS_MSG_SIZE) OSIntQOutPtr->MsgSize,
 8002f52:	4b2f      	ldr	r3, [pc, #188]	; (8003010 <OS_IntQRePost+0x184>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	8a1c      	ldrh	r4, [r3, #16]
                          (OS_OPT     ) OSIntQOutPtr->Opt,
 8002f58:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <OS_IntQRePost+0x184>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	8b1d      	ldrh	r5, [r3, #24]
                          (CPU_TS     ) OSIntQOutPtr->TS,
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <OS_IntQRePost+0x184>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69db      	ldr	r3, [r3, #28]
             OS_TaskQPost((OS_TCB    *) OSIntQOutPtr->ObjPtr,
 8002f64:	1cba      	adds	r2, r7, #2
 8002f66:	9201      	str	r2, [sp, #4]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	462b      	mov	r3, r5
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	f001 fe61 	bl	8004c34 <OS_TaskQPost>
             break;
 8002f72:	e049      	b.n	8003008 <OS_IntQRePost+0x17c>
             (void)OS_TaskResume((OS_TCB *) OSIntQOutPtr->ObjPtr,
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <OS_IntQRePost+0x184>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	1cba      	adds	r2, r7, #2
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 ff6e 	bl	8004e60 <OS_TaskResume>
             break;
 8002f84:	e040      	b.n	8003008 <OS_IntQRePost+0x17c>
             (void)OS_TaskSemPost((OS_TCB *) OSIntQOutPtr->ObjPtr,
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <OS_IntQRePost+0x184>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6898      	ldr	r0, [r3, #8]
                                  (OS_OPT  ) OSIntQOutPtr->Opt,
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <OS_IntQRePost+0x184>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	8b19      	ldrh	r1, [r3, #24]
                                  (CPU_TS  ) OSIntQOutPtr->TS,
 8002f92:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <OS_IntQRePost+0x184>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
             (void)OS_TaskSemPost((OS_TCB *) OSIntQOutPtr->ObjPtr,
 8002f98:	1cbb      	adds	r3, r7, #2
 8002f9a:	f002 f839 	bl	8005010 <OS_TaskSemPost>
             break;
 8002f9e:	e033      	b.n	8003008 <OS_IntQRePost+0x17c>
             (void)OS_TaskSuspend((OS_TCB *) OSIntQOutPtr->ObjPtr,
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <OS_IntQRePost+0x184>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	1cba      	adds	r2, r7, #2
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f002 f9aa 	bl	8005304 <OS_TaskSuspend>
             break;
 8002fb0:	e02a      	b.n	8003008 <OS_IntQRePost+0x17c>
             OS_SchedRoundRobin(&OSRdyList[OSPrioSaved]);
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <OS_IntQRePost+0x1a8>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <OS_IntQRePost+0x1ac>)
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fb6b 	bl	80026a0 <OS_SchedRoundRobin>
                                  (CPU_TS  ) OSIntQOutPtr->TS,
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <OS_IntQRePost+0x184>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
             (void)OS_TaskSemPost((OS_TCB *)&OSTickTaskTCB,                /* Signal tick task                        */
 8002fd0:	1cbb      	adds	r3, r7, #2
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4819      	ldr	r0, [pc, #100]	; (800303c <OS_IntQRePost+0x1b0>)
 8002fd6:	f002 f81b 	bl	8005010 <OS_TaskSemPost>
             OSTmrUpdateCtr--;
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <OS_IntQRePost+0x1b4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	4a17      	ldr	r2, [pc, #92]	; (8003040 <OS_IntQRePost+0x1b4>)
 8002fe2:	6013      	str	r3, [r2, #0]
             if (OSTmrUpdateCtr == (OS_CTR)0u) {
 8002fe4:	4b16      	ldr	r3, [pc, #88]	; (8003040 <OS_IntQRePost+0x1b4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10c      	bne.n	8003006 <OS_IntQRePost+0x17a>
                 OSTmrUpdateCtr = OSTmrUpdateCnt;
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <OS_IntQRePost+0x1b8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a13      	ldr	r2, [pc, #76]	; (8003040 <OS_IntQRePost+0x1b4>)
 8002ff2:	6013      	str	r3, [r2, #0]
                 ts             = OS_TS_GET();                             /* Get timestamp                           */
 8002ff4:	f7fd fda4 	bl	8000b40 <CPU_TS_TmrRd>
 8002ff8:	6078      	str	r0, [r7, #4]
                 (void)OS_TaskSemPost((OS_TCB *)&OSTmrTaskTCB,             /* Signal timer task                       */
 8002ffa:	1cbb      	adds	r3, r7, #2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	2100      	movs	r1, #0
 8003000:	4811      	ldr	r0, [pc, #68]	; (8003048 <OS_IntQRePost+0x1bc>)
 8003002:	f002 f805 	bl	8005010 <OS_TaskSemPost>
             break;
 8003006:	bf00      	nop
    }
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bdb0      	pop	{r4, r5, r7, pc}
 8003010:	2000888c 	.word	0x2000888c
 8003014:	47534d54 	.word	0x47534d54
 8003018:	47414c46 	.word	0x47414c46
 800301c:	47495354 	.word	0x47495354
 8003020:	414d4553 	.word	0x414d4553
 8003024:	53455254 	.word	0x53455254
 8003028:	4b434954 	.word	0x4b434954
 800302c:	53555354 	.word	0x53555354
 8003030:	55455551 	.word	0x55455551
 8003034:	20008792 	.word	0x20008792
 8003038:	20008520 	.word	0x20008520
 800303c:	200086b4 	.word	0x200086b4
 8003040:	20008b48 	.word	0x20008b48
 8003044:	20008b38 	.word	0x20008b38
 8003048:	200087b8 	.word	0x200087b8

0800304c <OS_IntQTask>:
* Returns    : none
************************************************************************************************************************
*/

void  OS_IntQTask (void  *p_arg)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    CPU_BOOLEAN  done;
    CPU_TS       ts_start;
    CPU_TS       ts_end;
    CPU_SR_ALLOC();
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]



    p_arg = p_arg;                                          /* Not using 'p_arg', prevent compiler warning            */
    while (DEF_ON) {
        done = DEF_FALSE;
 8003058:	2300      	movs	r3, #0
 800305a:	75fb      	strb	r3, [r7, #23]
        while (done == DEF_FALSE) {
 800305c:	e04b      	b.n	80030f6 <OS_IntQTask+0xaa>
            CPU_CRITICAL_ENTER();
 800305e:	f7fd f89b 	bl	8000198 <CPU_SR_Save>
 8003062:	6138      	str	r0, [r7, #16]
 8003064:	f7fe f87a 	bl	800115c <CPU_IntDisMeasStart>
            if (OSIntQNbrEntries == (OS_OBJ_QTY)0u) {
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <OS_IntQTask+0xb4>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d115      	bne.n	800309c <OS_IntQTask+0x50>
                OSRdyList[0].NbrEntries = (OS_OBJ_QTY)0u;   /* Remove from ready list                                 */
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <OS_IntQTask+0xb8>)
 8003072:	2200      	movs	r2, #0
 8003074:	811a      	strh	r2, [r3, #8]
                OSRdyList[0].HeadPtr    = (OS_TCB   *)0;
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <OS_IntQTask+0xb8>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
                OSRdyList[0].TailPtr    = (OS_TCB   *)0;
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <OS_IntQTask+0xb8>)
 800307e:	2200      	movs	r2, #0
 8003080:	605a      	str	r2, [r3, #4]
                OS_PrioRemove(0u);                          /* Remove from the priority table                         */
 8003082:	2000      	movs	r0, #0
 8003084:	f000 fac6 	bl	8003614 <OS_PrioRemove>
                CPU_CRITICAL_EXIT();
 8003088:	f7fe f888 	bl	800119c <CPU_IntDisMeasStop>
 800308c:	6938      	ldr	r0, [r7, #16]
 800308e:	f7fd f887 	bl	80001a0 <CPU_SR_Restore>
                OSSched();
 8003092:	f7fe fd45 	bl	8001b20 <OSSched>
                done = DEF_TRUE;                            /* No more entries in the queue, we are done              */
 8003096:	2301      	movs	r3, #1
 8003098:	75fb      	strb	r3, [r7, #23]
 800309a:	e02c      	b.n	80030f6 <OS_IntQTask+0xaa>
            } else {
                CPU_CRITICAL_EXIT();
 800309c:	f7fe f87e 	bl	800119c <CPU_IntDisMeasStop>
 80030a0:	6938      	ldr	r0, [r7, #16]
 80030a2:	f7fd f87d 	bl	80001a0 <CPU_SR_Restore>
                ts_start = OS_TS_GET();
 80030a6:	f7fd fd4b 	bl	8000b40 <CPU_TS_TmrRd>
 80030aa:	60f8      	str	r0, [r7, #12]
                OS_IntQRePost();
 80030ac:	f7ff feee 	bl	8002e8c <OS_IntQRePost>
                ts_end   = OS_TS_GET() - ts_start;          /* Measure execution time of tick task                    */
 80030b0:	f7fd fd46 	bl	8000b40 <CPU_TS_TmrRd>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	60bb      	str	r3, [r7, #8]
                if (OSIntQTaskTimeMax < ts_end) {
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <OS_IntQTask+0xbc>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d202      	bcs.n	80030cc <OS_IntQTask+0x80>
                    OSIntQTaskTimeMax = ts_end;
 80030c6:	4a10      	ldr	r2, [pc, #64]	; (8003108 <OS_IntQTask+0xbc>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6013      	str	r3, [r2, #0]
                }
                CPU_CRITICAL_ENTER();
 80030cc:	f7fd f864 	bl	8000198 <CPU_SR_Save>
 80030d0:	6138      	str	r0, [r7, #16]
 80030d2:	f7fe f843 	bl	800115c <CPU_IntDisMeasStart>
                OSIntQOutPtr = OSIntQOutPtr->NextPtr;       /* Point to next item in the ISR queue                    */
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <OS_IntQTask+0xc0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a0b      	ldr	r2, [pc, #44]	; (800310c <OS_IntQTask+0xc0>)
 80030de:	6013      	str	r3, [r2, #0]
                OSIntQNbrEntries--;
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <OS_IntQTask+0xb4>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <OS_IntQTask+0xb4>)
 80030ea:	801a      	strh	r2, [r3, #0]
                CPU_CRITICAL_EXIT();
 80030ec:	f7fe f856 	bl	800119c <CPU_IntDisMeasStop>
 80030f0:	6938      	ldr	r0, [r7, #16]
 80030f2:	f7fd f855 	bl	80001a0 <CPU_SR_Restore>
        while (done == DEF_FALSE) {
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0b0      	beq.n	800305e <OS_IntQTask+0x12>
        done = DEF_FALSE;
 80030fc:	e7ac      	b.n	8003058 <OS_IntQTask+0xc>
 80030fe:	bf00      	nop
 8003100:	20008b44 	.word	0x20008b44
 8003104:	20008520 	.word	0x20008520
 8003108:	2000877c 	.word	0x2000877c
 800310c:	2000888c 	.word	0x2000888c

08003110 <OS_IntQTaskInit>:
* Note(s)    : none
************************************************************************************************************************
*/

void  OS_IntQTaskInit (OS_ERR  *p_err)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b090      	sub	sp, #64	; 0x40
 8003114:	af0a      	add	r7, sp, #40	; 0x28
 8003116:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSIntQOvfCtr = (OS_QTY)0u;                              /* Clear the ISR queue overflow counter                   */
 8003118:	4b46      	ldr	r3, [pc, #280]	; (8003234 <OS_IntQTaskInit+0x124>)
 800311a:	2200      	movs	r2, #0
 800311c:	801a      	strh	r2, [r3, #0]

    if (OSCfg_IntQBasePtr == (OS_INT_Q *)0) {
 800311e:	4b46      	ldr	r3, [pc, #280]	; (8003238 <OS_IntQTaskInit+0x128>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <OS_IntQTaskInit+0x20>
       *p_err = OS_ERR_INT_Q;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f244 6252 	movw	r2, #18002	; 0x4652
 800312c:	801a      	strh	r2, [r3, #0]
        return;
 800312e:	e07d      	b.n	800322c <OS_IntQTaskInit+0x11c>
    }

    if (OSCfg_IntQSize < (OS_OBJ_QTY)2u) {
 8003130:	4b42      	ldr	r3, [pc, #264]	; (800323c <OS_IntQTaskInit+0x12c>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d804      	bhi.n	8003142 <OS_IntQTaskInit+0x32>
       *p_err = OS_ERR_INT_Q_SIZE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f244 6254 	movw	r2, #18004	; 0x4654
 800313e:	801a      	strh	r2, [r3, #0]
        return;
 8003140:	e074      	b.n	800322c <OS_IntQTaskInit+0x11c>
    }

    OSIntQTaskTimeMax = (CPU_TS)0;
 8003142:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <OS_IntQTaskInit+0x130>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

    p_int_q           = OSCfg_IntQBasePtr;                  /* Initialize the circular ISR queue                      */
 8003148:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <OS_IntQTaskInit+0x128>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
    p_int_q_next      = p_int_q;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	613b      	str	r3, [r7, #16]
    p_int_q_next++;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	3320      	adds	r3, #32
 8003156:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < OSCfg_IntQSize; i++) {
 8003158:	2300      	movs	r3, #0
 800315a:	81fb      	strh	r3, [r7, #14]
 800315c:	e01d      	b.n	800319a <OS_IntQTaskInit+0x8a>
        p_int_q->Type    =  OS_OBJ_TYPE_NONE;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	4a38      	ldr	r2, [pc, #224]	; (8003244 <OS_IntQTaskInit+0x134>)
 8003162:	601a      	str	r2, [r3, #0]
        p_int_q->ObjPtr  = (void      *)0;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
        p_int_q->MsgPtr  = (void      *)0;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	60da      	str	r2, [r3, #12]
        p_int_q->MsgSize = (OS_MSG_SIZE)0u;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2200      	movs	r2, #0
 8003174:	821a      	strh	r2, [r3, #16]
        p_int_q->Flags   = (OS_FLAGS   )0u;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	615a      	str	r2, [r3, #20]
        p_int_q->Opt     = (OS_OPT     )0u;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2200      	movs	r2, #0
 8003180:	831a      	strh	r2, [r3, #24]
        p_int_q->NextPtr = p_int_q_next;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	605a      	str	r2, [r3, #4]
        p_int_q++;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3320      	adds	r3, #32
 800318c:	617b      	str	r3, [r7, #20]
        p_int_q_next++;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	3320      	adds	r3, #32
 8003192:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < OSCfg_IntQSize; i++) {
 8003194:	89fb      	ldrh	r3, [r7, #14]
 8003196:	3301      	adds	r3, #1
 8003198:	81fb      	strh	r3, [r7, #14]
 800319a:	4b28      	ldr	r3, [pc, #160]	; (800323c <OS_IntQTaskInit+0x12c>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	89fa      	ldrh	r2, [r7, #14]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d3dc      	bcc.n	800315e <OS_IntQTaskInit+0x4e>
    }
    p_int_q--;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3b20      	subs	r3, #32
 80031a8:	617b      	str	r3, [r7, #20]
    p_int_q_next        = OSCfg_IntQBasePtr;
 80031aa:	4b23      	ldr	r3, [pc, #140]	; (8003238 <OS_IntQTaskInit+0x128>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	613b      	str	r3, [r7, #16]
    p_int_q->NextPtr    = p_int_q_next;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	605a      	str	r2, [r3, #4]
    OSIntQInPtr         = p_int_q_next;
 80031b6:	4a24      	ldr	r2, [pc, #144]	; (8003248 <OS_IntQTaskInit+0x138>)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	6013      	str	r3, [r2, #0]
    OSIntQOutPtr        = p_int_q_next;
 80031bc:	4a23      	ldr	r2, [pc, #140]	; (800324c <OS_IntQTaskInit+0x13c>)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	6013      	str	r3, [r2, #0]
    OSIntQNbrEntries    = (OS_OBJ_QTY)0u;
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <OS_IntQTaskInit+0x140>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	801a      	strh	r2, [r3, #0]
    OSIntQNbrEntriesMax = (OS_OBJ_QTY)0u;
 80031c8:	4b22      	ldr	r3, [pc, #136]	; (8003254 <OS_IntQTaskInit+0x144>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	801a      	strh	r2, [r3, #0]

                                                            /* -------------- CREATE THE ISR QUEUE TASK ------------- */
    if (OSCfg_IntQTaskStkBasePtr == (CPU_STK *)0) {
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <OS_IntQTaskInit+0x148>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <OS_IntQTaskInit+0xd0>
       *p_err = OS_ERR_INT_Q_STK_INVALID;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f244 6255 	movw	r2, #18005	; 0x4655
 80031dc:	801a      	strh	r2, [r3, #0]
        return;
 80031de:	e025      	b.n	800322c <OS_IntQTaskInit+0x11c>
    }

    if (OSCfg_IntQTaskStkSize < OSCfg_StkSizeMin) {
 80031e0:	4b1e      	ldr	r3, [pc, #120]	; (800325c <OS_IntQTaskInit+0x14c>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <OS_IntQTaskInit+0x150>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d204      	bcs.n	80031f6 <OS_IntQTaskInit+0xe6>
       *p_err = OS_ERR_INT_Q_STK_SIZE_INVALID;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f244 6256 	movw	r2, #18006	; 0x4656
 80031f2:	801a      	strh	r2, [r3, #0]
        return;
 80031f4:	e01a      	b.n	800322c <OS_IntQTaskInit+0x11c>
    }

    OSTaskCreate((OS_TCB     *)&OSIntQTaskTCB,
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <OS_IntQTaskInit+0x148>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1a      	ldr	r2, [pc, #104]	; (8003264 <OS_IntQTaskInit+0x154>)
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	4917      	ldr	r1, [pc, #92]	; (800325c <OS_IntQTaskInit+0x14c>)
 8003200:	6809      	ldr	r1, [r1, #0]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	9008      	str	r0, [sp, #32]
 8003206:	2003      	movs	r0, #3
 8003208:	9007      	str	r0, [sp, #28]
 800320a:	2000      	movs	r0, #0
 800320c:	9006      	str	r0, [sp, #24]
 800320e:	2000      	movs	r0, #0
 8003210:	9005      	str	r0, [sp, #20]
 8003212:	2000      	movs	r0, #0
 8003214:	9004      	str	r0, [sp, #16]
 8003216:	9103      	str	r1, [sp, #12]
 8003218:	9202      	str	r2, [sp, #8]
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	2300      	movs	r3, #0
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2300      	movs	r3, #0
 8003222:	4a11      	ldr	r2, [pc, #68]	; (8003268 <OS_IntQTaskInit+0x158>)
 8003224:	4911      	ldr	r1, [pc, #68]	; (800326c <OS_IntQTaskInit+0x15c>)
 8003226:	4812      	ldr	r0, [pc, #72]	; (8003270 <OS_IntQTaskInit+0x160>)
 8003228:	f000 ff2c 	bl	8004084 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20008a56 	.word	0x20008a56
 8003238:	080064a8 	.word	0x080064a8
 800323c:	080064ac 	.word	0x080064ac
 8003240:	2000877c 	.word	0x2000877c
 8003244:	454e4f4e 	.word	0x454e4f4e
 8003248:	200086a0 	.word	0x200086a0
 800324c:	2000888c 	.word	0x2000888c
 8003250:	20008b44 	.word	0x20008b44
 8003254:	20008790 	.word	0x20008790
 8003258:	080064b0 	.word	0x080064b0
 800325c:	080064b8 	.word	0x080064b8
 8003260:	080064e0 	.word	0x080064e0
 8003264:	080064b4 	.word	0x080064b4
 8003268:	0800304d 	.word	0x0800304d
 800326c:	08006418 	.word	0x08006418
 8003270:	2000895c 	.word	0x2000895c

08003274 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_MemInit (OS_ERR  *p_err)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMemDbgListPtr = (OS_MEM   *)0;
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <OS_MemInit+0x24>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
#endif

    OSMemQty        = (OS_OBJ_QTY)0;
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <OS_MemInit+0x28>)
 8003284:	2200      	movs	r2, #0
 8003286:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	801a      	strh	r2, [r3, #0]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	20008a28 	.word	0x20008a28
 800329c:	20008a62 	.word	0x20008a62

080032a0 <OS_MsgPoolInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MsgPoolInit (OS_ERR  *p_err)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <OS_MsgPoolInit+0xc0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <OS_MsgPoolInit+0x1a>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f245 721e 	movw	r2, #22302	; 0x571e
 80032b6:	801a      	strh	r2, [r3, #0]
        return;
 80032b8:	e04e      	b.n	8003358 <OS_MsgPoolInit+0xb8>
    }
    if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
 80032ba:	4b2a      	ldr	r3, [pc, #168]	; (8003364 <OS_MsgPoolInit+0xc4>)
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d104      	bne.n	80032cc <OS_MsgPoolInit+0x2c>
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f245 721d 	movw	r2, #22301	; 0x571d
 80032c8:	801a      	strh	r2, [r3, #0]
        return;
 80032ca:	e045      	b.n	8003358 <OS_MsgPoolInit+0xb8>
    }
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <OS_MsgPoolInit+0xc0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	617b      	str	r3, [r7, #20]
    p_msg2 = OSCfg_MsgPoolBasePtr;
 80032d2:	4b23      	ldr	r3, [pc, #140]	; (8003360 <OS_MsgPoolInit+0xc0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	613b      	str	r3, [r7, #16]
    p_msg2++;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	3310      	adds	r3, #16
 80032dc:	613b      	str	r3, [r7, #16]
    loops  = OSCfg_MsgPoolSize - 1u;
 80032de:	4b21      	ldr	r3, [pc, #132]	; (8003364 <OS_MsgPoolInit+0xc4>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 80032e6:	2300      	movs	r3, #0
 80032e8:	81fb      	strh	r3, [r7, #14]
 80032ea:	e014      	b.n	8003316 <OS_MsgPoolInit+0x76>
        p_msg1->NextPtr = p_msg2;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	601a      	str	r2, [r3, #0]
        p_msg1->MsgPtr  = (void      *)0;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	811a      	strh	r2, [r3, #8]
        p_msg1->MsgTS   = (CPU_TS     )0u;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
        p_msg1++;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	3310      	adds	r3, #16
 8003308:	617b      	str	r3, [r7, #20]
        p_msg2++;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	3310      	adds	r3, #16
 800330e:	613b      	str	r3, [r7, #16]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8003310:	89fb      	ldrh	r3, [r7, #14]
 8003312:	3301      	adds	r3, #1
 8003314:	81fb      	strh	r3, [r7, #14]
 8003316:	89fa      	ldrh	r2, [r7, #14]
 8003318:	89bb      	ldrh	r3, [r7, #12]
 800331a:	429a      	cmp	r2, r3
 800331c:	d3e6      	bcc.n	80032ec <OS_MsgPoolInit+0x4c>
    }
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
    p_msg1->MsgPtr  = (void      *)0;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2200      	movs	r2, #0
 8003328:	605a      	str	r2, [r3, #4]
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2200      	movs	r2, #0
 800332e:	811a      	strh	r2, [r3, #8]
    p_msg1->MsgTS   = (CPU_TS     )0u;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2200      	movs	r2, #0
 8003334:	60da      	str	r2, [r3, #12]

    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <OS_MsgPoolInit+0xc0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a0b      	ldr	r2, [pc, #44]	; (8003368 <OS_MsgPoolInit+0xc8>)
 800333c:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <OS_MsgPoolInit+0xc4>)
 8003340:	881a      	ldrh	r2, [r3, #0]
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <OS_MsgPoolInit+0xc8>)
 8003344:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <OS_MsgPoolInit+0xc8>)
 8003348:	2200      	movs	r2, #0
 800334a:	80da      	strh	r2, [r3, #6]
    OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <OS_MsgPoolInit+0xc8>)
 800334e:	2200      	movs	r2, #0
 8003350:	811a      	strh	r2, [r3, #8]
   *p_err                =  OS_ERR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	801a      	strh	r2, [r3, #0]
}
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	080064c8 	.word	0x080064c8
 8003364:	080064c4 	.word	0x080064c4
 8003368:	20008880 	.word	0x20008880

0800336c <OS_MsgQFreeAll>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
    OS_MSG      *p_msg;
    OS_MSG_QTY   qty;



    qty = p_msg_q->NbrEntries;                              /* Get the number of OS_MSGs being freed                  */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	895b      	ldrh	r3, [r3, #10]
 8003378:	81fb      	strh	r3, [r7, #14]
    if (p_msg_q->NbrEntries > (OS_MSG_QTY)0) {
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	895b      	ldrh	r3, [r3, #10]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d026      	beq.n	80033d0 <OS_MsgQFreeAll+0x64>
        p_msg                   = p_msg_q->InPtr;           /* Point to end of message chain                          */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60bb      	str	r3, [r7, #8]
        p_msg->NextPtr          = OSMsgPool.NextPtr;
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <OS_MsgQFreeAll+0x70>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	601a      	str	r2, [r3, #0]
        OSMsgPool.NextPtr       = p_msg_q->OutPtr;          /* Point to beginning of message chain                    */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a11      	ldr	r2, [pc, #68]	; (80033dc <OS_MsgQFreeAll+0x70>)
 8003396:	6013      	str	r3, [r2, #0]
        OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;      /* Update statistics for free list of messages            */
 8003398:	4b10      	ldr	r3, [pc, #64]	; (80033dc <OS_MsgQFreeAll+0x70>)
 800339a:	88da      	ldrh	r2, [r3, #6]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	895b      	ldrh	r3, [r3, #10]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <OS_MsgQFreeAll+0x70>)
 80033a6:	80da      	strh	r2, [r3, #6]
        OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <OS_MsgQFreeAll+0x70>)
 80033aa:	889a      	ldrh	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	895b      	ldrh	r3, [r3, #10]
 80033b0:	4413      	add	r3, r2
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <OS_MsgQFreeAll+0x70>)
 80033b6:	809a      	strh	r2, [r3, #4]
        p_msg_q->NbrEntries     = (OS_MSG_QTY)0;            /* Flush the message queue                                */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	815a      	strh	r2, [r3, #10]
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	819a      	strh	r2, [r3, #12]
        p_msg_q->InPtr          = (OS_MSG   *)0;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr         = (OS_MSG   *)0;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	605a      	str	r2, [r3, #4]
    }
    return (qty);
 80033d0:	89fb      	ldrh	r3, [r7, #14]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	20008880 	.word	0x20008880

080033e0 <OS_MsgQInit>:
************************************************************************************************************************
*/

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	811a      	strh	r2, [r3, #8]
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	815a      	strh	r2, [r3, #10]
    p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	819a      	strh	r2, [r3, #12]
    p_msg_q->InPtr          = (OS_MSG   *)0;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
    p_msg_q->OutPtr         = (OS_MSG   *)0;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	605a      	str	r2, [r3, #4]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <OS_MsgQPut>:
                  void         *p_void,
                  OS_MSG_SIZE   msg_size,
                  OS_OPT        opt,
                  CPU_TS        ts,
                  OS_ERR       *p_err)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	460b      	mov	r3, r1
 8003424:	80fb      	strh	r3, [r7, #6]
 8003426:	4613      	mov	r3, r2
 8003428:	80bb      	strh	r3, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	895a      	ldrh	r2, [r3, #10]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	891b      	ldrh	r3, [r3, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	d304      	bcc.n	8003440 <OS_MsgQPut+0x2c>
       *p_err = OS_ERR_Q_MAX;                               /* Message queue cannot accept any more messages          */
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	f246 5293 	movw	r2, #26003	; 0x6593
 800343c:	801a      	strh	r2, [r3, #0]
        return;
 800343e:	e06b      	b.n	8003518 <OS_MsgQPut+0x104>
    }

    if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
 8003440:	4b37      	ldr	r3, [pc, #220]	; (8003520 <OS_MsgQPut+0x10c>)
 8003442:	889b      	ldrh	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <OS_MsgQPut+0x3e>
       *p_err = OS_ERR_MSG_POOL_EMPTY;                      /* No more OS_MSG to use                                  */
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	f245 721d 	movw	r2, #22301	; 0x571d
 800344e:	801a      	strh	r2, [r3, #0]
        return;
 8003450:	e062      	b.n	8003518 <OS_MsgQPut+0x104>
    }

    p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
 8003452:	4b33      	ldr	r3, [pc, #204]	; (8003520 <OS_MsgQPut+0x10c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	617b      	str	r3, [r7, #20]
    OSMsgPool.NextPtr = p_msg->NextPtr;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <OS_MsgQPut+0x10c>)
 800345e:	6013      	str	r3, [r2, #0]
    OSMsgPool.NbrFree--;
 8003460:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <OS_MsgQPut+0x10c>)
 8003462:	889b      	ldrh	r3, [r3, #4]
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <OS_MsgQPut+0x10c>)
 800346a:	809a      	strh	r2, [r3, #4]
    OSMsgPool.NbrUsed++;
 800346c:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <OS_MsgQPut+0x10c>)
 800346e:	88db      	ldrh	r3, [r3, #6]
 8003470:	3301      	adds	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <OS_MsgQPut+0x10c>)
 8003476:	80da      	strh	r2, [r3, #6]
    if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
 8003478:	4b29      	ldr	r3, [pc, #164]	; (8003520 <OS_MsgQPut+0x10c>)
 800347a:	891a      	ldrh	r2, [r3, #8]
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <OS_MsgQPut+0x10c>)
 800347e:	88db      	ldrh	r3, [r3, #6]
 8003480:	429a      	cmp	r2, r3
 8003482:	d203      	bcs.n	800348c <OS_MsgQPut+0x78>
        OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
 8003484:	4b26      	ldr	r3, [pc, #152]	; (8003520 <OS_MsgQPut+0x10c>)
 8003486:	88da      	ldrh	r2, [r3, #6]
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <OS_MsgQPut+0x10c>)
 800348a:	811a      	strh	r2, [r3, #8]
    }

    if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	895b      	ldrh	r3, [r3, #10]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10c      	bne.n	80034ae <OS_MsgQPut+0x9a>
        p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	601a      	str	r2, [r3, #0]
        p_msg_q->OutPtr        = p_msg;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	605a      	str	r2, [r3, #4]
        p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	815a      	strh	r2, [r3, #10]
        p_msg->NextPtr         = (OS_MSG *)0;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e01e      	b.n	80034ec <OS_MsgQPut+0xd8>
    } else {                                                /* No                                                     */
        if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Is it FIFO or LIFO?                                    */
 80034ae:	88bb      	ldrh	r3, [r7, #4]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10c      	bne.n	80034d2 <OS_MsgQPut+0xbe>
            p_msg_in           = p_msg_q->InPtr;            /* FIFO, add to the head                                  */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	613b      	str	r3, [r7, #16]
            p_msg_in->NextPtr  = p_msg;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	601a      	str	r2, [r3, #0]
            p_msg_q->InPtr     = p_msg;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	601a      	str	r2, [r3, #0]
            p_msg->NextPtr     = (OS_MSG *)0;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e006      	b.n	80034e0 <OS_MsgQPut+0xcc>
        } else {
            p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO, add to the tail                                  */
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	601a      	str	r2, [r3, #0]
            p_msg_q->OutPtr    = p_msg;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	605a      	str	r2, [r3, #4]
        }
        p_msg_q->NbrEntries++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	895b      	ldrh	r3, [r3, #10]
 80034e4:	3301      	adds	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	815a      	strh	r2, [r3, #10]
    }
    if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	899a      	ldrh	r2, [r3, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	895b      	ldrh	r3, [r3, #10]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d203      	bcs.n	8003500 <OS_MsgQPut+0xec>
        p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	895a      	ldrh	r2, [r3, #10]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	819a      	strh	r2, [r3, #12]
    }
    p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	605a      	str	r2, [r3, #4]
    p_msg->MsgSize = msg_size;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	811a      	strh	r2, [r3, #8]
    p_msg->MsgTS   = ts;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	6a3a      	ldr	r2, [r7, #32]
 8003510:	60da      	str	r2, [r3, #12]
   *p_err          = OS_ERR_NONE;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	2200      	movs	r2, #0
 8003516:	801a      	strh	r2, [r3, #0]
}
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr
 8003520:	20008880 	.word	0x20008880

08003524 <OS_MutexInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_MutexInit (OS_ERR  *p_err)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <OS_MutexInit+0x24>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
#endif

    OSMutexQty        = (OS_OBJ_QTY)0;
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <OS_MutexInit+0x28>)
 8003534:	2200      	movs	r2, #0
 8003536:	801a      	strh	r2, [r3, #0]
   *p_err             =  OS_ERR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	801a      	strh	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	20008b40 	.word	0x20008b40
 800354c:	20008a64 	.word	0x20008a64

08003550 <OS_PrioInit>:
* Note       : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_PrioInit (void)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	e007      	b.n	800356c <OS_PrioInit+0x1c>
         OSPrioTbl[i] = (CPU_DATA)0;
 800355c:	4a07      	ldr	r2, [pc, #28]	; (800357c <OS_PrioInit+0x2c>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2100      	movs	r1, #0
 8003562:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3301      	adds	r3, #1
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f4      	beq.n	800355c <OS_PrioInit+0xc>
    }
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	20008508 	.word	0x20008508

08003580 <OS_PrioGetHighest>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

OS_PRIO  OS_PrioGetHighest (void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
    CPU_DATA  *p_tbl;
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
 8003586:	2300      	movs	r3, #0
 8003588:	70fb      	strb	r3, [r7, #3]
    p_tbl = &OSPrioTbl[0];
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <OS_PrioGetHighest+0x44>)
 800358c:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 800358e:	e005      	b.n	800359c <OS_PrioGetHighest+0x1c>
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	3320      	adds	r3, #32
 8003594:	70fb      	strb	r3, [r7, #3]
        p_tbl++;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	607b      	str	r3, [r7, #4]
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f5      	beq.n	8003590 <OS_PrioGetHighest+0x10>
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc fe00 	bl	80001ae <CPU_CntLeadZeros>
 80035ae:	4603      	mov	r3, r0
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	4413      	add	r3, r2
 80035b6:	70fb      	strb	r3, [r7, #3]
    return (prio);
 80035b8:	78fb      	ldrb	r3, [r7, #3]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20008508 	.word	0x20008508

080035c8 <OS_PrioInsert>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioInsert (OS_PRIO  prio)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 80035e0:	2301      	movs	r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f1c3 031f 	rsb	r3, r3, #31
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] |= bit;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	7dfa      	ldrb	r2, [r7, #23]
 80035f6:	4906      	ldr	r1, [pc, #24]	; (8003610 <OS_PrioInsert+0x48>)
 80035f8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	430a      	orrs	r2, r1
 8003600:	4903      	ldr	r1, [pc, #12]	; (8003610 <OS_PrioInsert+0x48>)
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	20008508 	.word	0x20008508

08003614 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]
    CPU_DATA  bit;
    CPU_DATA  bit_nbr;
    OS_PRIO   ix;


    ix             = prio / DEF_INT_CPU_NBR_BITS;
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	75fb      	strb	r3, [r7, #23]
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	613b      	str	r3, [r7, #16]
    bit            = 1u;
 800362c:	2301      	movs	r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f1c3 031f 	rsb	r3, r3, #31
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	60fb      	str	r3, [r7, #12]
    OSPrioTbl[ix] &= ~bit;
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	7dfa      	ldrb	r2, [r7, #23]
 8003642:	4907      	ldr	r1, [pc, #28]	; (8003660 <OS_PrioRemove+0x4c>)
 8003644:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	43d2      	mvns	r2, r2
 800364c:	400a      	ands	r2, r1
 800364e:	4904      	ldr	r1, [pc, #16]	; (8003660 <OS_PrioRemove+0x4c>)
 8003650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20008508 	.word	0x20008508

08003664 <OS_QInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_QInit (OS_ERR  *p_err)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSQDbgListPtr = (OS_Q *)0;
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <OS_QInit+0x24>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
#endif

    OSQQty        = (OS_OBJ_QTY)0;
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <OS_QInit+0x28>)
 8003674:	2200      	movs	r2, #0
 8003676:	801a      	strh	r2, [r3, #0]
   *p_err         = OS_ERR_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	801a      	strh	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	20008958 	.word	0x20008958
 800368c:	2000878c 	.word	0x2000878c

08003690 <OS_QPost>:
                void         *p_void,
                OS_MSG_SIZE   msg_size,
                OS_OPT        opt,
                CPU_TS        ts,
                OS_ERR       *p_err)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	460b      	mov	r3, r1
 80036a0:	80fb      	strh	r3, [r7, #6]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80bb      	strh	r3, [r7, #4]
    OS_OPT         post_type;
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_DATA  *p_pend_data_next;
    OS_TCB        *p_tcb;
    CPU_SR_ALLOC();
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]



    OS_CRITICAL_ENTER();
 80036aa:	f7fc fd75 	bl	8000198 <CPU_SR_Save>
 80036ae:	61f8      	str	r0, [r7, #28]
 80036b0:	f7fd fd54 	bl	800115c <CPU_IntDisMeasStart>
 80036b4:	4b4f      	ldr	r3, [pc, #316]	; (80037f4 <OS_QPost+0x164>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	4b4d      	ldr	r3, [pc, #308]	; (80037f4 <OS_QPost+0x164>)
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <OS_QPost+0x164>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <OS_QPost+0x3c>
 80036c8:	f7fe ffae 	bl	8002628 <OS_SchedLockTimeMeasStart>
 80036cc:	f7fd fd66 	bl	800119c <CPU_IntDisMeasStop>
 80036d0:	69f8      	ldr	r0, [r7, #28]
 80036d2:	f7fc fd65 	bl	80001a0 <CPU_SR_Restore>
    p_pend_list = &p_q->PendList;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3308      	adds	r3, #8
 80036da:	61bb      	str	r3, [r7, #24]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	891b      	ldrh	r3, [r3, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d13f      	bne.n	8003764 <OS_QPost+0xd4>
        if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
 80036e4:	88bb      	ldrh	r3, [r7, #4]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <OS_QPost+0x64>
            post_type = OS_OPT_POST_FIFO;
 80036ee:	2300      	movs	r3, #0
 80036f0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036f2:	e001      	b.n	80036f8 <OS_QPost+0x68>
        } else {
            post_type = OS_OPT_POST_LIFO;
 80036f4:	2310      	movs	r3, #16
 80036f6:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f103 0020 	add.w	r0, r3, #32
 80036fe:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	460b      	mov	r3, r1
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	f7ff fe81 	bl	8003414 <OS_MsgQPut>
                   p_void,
                   msg_size,
                   post_type,
                   ts,
                   p_err);
        OS_CRITICAL_EXIT();
 8003712:	f7fc fd41 	bl	8000198 <CPU_SR_Save>
 8003716:	61f8      	str	r0, [r7, #28]
 8003718:	f7fd fd20 	bl	800115c <CPU_IntDisMeasStart>
 800371c:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <OS_QPost+0x164>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	3b01      	subs	r3, #1
 8003722:	b2da      	uxtb	r2, r3
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <OS_QPost+0x164>)
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <OS_QPost+0x164>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d113      	bne.n	8003758 <OS_QPost+0xc8>
 8003730:	f7fe ff8c 	bl	800264c <OS_SchedLockTimeMeasStop>
 8003734:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <OS_QPost+0x168>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <OS_QPost+0xbc>
 800373c:	f7fd fd2e 	bl	800119c <CPU_IntDisMeasStop>
 8003740:	69f8      	ldr	r0, [r7, #28]
 8003742:	f7fc fd2d 	bl	80001a0 <CPU_SR_Restore>
 8003746:	f7fe ff3f 	bl	80025c8 <OS_Sched0>
        return;
 800374a:	e050      	b.n	80037ee <OS_QPost+0x15e>
        OS_CRITICAL_EXIT();
 800374c:	f7fd fd26 	bl	800119c <CPU_IntDisMeasStop>
 8003750:	69f8      	ldr	r0, [r7, #28]
 8003752:	f7fc fd25 	bl	80001a0 <CPU_SR_Restore>
        return;
 8003756:	e04a      	b.n	80037ee <OS_QPost+0x15e>
        OS_CRITICAL_EXIT();
 8003758:	f7fd fd20 	bl	800119c <CPU_IntDisMeasStop>
 800375c:	69f8      	ldr	r0, [r7, #28]
 800375e:	f7fc fd1f 	bl	80001a0 <CPU_SR_Restore>
        return;
 8003762:	e044      	b.n	80037ee <OS_QPost+0x15e>
    }

    if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
 8003764:	88bb      	ldrh	r3, [r7, #4]
 8003766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <OS_QPost+0xe6>
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	891b      	ldrh	r3, [r3, #8]
 8003772:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003774:	e001      	b.n	800377a <OS_QPost+0xea>
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
 8003776:	2301      	movs	r3, #1
 8003778:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    p_pend_data = p_pend_list->HeadPtr;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	623b      	str	r3, [r7, #32]
    while (cnt > 0u) {
 8003780:	e013      	b.n	80037aa <OS_QPost+0x11a>
        p_tcb            = p_pend_data->TCBPtr;
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	617b      	str	r3, [r7, #20]
        p_pend_data_next = p_pend_data->NextPtr;
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]
        OS_Post((OS_PEND_OBJ *)((void *)p_q),
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	6979      	ldr	r1, [r7, #20]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7fe fcf8 	bl	8002190 <OS_Post>
                p_tcb,
                p_void,
                msg_size,
                ts);
        p_pend_data = p_pend_data_next;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	623b      	str	r3, [r7, #32]
        cnt--;
 80037a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037a6:	3b01      	subs	r3, #1
 80037a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cnt > 0u) {
 80037aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e8      	bne.n	8003782 <OS_QPost+0xf2>
    }
    OS_CRITICAL_EXIT_NO_SCHED();
 80037b0:	f7fc fcf2 	bl	8000198 <CPU_SR_Save>
 80037b4:	61f8      	str	r0, [r7, #28]
 80037b6:	f7fd fcd1 	bl	800115c <CPU_IntDisMeasStart>
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <OS_QPost+0x164>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	3b01      	subs	r3, #1
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <OS_QPost+0x164>)
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <OS_QPost+0x164>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <OS_QPost+0x142>
 80037ce:	f7fe ff3d 	bl	800264c <OS_SchedLockTimeMeasStop>
 80037d2:	f7fd fce3 	bl	800119c <CPU_IntDisMeasStop>
 80037d6:	69f8      	ldr	r0, [r7, #28]
 80037d8:	f7fc fce2 	bl	80001a0 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 80037dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	db01      	blt.n	80037e8 <OS_QPost+0x158>
        OSSched();                                          /* Run the scheduler                                      */
 80037e4:	f7fe f99c 	bl	8001b20 <OSSched>
    }
   *p_err = OS_ERR_NONE;
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	2200      	movs	r2, #0
 80037ec:	801a      	strh	r2, [r3, #0]
}
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	2000850c 	.word	0x2000850c
 80037f8:	20008b44 	.word	0x20008b44

080037fc <OS_SemInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_SemInit (OS_ERR  *p_err)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSSemDbgListPtr = (OS_SEM *)0;
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <OS_SemInit+0x24>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
#endif

    OSSemQty        = (OS_OBJ_QTY)0;
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <OS_SemInit+0x28>)
 800380c:	2200      	movs	r2, #0
 800380e:	801a      	strh	r2, [r3, #0]
   *p_err           = OS_ERR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	801a      	strh	r2, [r3, #0]
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	200086a8 	.word	0x200086a8
 8003824:	20008a24 	.word	0x20008a24

08003828 <OS_SemPost>:

OS_SEM_CTR  OS_SemPost (OS_SEM  *p_sem,
                        OS_OPT   opt,
                        CPU_TS   ts,
                        OS_ERR  *p_err)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	; 0x38
 800382c:	af02      	add	r7, sp, #8
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	460b      	mov	r3, r1
 8003836:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR     ctr;
    OS_PEND_LIST  *p_pend_list;
    OS_PEND_DATA  *p_pend_data;
    OS_PEND_DATA  *p_pend_data_next;
    OS_TCB        *p_tcb;
    CPU_SR_ALLOC();
 8003838:	2300      	movs	r3, #0
 800383a:	627b      	str	r3, [r7, #36]	; 0x24



    CPU_CRITICAL_ENTER();
 800383c:	f7fc fcac 	bl	8000198 <CPU_SR_Save>
 8003840:	6278      	str	r0, [r7, #36]	; 0x24
 8003842:	f7fd fc8b 	bl	800115c <CPU_IntDisMeasStart>
    p_pend_list = &p_sem->PendList;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3308      	adds	r3, #8
 800384a:	623b      	str	r3, [r7, #32]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on semaphore?                         */
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	891b      	ldrh	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d125      	bne.n	80038a0 <OS_SemPost+0x78>
                     return ((OS_SEM_CTR)0);
                 }
                 break;

            case 4u:
                 if (p_sem->Ctr == DEF_INT_32U_MAX_VAL) {
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d10a      	bne.n	8003874 <OS_SemPost+0x4c>
                     CPU_CRITICAL_EXIT();
 800385e:	f7fd fc9d 	bl	800119c <CPU_IntDisMeasStop>
 8003862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003864:	f7fc fc9c 	bl	80001a0 <CPU_SR_Restore>
                    *p_err = OS_ERR_SEM_OVF;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 800386e:	801a      	strh	r2, [r3, #0]
                     return ((OS_SEM_CTR)0);
 8003870:	2300      	movs	r3, #0
 8003872:	e06e      	b.n	8003952 <OS_SemPost+0x12a>
                 }
                 break;
 8003874:	bf00      	nop

            default:
                 break;
        }
        p_sem->Ctr++;                                       /* No                                                     */
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	621a      	str	r2, [r3, #32]
        ctr       = p_sem->Ctr;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	617b      	str	r3, [r7, #20]
        p_sem->TS = ts;                                     /* Save timestamp in semaphore control block              */
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24
        CPU_CRITICAL_EXIT();
 800388c:	f7fd fc86 	bl	800119c <CPU_IntDisMeasStop>
 8003890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003892:	f7fc fc85 	bl	80001a0 <CPU_SR_Restore>
       *p_err     = OS_ERR_NONE;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2200      	movs	r2, #0
 800389a:	801a      	strh	r2, [r3, #0]
        return (ctr);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	e058      	b.n	8003952 <OS_SemPost+0x12a>
    }

    OS_CRITICAL_ENTER_CPU_EXIT();
 80038a0:	4b2e      	ldr	r3, [pc, #184]	; (800395c <OS_SemPost+0x134>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	4b2c      	ldr	r3, [pc, #176]	; (800395c <OS_SemPost+0x134>)
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	4b2b      	ldr	r3, [pc, #172]	; (800395c <OS_SemPost+0x134>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <OS_SemPost+0x90>
 80038b4:	f7fe feb8 	bl	8002628 <OS_SchedLockTimeMeasStart>
 80038b8:	f7fd fc70 	bl	800119c <CPU_IntDisMeasStop>
 80038bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038be:	f7fc fc6f 	bl	80001a0 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
 80038c2:	897b      	ldrh	r3, [r7, #10]
 80038c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <OS_SemPost+0xac>
        cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	891b      	ldrh	r3, [r3, #8]
 80038d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80038d2:	e001      	b.n	80038d8 <OS_SemPost+0xb0>
    } else {
        cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
 80038d4:	2301      	movs	r3, #1
 80038d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
    p_pend_data = p_pend_list->HeadPtr;
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
    while (cnt > 0u) {
 80038de:	e012      	b.n	8003906 <OS_SemPost+0xde>
        p_tcb            = p_pend_data->TCBPtr;
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	61fb      	str	r3, [r7, #28]
        p_pend_data_next = p_pend_data->NextPtr;
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61bb      	str	r3, [r7, #24]
        OS_Post((OS_PEND_OBJ *)((void *)p_sem),
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2300      	movs	r3, #0
 80038f2:	2200      	movs	r2, #0
 80038f4:	69f9      	ldr	r1, [r7, #28]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7fe fc4a 	bl	8002190 <OS_Post>
                p_tcb,
                (void      *)0,
                (OS_MSG_SIZE)0,
                ts);
        p_pend_data = p_pend_data_next;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
        cnt--;
 8003900:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003902:	3b01      	subs	r3, #1
 8003904:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while (cnt > 0u) {
 8003906:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e9      	bne.n	80038e0 <OS_SemPost+0xb8>
    }
    ctr = p_sem->Ctr;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	617b      	str	r3, [r7, #20]
    OS_CRITICAL_EXIT_NO_SCHED();
 8003912:	f7fc fc41 	bl	8000198 <CPU_SR_Save>
 8003916:	6278      	str	r0, [r7, #36]	; 0x24
 8003918:	f7fd fc20 	bl	800115c <CPU_IntDisMeasStart>
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <OS_SemPost+0x134>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	3b01      	subs	r3, #1
 8003922:	b2da      	uxtb	r2, r3
 8003924:	4b0d      	ldr	r3, [pc, #52]	; (800395c <OS_SemPost+0x134>)
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <OS_SemPost+0x134>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <OS_SemPost+0x10c>
 8003930:	f7fe fe8c 	bl	800264c <OS_SchedLockTimeMeasStop>
 8003934:	f7fd fc32 	bl	800119c <CPU_IntDisMeasStop>
 8003938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800393a:	f7fc fc31 	bl	80001a0 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 800393e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db01      	blt.n	800394a <OS_SemPost+0x122>
        OSSched();                                          /* Run the scheduler                                      */
 8003946:	f7fe f8eb 	bl	8001b20 <OSSched>
    }
   *p_err = OS_ERR_NONE;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2200      	movs	r2, #0
 800394e:	801a      	strh	r2, [r3, #0]
    return (ctr);
 8003950:	697b      	ldr	r3, [r7, #20]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3730      	adds	r7, #48	; 0x30
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	2000850c 	.word	0x2000850c

08003960 <OSStatReset>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
#endif
#if (OS_CFG_Q_EN > 0u)
    OS_Q        *p_q;
#endif
#endif
    CPU_SR_ALLOC();
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 800396c:	f7fc fc14 	bl	8000198 <CPU_SR_Save>
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	f7fd fbf3 	bl	800115c <CPU_IntDisMeasStart>
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
 8003976:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <OSStatReset+0x150>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
    OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
 800397c:	4b4d      	ldr	r3, [pc, #308]	; (8003ab4 <OSStatReset+0x154>)
 800397e:	2200      	movs	r2, #0
 8003980:	801a      	strh	r2, [r3, #0]
#endif

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskCPUUsageMax = 0u;
 8003982:	4b4d      	ldr	r3, [pc, #308]	; (8003ab8 <OSStatReset+0x158>)
 8003984:	2200      	movs	r2, #0
 8003986:	801a      	strh	r2, [r3, #0]
    OSStatTaskTimeMax     = (CPU_TS)0;
 8003988:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <OSStatReset+0x15c>)
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
#endif

    OSTickTaskTimeMax     = (CPU_TS)0;
 800398e:	4b4c      	ldr	r3, [pc, #304]	; (8003ac0 <OSStatReset+0x160>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

#if OS_CFG_TMR_EN > 0u
    OSTmrTaskTimeMax      = (CPU_TS)0;
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <OSStatReset+0x164>)
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
#endif

#ifdef CPU_CFG_INT_DIS_MEAS_EN
    OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
 800399a:	4b4b      	ldr	r3, [pc, #300]	; (8003ac8 <OSStatReset+0x168>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
 80039a0:	4b4a      	ldr	r3, [pc, #296]	; (8003acc <OSStatReset+0x16c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
#endif

#if OS_MSG_EN > 0u
    OSMsgPool.NbrUsedMax  = 0u;
 80039a6:	4b4a      	ldr	r3, [pc, #296]	; (8003ad0 <OSStatReset+0x170>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	811a      	strh	r2, [r3, #8]
#endif
    CPU_CRITICAL_EXIT();
 80039ac:	f7fd fbf6 	bl	800119c <CPU_IntDisMeasStop>
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7fc fbf5 	bl	80001a0 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
 80039b6:	f7fc fbef 	bl	8000198 <CPU_SR_Save>
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	f7fd fbce 	bl	800115c <CPU_IntDisMeasStart>
    p_tcb = OSTaskDbgListPtr;
 80039c0:	4b44      	ldr	r3, [pc, #272]	; (8003ad4 <OSStatReset+0x174>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	617b      	str	r3, [r7, #20]
    CPU_CRITICAL_EXIT();
 80039c6:	f7fd fbe9 	bl	800119c <CPU_IntDisMeasStop>
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7fc fbe8 	bl	80001a0 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 80039d0:	e03c      	b.n	8003a4c <OSStatReset+0xec>
        CPU_CRITICAL_ENTER();
 80039d2:	f7fc fbe1 	bl	8000198 <CPU_SR_Save>
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	f7fd fbc0 	bl	800115c <CPU_IntDisMeasStart>

#ifdef CPU_CFG_INT_DIS_MEAS_EN
        p_tcb->IntDisTimeMax    = (CPU_TS      )0;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
        p_tcb->SchedLockTimeMax = (CPU_TS      )0;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
#if OS_CFG_TASK_Q_EN > 0u
        p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2200      	movs	r2, #0
 80039f0:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        p_tcb->SemPendTimeMax   = (CPU_TS      )0;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        p_tcb->CtxSwCtr         = (OS_CTR      )0;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
        p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        p_tcb->CyclesTotal      = (OS_CYCLES   )0;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        p_tcb->CyclesStart      =  OS_TS_GET();
 8003a22:	f7fd f88d 	bl	8000b40 <CPU_TS_TmrRd>
 8003a26:	4602      	mov	r2, r0
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif

#if OS_CFG_TASK_Q_EN > 0u
        p_msg_q                 = &p_tcb->MsgQ;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3364      	adds	r3, #100	; 0x64
 8003a32:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2200      	movs	r2, #0
 8003a38:	819a      	strh	r2, [r3, #12]
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003a40:	617b      	str	r3, [r7, #20]
        CPU_CRITICAL_EXIT();
 8003a42:	f7fd fbab 	bl	800119c <CPU_IntDisMeasStop>
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7fc fbaa 	bl	80001a0 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1bf      	bne.n	80039d2 <OSStatReset+0x72>
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 8003a52:	f7fc fba1 	bl	8000198 <CPU_SR_Save>
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	f7fd fb80 	bl	800115c <CPU_IntDisMeasStart>
    p_q = OSQDbgListPtr;
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <OSStatReset+0x178>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 8003a62:	f7fd fb9b 	bl	800119c <CPU_IntDisMeasStop>
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7fc fb9a 	bl	80001a0 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8003a6c:	e012      	b.n	8003a94 <OSStatReset+0x134>
        CPU_CRITICAL_ENTER();
 8003a6e:	f7fc fb93 	bl	8000198 <CPU_SR_Save>
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	f7fd fb72 	bl	800115c <CPU_IntDisMeasStart>
        p_msg_q                = &p_q->MsgQ;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	3320      	adds	r3, #32
 8003a7c:	60bb      	str	r3, [r7, #8]
        p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2200      	movs	r2, #0
 8003a82:	819a      	strh	r2, [r3, #12]
        p_q                    = p_q->DbgNextPtr;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	613b      	str	r3, [r7, #16]
        CPU_CRITICAL_EXIT();
 8003a8a:	f7fd fb87 	bl	800119c <CPU_IntDisMeasStop>
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7fc fb86 	bl	80001a0 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e9      	bne.n	8003a6e <OSStatReset+0x10e>
    }
#endif

    OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
 8003a9a:	f001 fec9 	bl	8005830 <OS_TickListResetPeak>

#if OS_CFG_TMR_EN > 0u
    OS_TmrResetPeak();
 8003a9e:	f002 fb7d 	bl	800619c <OS_TmrResetPeak>
#endif


   *p_err = OS_ERR_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	801a      	strh	r2, [r3, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	2000877c 	.word	0x2000877c
 8003ab4:	20008790 	.word	0x20008790
 8003ab8:	2000878e 	.word	0x2000878e
 8003abc:	20008514 	.word	0x20008514
 8003ac0:	20008b34 	.word	0x20008b34
 8003ac4:	200087a0 	.word	0x200087a0
 8003ac8:	20008a44 	.word	0x20008a44
 8003acc:	20008a5c 	.word	0x20008a5c
 8003ad0:	20008880 	.word	0x20008880
 8003ad4:	2000879c 	.word	0x2000879c
 8003ad8:	20008958 	.word	0x20008958

08003adc <OSStatTaskCPUUsageInit>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    OS_ERR   err;
    OS_TICK  dly;
    CPU_SR_ALLOC();
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
        return;
    }
#endif

#if (OS_CFG_TMR_EN > 0u)
    OSTaskSuspend(&OSTmrTaskTCB, &err);
 8003ae8:	f107 030e 	add.w	r3, r7, #14
 8003aec:	4619      	mov	r1, r3
 8003aee:	4836      	ldr	r0, [pc, #216]	; (8003bc8 <OSStatTaskCPUUsageInit+0xec>)
 8003af0:	f000 ff0e 	bl	8004910 <OSTaskSuspend>
    if (err != OS_ERR_NONE) {
 8003af4:	89fb      	ldrh	r3, [r7, #14]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <OSStatTaskCPUUsageInit+0x26>
       *p_err = err;
 8003afa:	89fa      	ldrh	r2, [r7, #14]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	801a      	strh	r2, [r3, #0]
        return;
 8003b00:	e05e      	b.n	8003bc0 <OSStatTaskCPUUsageInit+0xe4>
    }
#endif

    OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
 8003b02:	f107 030e 	add.w	r3, r7, #14
 8003b06:	461a      	mov	r2, r3
 8003b08:	2100      	movs	r1, #0
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f001 ffe6 	bl	8005adc <OSTimeDly>
              (OS_OPT  )OS_OPT_TIME_DLY,
              (OS_ERR *)&err);
    if (err != OS_ERR_NONE) {
 8003b10:	89fb      	ldrh	r3, [r7, #14]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <OSStatTaskCPUUsageInit+0x42>
       *p_err = err;
 8003b16:	89fa      	ldrh	r2, [r7, #14]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	801a      	strh	r2, [r3, #0]
        return;
 8003b1c:	e050      	b.n	8003bc0 <OSStatTaskCPUUsageInit+0xe4>
    }
    CPU_CRITICAL_ENTER();
 8003b1e:	f7fc fb3b 	bl	8000198 <CPU_SR_Save>
 8003b22:	6138      	str	r0, [r7, #16]
 8003b24:	f7fd fb1a 	bl	800115c <CPU_IntDisMeasStart>
    OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
 8003b28:	4b28      	ldr	r3, [pc, #160]	; (8003bcc <OSStatTaskCPUUsageInit+0xf0>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8003b2e:	f7fd fb35 	bl	800119c <CPU_IntDisMeasStop>
 8003b32:	6938      	ldr	r0, [r7, #16]
 8003b34:	f7fc fb34 	bl	80001a0 <CPU_SR_Restore>

    dly = (OS_TICK)0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8003b3c:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <OSStatTaskCPUUsageInit+0xf4>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <OSStatTaskCPUUsageInit+0xf8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d906      	bls.n	8003b56 <OSStatTaskCPUUsageInit+0x7a>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <OSStatTaskCPUUsageInit+0xf4>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <OSStatTaskCPUUsageInit+0xf8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]
    }
    if (dly == (OS_TICK)0) {
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <OSStatTaskCPUUsageInit+0x8e>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8003b5c:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <OSStatTaskCPUUsageInit+0xf4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <OSStatTaskCPUUsageInit+0xfc>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	08db      	lsrs	r3, r3, #3
 8003b68:	617b      	str	r3, [r7, #20]
    }

    OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
 8003b6a:	f107 030e 	add.w	r3, r7, #14
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2100      	movs	r1, #0
 8003b72:	6978      	ldr	r0, [r7, #20]
 8003b74:	f001 ffb2 	bl	8005adc <OSTimeDly>
              OS_OPT_TIME_DLY,
              &err);

#if (OS_CFG_TMR_EN > 0u)
    OSTaskResume(&OSTmrTaskTCB, &err);
 8003b78:	f107 030e 	add.w	r3, r7, #14
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4812      	ldr	r0, [pc, #72]	; (8003bc8 <OSStatTaskCPUUsageInit+0xec>)
 8003b80:	f000 fce2 	bl	8004548 <OSTaskResume>
    if (err != OS_ERR_NONE) {
 8003b84:	89fb      	ldrh	r3, [r7, #14]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <OSStatTaskCPUUsageInit+0xb6>
       *p_err = err;
 8003b8a:	89fa      	ldrh	r2, [r7, #14]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	801a      	strh	r2, [r3, #0]
        return;
 8003b90:	e016      	b.n	8003bc0 <OSStatTaskCPUUsageInit+0xe4>
    }
#endif

    CPU_CRITICAL_ENTER();
 8003b92:	f7fc fb01 	bl	8000198 <CPU_SR_Save>
 8003b96:	6138      	str	r0, [r7, #16]
 8003b98:	f7fd fae0 	bl	800115c <CPU_IntDisMeasStart>
    OSStatTaskTimeMax = (CPU_TS)0;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <OSStatTaskCPUUsageInit+0x100>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]

    OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <OSStatTaskCPUUsageInit+0xf0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <OSStatTaskCPUUsageInit+0x104>)
 8003ba8:	6013      	str	r3, [r2, #0]
    OSStatTaskRdy     = OS_STATE_RDY;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <OSStatTaskCPUUsageInit+0x108>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
    CPU_CRITICAL_EXIT();
 8003bb0:	f7fd faf4 	bl	800119c <CPU_IntDisMeasStop>
 8003bb4:	6938      	ldr	r0, [r7, #16]
 8003bb6:	f7fc faf3 	bl	80001a0 <CPU_SR_Restore>
   *p_err             = OS_ERR_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	801a      	strh	r2, [r3, #0]
}
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200087b8 	.word	0x200087b8
 8003bcc:	20008518 	.word	0x20008518
 8003bd0:	080064e4 	.word	0x080064e4
 8003bd4:	080064d0 	.word	0x080064d0
 8003bd8:	cccccccd 	.word	0xcccccccd
 8003bdc:	20008514 	.word	0x20008514
 8003be0:	20008a34 	.word	0x20008a34
 8003be4:	200086a5 	.word	0x200086a5

08003be8 <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b090      	sub	sp, #64	; 0x40
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
    OS_TICK      ctr_div;
    OS_ERR       err;
    OS_TICK      dly;
    CPU_TS       ts_start;
    CPU_TS       ts_end;
    CPU_SR_ALLOC();
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]



    p_arg = p_arg;                                          /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 8003bf4:	e008      	b.n	8003c08 <OS_StatTask+0x20>
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
 8003bf6:	4ba2      	ldr	r3, [pc, #648]	; (8003e80 <OS_StatTask+0x298>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	f107 020a 	add.w	r2, r7, #10
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 ff6a 	bl	8005adc <OSTimeDly>
    while (OSStatTaskRdy != DEF_TRUE) {
 8003c08:	4b9e      	ldr	r3, [pc, #632]	; (8003e84 <OS_StatTask+0x29c>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d1f2      	bne.n	8003bf6 <OS_StatTask+0xe>
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                      /* Reset statistics                                       */
 8003c10:	f107 030a 	add.w	r3, r7, #10
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fea3 	bl	8003960 <OSStatReset>

    dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8003c1e:	4b9a      	ldr	r3, [pc, #616]	; (8003e88 <OS_StatTask+0x2a0>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b97      	ldr	r3, [pc, #604]	; (8003e80 <OS_StatTask+0x298>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d906      	bls.n	8003c38 <OS_StatTask+0x50>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8003c2a:	4b97      	ldr	r3, [pc, #604]	; (8003e88 <OS_StatTask+0x2a0>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b94      	ldr	r3, [pc, #592]	; (8003e80 <OS_StatTask+0x298>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	61fb      	str	r3, [r7, #28]
    }
    if (dly == (OS_TICK)0) {
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <OS_StatTask+0x64>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8003c3e:	4b92      	ldr	r3, [pc, #584]	; (8003e88 <OS_StatTask+0x2a0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a92      	ldr	r2, [pc, #584]	; (8003e8c <OS_StatTask+0x2a4>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	08db      	lsrs	r3, r3, #3
 8003c4a:	61fb      	str	r3, [r7, #28]
    }

    while (DEF_ON) {
        ts_start        = OS_TS_GET();
 8003c4c:	f7fc ff78 	bl	8000b40 <CPU_TS_TmrRd>
 8003c50:	6178      	str	r0, [r7, #20]
#ifdef  CPU_CFG_INT_DIS_MEAS_EN
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
 8003c52:	f7fd fa69 	bl	8001128 <CPU_IntDisMeasMaxGet>
 8003c56:	4602      	mov	r2, r0
 8003c58:	4b8d      	ldr	r3, [pc, #564]	; (8003e90 <OS_StatTask+0x2a8>)
 8003c5a:	601a      	str	r2, [r3, #0]
#endif

        CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
 8003c5c:	f7fc fa9c 	bl	8000198 <CPU_SR_Save>
 8003c60:	61b8      	str	r0, [r7, #24]
 8003c62:	f7fd fa7b 	bl	800115c <CPU_IntDisMeasStart>
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
 8003c66:	4b8b      	ldr	r3, [pc, #556]	; (8003e94 <OS_StatTask+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a8b      	ldr	r2, [pc, #556]	; (8003e98 <OS_StatTask+0x2b0>)
 8003c6c:	6013      	str	r3, [r2, #0]
        OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
 8003c6e:	4b89      	ldr	r3, [pc, #548]	; (8003e94 <OS_StatTask+0x2ac>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
        CPU_CRITICAL_EXIT();
 8003c74:	f7fd fa92 	bl	800119c <CPU_IntDisMeasStop>
 8003c78:	69b8      	ldr	r0, [r7, #24]
 8003c7a:	f7fc fa91 	bl	80001a0 <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
 8003c7e:	4b87      	ldr	r3, [pc, #540]	; (8003e9c <OS_StatTask+0x2b4>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b85      	ldr	r3, [pc, #532]	; (8003e98 <OS_StatTask+0x2b0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d94f      	bls.n	8003d2a <OS_StatTask+0x142>
            if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
 8003c8a:	4b84      	ldr	r3, [pc, #528]	; (8003e9c <OS_StatTask+0x2b4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a84      	ldr	r2, [pc, #528]	; (8003ea0 <OS_StatTask+0x2b8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d805      	bhi.n	8003ca0 <OS_StatTask+0xb8>
                ctr_mult = 10000u;
 8003c94:	f242 7310 	movw	r3, #10000	; 0x2710
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =     1u;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	e024      	b.n	8003cea <OS_StatTask+0x102>
            } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
 8003ca0:	4b7e      	ldr	r3, [pc, #504]	; (8003e9c <OS_StatTask+0x2b4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a7f      	ldr	r2, [pc, #508]	; (8003ea4 <OS_StatTask+0x2bc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d805      	bhi.n	8003cb6 <OS_StatTask+0xce>
                ctr_mult =  1000u;
 8003caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =    10u;
 8003cb0:	230a      	movs	r3, #10
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	e019      	b.n	8003cea <OS_StatTask+0x102>
            } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
 8003cb6:	4b79      	ldr	r3, [pc, #484]	; (8003e9c <OS_StatTask+0x2b4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7b      	ldr	r2, [pc, #492]	; (8003ea8 <OS_StatTask+0x2c0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d804      	bhi.n	8003cca <OS_StatTask+0xe2>
                ctr_mult =   100u;
 8003cc0:	2364      	movs	r3, #100	; 0x64
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =   100u;
 8003cc4:	2364      	movs	r3, #100	; 0x64
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	e00f      	b.n	8003cea <OS_StatTask+0x102>
            } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
 8003cca:	4b74      	ldr	r3, [pc, #464]	; (8003e9c <OS_StatTask+0x2b4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a77      	ldr	r2, [pc, #476]	; (8003eac <OS_StatTask+0x2c4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d805      	bhi.n	8003ce0 <OS_StatTask+0xf8>
                ctr_mult =    10u;
 8003cd4:	230a      	movs	r3, #10
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  =  1000u;
 8003cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	e004      	b.n	8003cea <OS_StatTask+0x102>
            } else {                                                                 /*  400,000,000 and up           */
                ctr_mult =     1u;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
                ctr_div  = 10000u;
 8003ce4:	f242 7310 	movw	r3, #10000	; 0x2710
 8003ce8:	623b      	str	r3, [r7, #32]
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
 8003cea:	4b6c      	ldr	r3, [pc, #432]	; (8003e9c <OS_StatTask+0x2b4>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	613b      	str	r3, [r7, #16]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
 8003cf6:	4b68      	ldr	r3, [pc, #416]	; (8003e98 <OS_StatTask+0x2b0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfc:	fb02 f203 	mul.w	r2, r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8003d0c:	3310      	adds	r3, #16
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	4b67      	ldr	r3, [pc, #412]	; (8003eb0 <OS_StatTask+0x2c8>)
 8003d12:	801a      	strh	r2, [r3, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8003d14:	4b67      	ldr	r3, [pc, #412]	; (8003eb4 <OS_StatTask+0x2cc>)
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	4b65      	ldr	r3, [pc, #404]	; (8003eb0 <OS_StatTask+0x2c8>)
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d208      	bcs.n	8003d32 <OS_StatTask+0x14a>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 8003d20:	4b63      	ldr	r3, [pc, #396]	; (8003eb0 <OS_StatTask+0x2c8>)
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <OS_StatTask+0x2cc>)
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	e003      	b.n	8003d32 <OS_StatTask+0x14a>
            }
        } else {
            OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
 8003d2a:	4b61      	ldr	r3, [pc, #388]	; (8003eb0 <OS_StatTask+0x2c8>)
 8003d2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d30:	801a      	strh	r2, [r3, #0]
        }

        OSStatTaskHook();                                   /* Invoke user definable hook                             */
 8003d32:	f7fd fbdd 	bl	80014f0 <OSStatTaskHook>


#if OS_CFG_DBG_EN > 0u
#if OS_CFG_TASK_PROFILE_EN > 0u
        cycles_total = (OS_CYCLES)0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38

        CPU_CRITICAL_ENTER();
 8003d3a:	f7fc fa2d 	bl	8000198 <CPU_SR_Save>
 8003d3e:	61b8      	str	r0, [r7, #24]
 8003d40:	f7fd fa0c 	bl	800115c <CPU_IntDisMeasStart>
        p_tcb = OSTaskDbgListPtr;
 8003d44:	4b5c      	ldr	r3, [pc, #368]	; (8003eb8 <OS_StatTask+0x2d0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 8003d4a:	f7fd fa27 	bl	800119c <CPU_IntDisMeasStop>
 8003d4e:	69b8      	ldr	r0, [r7, #24]
 8003d50:	f7fc fa26 	bl	80001a0 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 8003d54:	e05b      	b.n	8003e0e <OS_StatTask+0x226>
            OS_CRITICAL_ENTER();
 8003d56:	f7fc fa1f 	bl	8000198 <CPU_SR_Save>
 8003d5a:	61b8      	str	r0, [r7, #24]
 8003d5c:	f7fd f9fe 	bl	800115c <CPU_IntDisMeasStart>
 8003d60:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <OS_StatTask+0x2d4>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	4b54      	ldr	r3, [pc, #336]	; (8003ebc <OS_StatTask+0x2d4>)
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	4b53      	ldr	r3, [pc, #332]	; (8003ebc <OS_StatTask+0x2d4>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <OS_StatTask+0x190>
 8003d74:	f7fe fc58 	bl	8002628 <OS_SchedLockTimeMeasStart>
 8003d78:	f7fd fa10 	bl	800119c <CPU_IntDisMeasStop>
 8003d7c:	69b8      	ldr	r0, [r7, #24]
 8003d7e:	f7fc fa0f 	bl	80001a0 <CPU_SR_Restore>
            p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            OS_CRITICAL_EXIT();
 8003d96:	f7fc f9ff 	bl	8000198 <CPU_SR_Save>
 8003d9a:	61b8      	str	r0, [r7, #24]
 8003d9c:	f7fd f9de 	bl	800115c <CPU_IntDisMeasStart>
 8003da0:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <OS_StatTask+0x2d4>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b44      	ldr	r3, [pc, #272]	; (8003ebc <OS_StatTask+0x2d4>)
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <OS_StatTask+0x2d4>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d113      	bne.n	8003ddc <OS_StatTask+0x1f4>
 8003db4:	f7fe fc4a 	bl	800264c <OS_SchedLockTimeMeasStop>
 8003db8:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <OS_StatTask+0x2d8>)
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <OS_StatTask+0x1e8>
 8003dc0:	f7fd f9ec 	bl	800119c <CPU_IntDisMeasStop>
 8003dc4:	69b8      	ldr	r0, [r7, #24]
 8003dc6:	f7fc f9eb 	bl	80001a0 <CPU_SR_Restore>
 8003dca:	f7fe fbfd 	bl	80025c8 <OS_Sched0>
 8003dce:	e00a      	b.n	8003de6 <OS_StatTask+0x1fe>
 8003dd0:	f7fd f9e4 	bl	800119c <CPU_IntDisMeasStop>
 8003dd4:	69b8      	ldr	r0, [r7, #24]
 8003dd6:	f7fc f9e3 	bl	80001a0 <CPU_SR_Restore>
 8003dda:	e004      	b.n	8003de6 <OS_StatTask+0x1fe>
 8003ddc:	f7fd f9de 	bl	800119c <CPU_IntDisMeasStop>
 8003de0:	69b8      	ldr	r0, [r7, #24]
 8003de2:	f7fc f9dd 	bl	80001a0 <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dee:	4413      	add	r3, r2
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38

            CPU_CRITICAL_ENTER();
 8003df2:	f7fc f9d1 	bl	8000198 <CPU_SR_Save>
 8003df6:	61b8      	str	r0, [r7, #24]
 8003df8:	f7fd f9b0 	bl	800115c <CPU_IntDisMeasStart>
            p_tcb                  = p_tcb->DbgNextPtr;
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 8003e04:	f7fd f9ca 	bl	800119c <CPU_IntDisMeasStop>
 8003e08:	69b8      	ldr	r0, [r7, #24]
 8003e0a:	f7fc f9c9 	bl	80001a0 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1a0      	bne.n	8003d56 <OS_StatTask+0x16e>
#endif


#if OS_CFG_TASK_PROFILE_EN > 0u
                                                            /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
        if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d054      	beq.n	8003ec4 <OS_StatTask+0x2dc>
            if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	4a20      	ldr	r2, [pc, #128]	; (8003ea0 <OS_StatTask+0x2b8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d805      	bhi.n	8003e2e <OS_StatTask+0x246>
                cycles_mult = 10000u;
 8003e22:	f242 7310 	movw	r3, #10000	; 0x2710
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =     1u;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2c:	e021      	b.n	8003e72 <OS_StatTask+0x28a>
            } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	4a1c      	ldr	r2, [pc, #112]	; (8003ea4 <OS_StatTask+0x2bc>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d805      	bhi.n	8003e42 <OS_StatTask+0x25a>
                cycles_mult =  1000u;
 8003e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =    10u;
 8003e3c:	230a      	movs	r3, #10
 8003e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e40:	e017      	b.n	8003e72 <OS_StatTask+0x28a>
            } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	4a18      	ldr	r2, [pc, #96]	; (8003ea8 <OS_StatTask+0x2c0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d804      	bhi.n	8003e54 <OS_StatTask+0x26c>
                cycles_mult =   100u;
 8003e4a:	2364      	movs	r3, #100	; 0x64
 8003e4c:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =   100u;
 8003e4e:	2364      	movs	r3, #100	; 0x64
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
 8003e52:	e00e      	b.n	8003e72 <OS_StatTask+0x28a>
            } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	4a15      	ldr	r2, [pc, #84]	; (8003eac <OS_StatTask+0x2c4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d805      	bhi.n	8003e68 <OS_StatTask+0x280>
                cycles_mult =    10u;
 8003e5c:	230a      	movs	r3, #10
 8003e5e:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  =  1000u;
 8003e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
 8003e66:	e004      	b.n	8003e72 <OS_StatTask+0x28a>
            } else {                                                                 /*  400,000,000 and up           */
                cycles_mult =     1u;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	633b      	str	r3, [r7, #48]	; 0x30
                cycles_div  = 10000u;
 8003e6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
            }
            cycles_max  = cycles_total / cycles_div;
 8003e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7c:	e026      	b.n	8003ecc <OS_StatTask+0x2e4>
 8003e7e:	bf00      	nop
 8003e80:	080064d0 	.word	0x080064d0
 8003e84:	200086a5 	.word	0x200086a5
 8003e88:	080064e4 	.word	0x080064e4
 8003e8c:	cccccccd 	.word	0xcccccccd
 8003e90:	20008a44 	.word	0x20008a44
 8003e94:	20008518 	.word	0x20008518
 8003e98:	20008a4c 	.word	0x20008a4c
 8003e9c:	20008a34 	.word	0x20008a34
 8003ea0:	00061a7f 	.word	0x00061a7f
 8003ea4:	003d08ff 	.word	0x003d08ff
 8003ea8:	026259ff 	.word	0x026259ff
 8003eac:	17d783ff 	.word	0x17d783ff
 8003eb0:	200087ac 	.word	0x200087ac
 8003eb4:	2000878e 	.word	0x2000878e
 8003eb8:	2000879c 	.word	0x2000879c
 8003ebc:	2000850c 	.word	0x2000850c
 8003ec0:	20008b44 	.word	0x20008b44
        } else {
            cycles_mult = 0u;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	633b      	str	r3, [r7, #48]	; 0x30
            cycles_max  = 1u;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif
        CPU_CRITICAL_ENTER();
 8003ecc:	f7fc f964 	bl	8000198 <CPU_SR_Save>
 8003ed0:	61b8      	str	r0, [r7, #24]
 8003ed2:	f7fd f943 	bl	800115c <CPU_IntDisMeasStart>
        p_tcb = OSTaskDbgListPtr;
 8003ed6:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <OS_StatTask+0x3bc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 8003edc:	f7fd f95e 	bl	800119c <CPU_IntDisMeasStop>
 8003ee0:	69b8      	ldr	r0, [r7, #24]
 8003ee2:	f7fc f95d 	bl	80001a0 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8003ee6:	e038      	b.n	8003f5a <OS_StatTask+0x372>
#if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef0:	fb02 f203 	mul.w	r2, r2, r3
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efa:	87fb      	strh	r3, [r7, #62]	; 0x3e
            if (usage > 10000u) {
 8003efc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003efe:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d902      	bls.n	8003f0c <OS_StatTask+0x324>
                usage = 10000u;
 8003f06:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }
            p_tcb->CPUUsage = usage;
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003f10:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8003f1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d903      	bls.n	8003f28 <OS_StatTask+0x340>
                p_tcb->CPUUsageMax = usage;
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003f24:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
            }
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
            OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	f103 02ac 	add.w	r2, r3, #172	; 0xac
 8003f34:	f107 030a 	add.w	r3, r7, #10
 8003f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f3a:	f000 fc69 	bl	8004810 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 8003f3e:	f7fc f92b 	bl	8000198 <CPU_SR_Save>
 8003f42:	61b8      	str	r0, [r7, #24]
 8003f44:	f7fd f90a 	bl	800115c <CPU_IntDisMeasStart>
            p_tcb = p_tcb->DbgNextPtr;
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
            CPU_CRITICAL_EXIT();
 8003f50:	f7fd f924 	bl	800119c <CPU_IntDisMeasStop>
 8003f54:	69b8      	ldr	r0, [r7, #24]
 8003f56:	f7fc f923 	bl	80001a0 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1c3      	bne.n	8003ee8 <OS_StatTask+0x300>
        }
#endif

        if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <OS_StatTask+0x3c0>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d107      	bne.n	8003f78 <OS_StatTask+0x390>
            OSStatResetFlag  = DEF_FALSE;
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <OS_StatTask+0x3c0>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
            OSStatReset(&err);
 8003f6e:	f107 030a 	add.w	r3, r7, #10
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff fcf4 	bl	8003960 <OSStatReset>
        }

        ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
 8003f78:	f7fc fde2 	bl	8000b40 <CPU_TS_TmrRd>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	60fb      	str	r3, [r7, #12]
        if (OSStatTaskTimeMax < ts_end) {
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <OS_StatTask+0x3c4>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d202      	bcs.n	8003f94 <OS_StatTask+0x3ac>
            OSStatTaskTimeMax = ts_end;
 8003f8e:	4a07      	ldr	r2, [pc, #28]	; (8003fac <OS_StatTask+0x3c4>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6013      	str	r3, [r2, #0]
        }

        OSTimeDly(dly,
 8003f94:	f107 030a 	add.w	r3, r7, #10
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	69f8      	ldr	r0, [r7, #28]
 8003f9e:	f001 fd9d 	bl	8005adc <OSTimeDly>
        ts_start        = OS_TS_GET();
 8003fa2:	e653      	b.n	8003c4c <OS_StatTask+0x64>
 8003fa4:	2000879c 	.word	0x2000879c
 8003fa8:	20008a60 	.word	0x20008a60
 8003fac:	20008514 	.word	0x20008514

08003fb0 <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b08d      	sub	sp, #52	; 0x34
 8003fb4:	af0a      	add	r7, sp, #40	; 0x28
 8003fb6:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSStatTaskCtr    = (OS_TICK)0;
 8003fb8:	4b25      	ldr	r3, [pc, #148]	; (8004050 <OS_StatTaskInit+0xa0>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrRun = (OS_TICK)0;
 8003fbe:	4b25      	ldr	r3, [pc, #148]	; (8004054 <OS_StatTaskInit+0xa4>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
    OSStatTaskCtrMax = (OS_TICK)0;
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <OS_StatTaskInit+0xa8>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <OS_StatTaskInit+0xac>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
    OSStatResetFlag  = DEF_FALSE;
 8003fd0:	4b23      	ldr	r3, [pc, #140]	; (8004060 <OS_StatTaskInit+0xb0>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]

                                                            /* ---------------- CREATE THE STAT TASK ---------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 8003fd6:	4b23      	ldr	r3, [pc, #140]	; (8004064 <OS_StatTaskInit+0xb4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d104      	bne.n	8003fe8 <OS_StatTaskInit+0x38>
       *p_err = OS_ERR_STAT_STK_INVALID;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f646 622b 	movw	r2, #28203	; 0x6e2b
 8003fe4:	801a      	strh	r2, [r3, #0]
        return;
 8003fe6:	e02f      	b.n	8004048 <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <OS_StatTaskInit+0xb8>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b1f      	ldr	r3, [pc, #124]	; (800406c <OS_StatTaskInit+0xbc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d204      	bcs.n	8003ffe <OS_StatTaskInit+0x4e>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f646 622c 	movw	r2, #28204	; 0x6e2c
 8003ffa:	801a      	strh	r2, [r3, #0]
        return;
 8003ffc:	e024      	b.n	8004048 <OS_StatTaskInit+0x98>
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <OS_StatTaskInit+0xc0>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b1e      	cmp	r3, #30
 8004004:	d904      	bls.n	8004010 <OS_StatTaskInit+0x60>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f646 622a 	movw	r2, #28202	; 0x6e2a
 800400c:	801a      	strh	r2, [r3, #0]
        return;
 800400e:	e01b      	b.n	8004048 <OS_StatTaskInit+0x98>
    }

    OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
 8004010:	4b17      	ldr	r3, [pc, #92]	; (8004070 <OS_StatTaskInit+0xc0>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	4a13      	ldr	r2, [pc, #76]	; (8004064 <OS_StatTaskInit+0xb4>)
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	4916      	ldr	r1, [pc, #88]	; (8004074 <OS_StatTaskInit+0xc4>)
 800401a:	6809      	ldr	r1, [r1, #0]
 800401c:	4812      	ldr	r0, [pc, #72]	; (8004068 <OS_StatTaskInit+0xb8>)
 800401e:	6800      	ldr	r0, [r0, #0]
 8004020:	687c      	ldr	r4, [r7, #4]
 8004022:	9408      	str	r4, [sp, #32]
 8004024:	2403      	movs	r4, #3
 8004026:	9407      	str	r4, [sp, #28]
 8004028:	2400      	movs	r4, #0
 800402a:	9406      	str	r4, [sp, #24]
 800402c:	2400      	movs	r4, #0
 800402e:	9405      	str	r4, [sp, #20]
 8004030:	2400      	movs	r4, #0
 8004032:	9404      	str	r4, [sp, #16]
 8004034:	9003      	str	r0, [sp, #12]
 8004036:	9102      	str	r1, [sp, #8]
 8004038:	9201      	str	r2, [sp, #4]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2300      	movs	r3, #0
 800403e:	4a0e      	ldr	r2, [pc, #56]	; (8004078 <OS_StatTaskInit+0xc8>)
 8004040:	490e      	ldr	r1, [pc, #56]	; (800407c <OS_StatTaskInit+0xcc>)
 8004042:	480f      	ldr	r0, [pc, #60]	; (8004080 <OS_StatTaskInit+0xd0>)
 8004044:	f000 f81e 	bl	8004084 <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	bf00      	nop
 8004050:	20008518 	.word	0x20008518
 8004054:	20008a4c 	.word	0x20008a4c
 8004058:	20008a34 	.word	0x20008a34
 800405c:	200086a5 	.word	0x200086a5
 8004060:	20008a60 	.word	0x20008a60
 8004064:	080064d4 	.word	0x080064d4
 8004068:	080064dc 	.word	0x080064dc
 800406c:	080064e0 	.word	0x080064e0
 8004070:	080064cc 	.word	0x080064cc
 8004074:	080064d8 	.word	0x080064d8
 8004078:	08003be9 	.word	0x08003be9
 800407c:	08006434 	.word	0x08006434
 8004080:	20008a68 	.word	0x20008a68

08004084 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	; 0x30
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
    OS_TLS_ID      id;
#endif

    CPU_STK       *p_sp;
    CPU_STK       *p_stk_limit;
    CPU_SR_ALLOC();
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
 8004096:	4ba5      	ldr	r3, [pc, #660]	; (800432c <OSTaskCreate+0x2a8>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <OSTaskCreate+0x24>
       *p_err = OS_ERR_TASK_CREATE_ISR;
 800409e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a0:	f247 124a 	movw	r2, #29002	; 0x714a
 80040a4:	801a      	strh	r2, [r3, #0]
        return;
 80040a6:	e13e      	b.n	8004326 <OSTaskCreate+0x2a2>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u                                  /* ---------------- VALIDATE ARGUMENTS ------------------ */
    if (p_tcb == (OS_TCB *)0) {                             /* User must supply a valid OS_TCB                        */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <OSTaskCreate+0x34>
       *p_err = OS_ERR_TCB_INVALID;
 80040ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b0:	f247 12ad 	movw	r2, #29101	; 0x71ad
 80040b4:	801a      	strh	r2, [r3, #0]
        return;
 80040b6:	e136      	b.n	8004326 <OSTaskCreate+0x2a2>
    }
    if (p_task == (OS_TASK_PTR)0) {                         /* User must supply a valid task                          */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <OSTaskCreate+0x44>
       *p_err = OS_ERR_TASK_INVALID;
 80040be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c0:	f247 124f 	movw	r2, #29007	; 0x714f
 80040c4:	801a      	strh	r2, [r3, #0]
        return;
 80040c6:	e12e      	b.n	8004326 <OSTaskCreate+0x2a2>
    }
    if (p_stk_base == (CPU_STK *)0) {                       /* User must supply a valid stack base address            */
 80040c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <OSTaskCreate+0x54>
       *p_err = OS_ERR_STK_INVALID;
 80040ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d0:	f646 622f 	movw	r2, #28207	; 0x6e2f
 80040d4:	801a      	strh	r2, [r3, #0]
        return;
 80040d6:	e126      	b.n	8004326 <OSTaskCreate+0x2a2>
    }
    if (stk_size < OSCfg_StkSizeMin) {                      /* User must supply a valid minimum stack size            */
 80040d8:	4b95      	ldr	r3, [pc, #596]	; (8004330 <OSTaskCreate+0x2ac>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d204      	bcs.n	80040ec <OSTaskCreate+0x68>
       *p_err = OS_ERR_STK_SIZE_INVALID;
 80040e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e4:	f646 6230 	movw	r2, #28208	; 0x6e30
 80040e8:	801a      	strh	r2, [r3, #0]
        return;
 80040ea:	e11c      	b.n	8004326 <OSTaskCreate+0x2a2>
    }
    if (stk_limit >= stk_size) {                            /* User must supply a valid stack limit                   */
 80040ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d304      	bcc.n	80040fe <OSTaskCreate+0x7a>
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 80040f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f6:	f646 6231 	movw	r2, #28209	; 0x6e31
 80040fa:	801a      	strh	r2, [r3, #0]
        return;
 80040fc:	e113      	b.n	8004326 <OSTaskCreate+0x2a2>
    }
    if (prio >= OS_CFG_PRIO_MAX) {                          /* Priority must be within 0 and OS_CFG_PRIO_MAX-1        */
 80040fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004102:	2b1f      	cmp	r3, #31
 8004104:	d904      	bls.n	8004110 <OSTaskCreate+0x8c>
       *p_err = OS_ERR_PRIO_INVALID;
 8004106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004108:	f246 2273 	movw	r2, #25203	; 0x6273
 800410c:	801a      	strh	r2, [r3, #0]
        return;
 800410e:	e10a      	b.n	8004326 <OSTaskCreate+0x2a2>
    }
#endif

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (prio == (OS_PRIO)0) {
 8004110:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004114:	2b00      	cmp	r3, #0
 8004116:	d108      	bne.n	800412a <OSTaskCreate+0xa6>
        if (p_tcb != &OSIntQTaskTCB) {
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4a86      	ldr	r2, [pc, #536]	; (8004334 <OSTaskCreate+0x2b0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <OSTaskCreate+0xa6>
           *p_err = OS_ERR_PRIO_INVALID;                    /* Not allowed to use priority 0                          */
 8004120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004122:	f246 2273 	movw	r2, #25203	; 0x6273
 8004126:	801a      	strh	r2, [r3, #0]
            return;
 8004128:	e0fd      	b.n	8004326 <OSTaskCreate+0x2a2>
        }
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 800412a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800412e:	2b1f      	cmp	r3, #31
 8004130:	d108      	bne.n	8004144 <OSTaskCreate+0xc0>
        if (p_tcb != &OSIdleTaskTCB) {
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4a80      	ldr	r2, [pc, #512]	; (8004338 <OSTaskCreate+0x2b4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <OSTaskCreate+0xc0>
           *p_err = OS_ERR_PRIO_INVALID;                    /* Not allowed to use same priority as idle task          */
 800413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413c:	f246 2273 	movw	r2, #25203	; 0x6273
 8004140:	801a      	strh	r2, [r3, #0]
            return;
 8004142:	e0f0      	b.n	8004326 <OSTaskCreate+0x2a2>
        }
    }

    OS_TaskInitTCB(p_tcb);                                  /* Initialize the TCB to default values                   */
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fca1 	bl	8004a8c <OS_TaskInitTCB>

   *p_err = OS_ERR_NONE;
 800414a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414c:	2200      	movs	r2, #0
 800414e:	801a      	strh	r2, [r3, #0]
                                                            /* --------------- CLEAR THE TASK'S STACK --------------- */
    if ((opt & OS_OPT_TASK_STK_CHK) != (OS_OPT)0) {         /* See if stack checking has been enabled                 */
 8004150:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d017      	beq.n	800418c <OSTaskCreate+0x108>
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 800415c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d011      	beq.n	800418c <OSTaskCreate+0x108>
            p_sp = p_stk_base;
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
 8004170:	e008      	b.n	8004184 <OSTaskCreate+0x100>
               *p_sp = (CPU_STK)0;                          /* Clear from bottom of stack and up!                     */
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
                p_sp++;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	3304      	adds	r3, #4
 800417c:	61fb      	str	r3, [r7, #28]
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	3301      	adds	r3, #1
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
 8004184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004188:	429a      	cmp	r2, r3
 800418a:	d3f2      	bcc.n	8004172 <OSTaskCreate+0xee>
            }
        }
    }
                                                            /* ------- INITIALIZE THE STACK FRAME OF THE TASK ------- */
#if (CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO)
    p_stk_limit = p_stk_base + stk_limit;
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004192:	4413      	add	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
#else
    p_stk_limit = p_stk_base + (stk_size - 1u) - stk_limit;
#endif

    p_sp = OSTaskStkInit(p_task,
 8004196:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041a4:	6839      	ldr	r1, [r7, #0]
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd f9e6 	bl	8001578 <OSTaskStkInit>
 80041ac:	61f8      	str	r0, [r7, #28]
                         p_stk_limit,
                         stk_size,
                         opt);

                                                            /* -------------- INITIALIZE THE TCB FIELDS ------------- */
    p_tcb->TaskEntryAddr = p_task;                          /* Save task entry point address                          */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	62da      	str	r2, [r3, #44]	; 0x2c

    p_tcb->NamePtr       = p_name;                          /* Save task name                                         */
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	621a      	str	r2, [r3, #32]

    p_tcb->Prio          = prio;                            /* Save the task's priority                               */
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80041c6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

    p_tcb->StkPtr        = p_sp;                            /* Save the new top-of-stack pointer                      */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	609a      	str	r2, [r3, #8]

    p_tcb->TimeQuanta    = time_quanta;                     /* Save the #ticks for time slice (0 means not sliced)    */
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    if (time_quanta == (OS_TICK)0) {
 80041dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <OSTaskCreate+0x168>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 80041e2:	4b56      	ldr	r3, [pc, #344]	; (800433c <OSTaskCreate+0x2b8>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	659a      	str	r2, [r3, #88]	; 0x58
 80041ea:	e002      	b.n	80041f2 <OSTaskCreate+0x16e>
    } else {
        p_tcb->TimeQuantaCtr = time_quanta;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041f0:	659a      	str	r2, [r3, #88]	; 0x58
    }
#endif
    p_tcb->ExtPtr        = p_ext;                           /* Save pointer to TCB extension                          */
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f6:	605a      	str	r2, [r3, #4]
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004202:	639a      	str	r2, [r3, #56]	; 0x38
    p_tcb->Opt           = opt;                             /* Save task options                                      */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800420a:	879a      	strh	r2, [r3, #60]	; 0x3c

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 800420c:	2300      	movs	r3, #0
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e00c      	b.n	800422e <OSTaskCreate+0x1aa>
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 8004214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	331e      	adds	r3, #30
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	2200      	movs	r2, #0
 8004222:	605a      	str	r2, [r3, #4]
    for (reg_nbr = 0u; reg_nbr < OS_CFG_TASK_REG_TBL_SIZE; reg_nbr++) {
 8004224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004228:	3301      	adds	r3, #1
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ee      	beq.n	8004214 <OSTaskCreate+0x190>
    }
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3364      	adds	r3, #100	; 0x64
 800423a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff f8cd 	bl	80033e0 <OS_MsgQInit>
                q_size);
#else
    (void)&q_size;
#endif

    OSTaskCreateHook(p_tcb);                                /* Call user defined hook                                 */
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7fd f960 	bl	800150c <OSTaskCreateHook>
        p_tcb->TLS_Tbl[id] = (OS_TLS)0;
    }
    OS_TLS_TaskCreate(p_tcb);                               /* Call TLS hook                                          */
#endif
                                                            /* --------------- ADD TASK TO READY LIST --------------- */
    OS_CRITICAL_ENTER();
 800424c:	f7fb ffa4 	bl	8000198 <CPU_SR_Save>
 8004250:	61b8      	str	r0, [r7, #24]
 8004252:	f7fc ff83 	bl	800115c <CPU_IntDisMeasStart>
 8004256:	4b3a      	ldr	r3, [pc, #232]	; (8004340 <OSTaskCreate+0x2bc>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4b38      	ldr	r3, [pc, #224]	; (8004340 <OSTaskCreate+0x2bc>)
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	4b37      	ldr	r3, [pc, #220]	; (8004340 <OSTaskCreate+0x2bc>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <OSTaskCreate+0x1ea>
 800426a:	f7fe f9dd 	bl	8002628 <OS_SchedLockTimeMeasStart>
 800426e:	f7fc ff95 	bl	800119c <CPU_IntDisMeasStop>
 8004272:	69b8      	ldr	r0, [r7, #24]
 8004274:	f7fb ff94 	bl	80001a0 <CPU_SR_Restore>
    OS_PrioInsert(p_tcb->Prio);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff f9a2 	bl	80035c8 <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7fe f8bf 	bl	8002408 <OS_RdyListInsertTail>

#if OS_CFG_DBG_EN > 0u
    OS_TaskDbgListAdd(p_tcb);
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fb7a 	bl	8004984 <OS_TaskDbgListAdd>
#endif

    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8004290:	4b2c      	ldr	r3, [pc, #176]	; (8004344 <OSTaskCreate+0x2c0>)
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	3301      	adds	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <OSTaskCreate+0x2c0>)
 800429a:	801a      	strh	r2, [r3, #0]

    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 800429c:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <OSTaskCreate+0x2c4>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d028      	beq.n	80042f6 <OSTaskCreate+0x272>
        OS_CRITICAL_EXIT();
 80042a4:	f7fb ff78 	bl	8000198 <CPU_SR_Save>
 80042a8:	61b8      	str	r0, [r7, #24]
 80042aa:	f7fc ff57 	bl	800115c <CPU_IntDisMeasStart>
 80042ae:	4b24      	ldr	r3, [pc, #144]	; (8004340 <OSTaskCreate+0x2bc>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	4b22      	ldr	r3, [pc, #136]	; (8004340 <OSTaskCreate+0x2bc>)
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	4b21      	ldr	r3, [pc, #132]	; (8004340 <OSTaskCreate+0x2bc>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d113      	bne.n	80042ea <OSTaskCreate+0x266>
 80042c2:	f7fe f9c3 	bl	800264c <OS_SchedLockTimeMeasStop>
 80042c6:	4b21      	ldr	r3, [pc, #132]	; (800434c <OSTaskCreate+0x2c8>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <OSTaskCreate+0x25a>
 80042ce:	f7fc ff65 	bl	800119c <CPU_IntDisMeasStop>
 80042d2:	69b8      	ldr	r0, [r7, #24]
 80042d4:	f7fb ff64 	bl	80001a0 <CPU_SR_Restore>
 80042d8:	f7fe f976 	bl	80025c8 <OS_Sched0>
        return;
 80042dc:	e023      	b.n	8004326 <OSTaskCreate+0x2a2>
        OS_CRITICAL_EXIT();
 80042de:	f7fc ff5d 	bl	800119c <CPU_IntDisMeasStop>
 80042e2:	69b8      	ldr	r0, [r7, #24]
 80042e4:	f7fb ff5c 	bl	80001a0 <CPU_SR_Restore>
        return;
 80042e8:	e01d      	b.n	8004326 <OSTaskCreate+0x2a2>
        OS_CRITICAL_EXIT();
 80042ea:	f7fc ff57 	bl	800119c <CPU_IntDisMeasStop>
 80042ee:	69b8      	ldr	r0, [r7, #24]
 80042f0:	f7fb ff56 	bl	80001a0 <CPU_SR_Restore>
        return;
 80042f4:	e017      	b.n	8004326 <OSTaskCreate+0x2a2>
    }

    OS_CRITICAL_EXIT_NO_SCHED();
 80042f6:	f7fb ff4f 	bl	8000198 <CPU_SR_Save>
 80042fa:	61b8      	str	r0, [r7, #24]
 80042fc:	f7fc ff2e 	bl	800115c <CPU_IntDisMeasStart>
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <OSTaskCreate+0x2bc>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	3b01      	subs	r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <OSTaskCreate+0x2bc>)
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <OSTaskCreate+0x2bc>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <OSTaskCreate+0x294>
 8004314:	f7fe f99a 	bl	800264c <OS_SchedLockTimeMeasStop>
 8004318:	f7fc ff40 	bl	800119c <CPU_IntDisMeasStop>
 800431c:	69b8      	ldr	r0, [r7, #24]
 800431e:	f7fb ff3f 	bl	80001a0 <CPU_SR_Restore>

    OSSched();
 8004322:	f7fd fbfd 	bl	8001b20 <OSSched>
}
 8004326:	3728      	adds	r7, #40	; 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	200087b4 	.word	0x200087b4
 8004330:	080064e0 	.word	0x080064e0
 8004334:	2000895c 	.word	0x2000895c
 8004338:	20008890 	.word	0x20008890
 800433c:	20008a2c 	.word	0x20008a2c
 8004340:	2000850c 	.word	0x2000850c
 8004344:	200087b6 	.word	0x200087b6
 8004348:	2000851d 	.word	0x2000851d
 800434c:	20008b44 	.word	0x20008b44

08004350 <OSTaskDel>:
*/

#if OS_CFG_TASK_DEL_EN > 0u
void  OSTaskDel (OS_TCB  *p_tcb,
                 OS_ERR  *p_err)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to delete from ISR                       */
 800435e:	4b73      	ldr	r3, [pc, #460]	; (800452c <OSTaskDel+0x1dc>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <OSTaskDel+0x20>
       *p_err = OS_ERR_TASK_DEL_ISR;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f247 124e 	movw	r2, #29006	; 0x714e
 800436c:	801a      	strh	r2, [r3, #0]
        return;
 800436e:	e0da      	b.n	8004526 <OSTaskDel+0x1d6>
    }
#endif

    if (p_tcb == &OSIdleTaskTCB) {                          /* Not allowed to delete the idle task                    */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a6f      	ldr	r2, [pc, #444]	; (8004530 <OSTaskDel+0x1e0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d104      	bne.n	8004382 <OSTaskDel+0x32>
       *p_err = OS_ERR_TASK_DEL_IDLE;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f247 124c 	movw	r2, #29004	; 0x714c
 800437e:	801a      	strh	r2, [r3, #0]
        return;
 8004380:	e0d1      	b.n	8004526 <OSTaskDel+0x1d6>
    }

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (p_tcb == &OSIntQTaskTCB) {                          /* Cannot delete the ISR handler task                     */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a6b      	ldr	r2, [pc, #428]	; (8004534 <OSTaskDel+0x1e4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d104      	bne.n	8004394 <OSTaskDel+0x44>
       *p_err = OS_ERR_TASK_DEL_INVALID;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f247 124d 	movw	r2, #29005	; 0x714d
 8004390:	801a      	strh	r2, [r3, #0]
        return;
 8004392:	e0c8      	b.n	8004526 <OSTaskDel+0x1d6>
    }
#endif

    if (p_tcb == (OS_TCB *)0) {                             /* Delete 'Self'?                                         */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <OSTaskDel+0x64>
        CPU_CRITICAL_ENTER();
 800439a:	f7fb fefd 	bl	8000198 <CPU_SR_Save>
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	f7fc fedc 	bl	800115c <CPU_IntDisMeasStart>
        p_tcb  = OSTCBCurPtr;                               /* Yes.                                                   */
 80043a4:	4b64      	ldr	r3, [pc, #400]	; (8004538 <OSTaskDel+0x1e8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	607b      	str	r3, [r7, #4]
        CPU_CRITICAL_EXIT();
 80043aa:	f7fc fef7 	bl	800119c <CPU_IntDisMeasStop>
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7fb fef6 	bl	80001a0 <CPU_SR_Restore>
    }

    OS_CRITICAL_ENTER();
 80043b4:	f7fb fef0 	bl	8000198 <CPU_SR_Save>
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	f7fc fecf 	bl	800115c <CPU_IntDisMeasStart>
 80043be:	4b5f      	ldr	r3, [pc, #380]	; (800453c <OSTaskDel+0x1ec>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	3301      	adds	r3, #1
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4b5d      	ldr	r3, [pc, #372]	; (800453c <OSTaskDel+0x1ec>)
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	4b5c      	ldr	r3, [pc, #368]	; (800453c <OSTaskDel+0x1ec>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <OSTaskDel+0x86>
 80043d2:	f7fe f929 	bl	8002628 <OS_SchedLockTimeMeasStart>
 80043d6:	f7fc fee1 	bl	800119c <CPU_IntDisMeasStop>
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7fb fee0 	bl	80001a0 <CPU_SR_Restore>
    switch (p_tcb->TaskState) {
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80043e6:	2b07      	cmp	r3, #7
 80043e8:	d83c      	bhi.n	8004464 <OSTaskDel+0x114>
 80043ea:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <OSTaskDel+0xa0>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	08004411 	.word	0x08004411
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004421 	.word	0x08004421
 8004400:	080044bf 	.word	0x080044bf
 8004404:	08004419 	.word	0x08004419
 8004408:	08004421 	.word	0x08004421
 800440c:	08004421 	.word	0x08004421
        case OS_TASK_STATE_RDY:
             OS_RdyListRemove(p_tcb);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7fe f881 	bl	8002518 <OS_RdyListRemove>
             break;
 8004416:	e053      	b.n	80044c0 <OSTaskDel+0x170>
        case OS_TASK_STATE_SUSPENDED:
             break;

        case OS_TASK_STATE_DLY:                             /* Task is only delayed, not on any wait list             */
        case OS_TASK_STATE_DLY_SUSPENDED:
             OS_TickListRemove(p_tcb);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 f9c3 	bl	80057a4 <OS_TickListRemove>
             break;
 800441e:	e04f      	b.n	80044c0 <OSTaskDel+0x170>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             OS_TickListRemove(p_tcb);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f001 f9bf 	bl	80057a4 <OS_TickListRemove>
             switch (p_tcb->PendOn) {                       /* See what we are pending on                             */
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800442c:	2b07      	cmp	r3, #7
 800442e:	d817      	bhi.n	8004460 <OSTaskDel+0x110>
 8004430:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <OSTaskDel+0xe8>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	08004461 	.word	0x08004461
 800443c:	08004459 	.word	0x08004459
 8004440:	08004461 	.word	0x08004461
 8004444:	08004459 	.word	0x08004459
 8004448:	08004459 	.word	0x08004459
 800444c:	08004459 	.word	0x08004459
 8004450:	08004459 	.word	0x08004459
 8004454:	08004461 	.word	0x08004461
                 case OS_TASK_PEND_ON_FLAG:                 /* Remove from wait list                                  */
                 case OS_TASK_PEND_ON_MULTI:
                 case OS_TASK_PEND_ON_MUTEX:
                 case OS_TASK_PEND_ON_Q:
                 case OS_TASK_PEND_ON_SEM:
                      OS_PendListRemove(p_tcb);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fd fe28 	bl	80020ae <OS_PendListRemove>
                      break;
 800445e:	e000      	b.n	8004462 <OSTaskDel+0x112>

                 default:
                      break;
 8004460:	bf00      	nop
             }
             break;
 8004462:	e02d      	b.n	80044c0 <OSTaskDel+0x170>

        default:
            OS_CRITICAL_EXIT();
 8004464:	f7fb fe98 	bl	8000198 <CPU_SR_Save>
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	f7fc fe77 	bl	800115c <CPU_IntDisMeasStart>
 800446e:	4b33      	ldr	r3, [pc, #204]	; (800453c <OSTaskDel+0x1ec>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	3b01      	subs	r3, #1
 8004474:	b2da      	uxtb	r2, r3
 8004476:	4b31      	ldr	r3, [pc, #196]	; (800453c <OSTaskDel+0x1ec>)
 8004478:	701a      	strb	r2, [r3, #0]
 800447a:	4b30      	ldr	r3, [pc, #192]	; (800453c <OSTaskDel+0x1ec>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d113      	bne.n	80044aa <OSTaskDel+0x15a>
 8004482:	f7fe f8e3 	bl	800264c <OS_SchedLockTimeMeasStop>
 8004486:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <OSTaskDel+0x1f0>)
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <OSTaskDel+0x14e>
 800448e:	f7fc fe85 	bl	800119c <CPU_IntDisMeasStop>
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7fb fe84 	bl	80001a0 <CPU_SR_Restore>
 8004498:	f7fe f896 	bl	80025c8 <OS_Sched0>
 800449c:	e00a      	b.n	80044b4 <OSTaskDel+0x164>
 800449e:	f7fc fe7d 	bl	800119c <CPU_IntDisMeasStop>
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7fb fe7c 	bl	80001a0 <CPU_SR_Restore>
 80044a8:	e004      	b.n	80044b4 <OSTaskDel+0x164>
 80044aa:	f7fc fe77 	bl	800119c <CPU_IntDisMeasStop>
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7fb fe76 	bl	80001a0 <CPU_SR_Restore>
           *p_err = OS_ERR_STATE_INVALID;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f646 622d 	movw	r2, #28205	; 0x6e2d
 80044ba:	801a      	strh	r2, [r3, #0]
            return;
 80044bc:	e033      	b.n	8004526 <OSTaskDel+0x1d6>
             break;
 80044be:	bf00      	nop
    }

#if OS_CFG_TASK_Q_EN > 0u
    (void)OS_MsgQFreeAll(&p_tcb->MsgQ);                     /* Free task's message queue messages                     */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3364      	adds	r3, #100	; 0x64
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe ff51 	bl	800336c <OS_MsgQFreeAll>
#endif

    OSTaskDelHook(p_tcb);                                   /* Call user defined hook                                 */
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fd f830 	bl	8001530 <OSTaskDelHook>
#if defined(OS_CFG_TLS_TBL_SIZE) && (OS_CFG_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(p_tcb);                                  /* Call TLS hook                                          */
#endif

#if OS_CFG_DBG_EN > 0u
    OS_TaskDbgListRemove(p_tcb);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fa7d 	bl	80049d0 <OS_TaskDbgListRemove>
#endif
    OSTaskQty--;                                            /* One less task being managed                            */
 80044d6:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <OSTaskDel+0x1f4>)
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	4b19      	ldr	r3, [pc, #100]	; (8004544 <OSTaskDel+0x1f4>)
 80044e0:	801a      	strh	r2, [r3, #0]

    OS_TaskInitTCB(p_tcb);                                  /* Initialize the TCB to default values                   */
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fad2 	bl	8004a8c <OS_TaskInitTCB>
    p_tcb->TaskState = (OS_STATE)OS_TASK_STATE_DEL;         /* Indicate that the task was deleted                     */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	22ff      	movs	r2, #255	; 0xff
 80044ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    OS_CRITICAL_EXIT_NO_SCHED();
 80044f0:	f7fb fe52 	bl	8000198 <CPU_SR_Save>
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	f7fc fe31 	bl	800115c <CPU_IntDisMeasStart>
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <OSTaskDel+0x1ec>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	3b01      	subs	r3, #1
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4b0e      	ldr	r3, [pc, #56]	; (800453c <OSTaskDel+0x1ec>)
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <OSTaskDel+0x1ec>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <OSTaskDel+0x1c2>
 800450e:	f7fe f89d 	bl	800264c <OS_SchedLockTimeMeasStop>
 8004512:	f7fc fe43 	bl	800119c <CPU_IntDisMeasStop>
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7fb fe42 	bl	80001a0 <CPU_SR_Restore>

   *p_err = OS_ERR_NONE;                                    /* See Note #1.                                           */
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2200      	movs	r2, #0
 8004520:	801a      	strh	r2, [r3, #0]

    OSSched();                                              /* Find new highest priority task                         */
 8004522:	f7fd fafd 	bl	8001b20 <OSSched>
}
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	200087b4 	.word	0x200087b4
 8004530:	20008890 	.word	0x20008890
 8004534:	2000895c 	.word	0x2000895c
 8004538:	20008788 	.word	0x20008788
 800453c:	2000850c 	.word	0x2000850c
 8004540:	20008b44 	.word	0x20008b44
 8004544:	200087b6 	.word	0x200087b6

08004548 <OSTaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OSTaskResume (OS_TCB  *p_tcb,
                    OS_ERR  *p_err)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af04      	add	r7, sp, #16
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
        return;
    }
#endif


    CPU_CRITICAL_ENTER();
 8004556:	f7fb fe1f 	bl	8000198 <CPU_SR_Save>
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	f7fc fdfe 	bl	800115c <CPU_IntDisMeasStart>
#if OS_CFG_ARG_CHK_EN > 0u
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <OSTaskResume+0x28>
        (p_tcb == OSTCBCurPtr)) {
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <OSTaskResume+0x7c>)
 8004568:	681b      	ldr	r3, [r3, #0]
    if ((p_tcb == (OS_TCB *)0) ||                           /* We cannot resume 'self'                                */
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d109      	bne.n	8004584 <OSTaskResume+0x3c>
        CPU_CRITICAL_EXIT();
 8004570:	f7fc fe14 	bl	800119c <CPU_IntDisMeasStop>
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7fb fe13 	bl	80001a0 <CPU_SR_Restore>
       *p_err  = OS_ERR_TASK_RESUME_SELF;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f247 1257 	movw	r2, #29015	; 0x7157
 8004580:	801a      	strh	r2, [r3, #0]
        return;
 8004582:	e01b      	b.n	80045bc <OSTaskResume+0x74>
    }
#endif
    CPU_CRITICAL_EXIT();
 8004584:	f7fc fe0a 	bl	800119c <CPU_IntDisMeasStop>
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7fb fe09 	bl	80001a0 <CPU_SR_Restore>

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from an ISR                              */
 800458e:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <OSTaskResume+0x80>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00e      	beq.n	80045b4 <OSTaskResume+0x6c>
        OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_TASK_RESUME,   /* Post to ISR queue                                      */
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	9303      	str	r3, [sp, #12]
 800459a:	2300      	movs	r3, #0
 800459c:	9302      	str	r3, [sp, #8]
 800459e:	2300      	movs	r3, #0
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	2300      	movs	r3, #0
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2300      	movs	r3, #0
 80045a8:	2200      	movs	r2, #0
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4807      	ldr	r0, [pc, #28]	; (80045cc <OSTaskResume+0x84>)
 80045ae:	f7fe fbeb 	bl	8002d88 <OS_IntQPost>
                    (OS_MSG_SIZE)0,
                    (OS_FLAGS   )0,
                    (OS_OPT     )0,
                    (CPU_TS     )0,
                    (OS_ERR    *)p_err);
        return;
 80045b2:	e003      	b.n	80045bc <OSTaskResume+0x74>
    }
#endif

    OS_TaskResume(p_tcb, p_err);
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fc52 	bl	8004e60 <OS_TaskResume>
}
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20008788 	.word	0x20008788
 80045c8:	200087b4 	.word	0x200087b4
 80045cc:	53455254 	.word	0x53455254

080045d0 <OSTaskSemPend>:

OS_SEM_CTR  OSTaskSemPend (OS_TICK   timeout,
                           OS_OPT    opt,
                           CPU_TS   *p_ts,
                           OS_ERR   *p_err)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	460b      	mov	r3, r1
 80045de:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR    ctr;
    CPU_SR_ALLOC();
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
        return ((OS_SEM_CTR)0);
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 80045e4:	4b87      	ldr	r3, [pc, #540]	; (8004804 <OSTaskSemPend+0x234>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <OSTaskSemPend+0x28>
       *p_err = OS_ERR_PEND_ISR;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	f246 12ae 	movw	r2, #25006	; 0x61ae
 80045f2:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
 80045f4:	2300      	movs	r3, #0
 80045f6:	e100      	b.n	80047fa <OSTaskSemPend+0x22a>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    switch (opt) {                                          /* Validate 'opt'                                         */
 80045f8:	897b      	ldrh	r3, [r7, #10]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <OSTaskSemPend+0x40>
 80045fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004602:	d005      	beq.n	8004610 <OSTaskSemPend+0x40>
        case OS_OPT_PEND_BLOCKING:
        case OS_OPT_PEND_NON_BLOCKING:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	f645 6225 	movw	r2, #24101	; 0x5e25
 800460a:	801a      	strh	r2, [r3, #0]
             return ((OS_SEM_CTR)0);
 800460c:	2300      	movs	r3, #0
 800460e:	e0f4      	b.n	80047fa <OSTaskSemPend+0x22a>
             break;
 8004610:	bf00      	nop
    }
#endif

    if (p_ts != (CPU_TS *)0) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <OSTaskSemPend+0x4e>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
    }

    CPU_CRITICAL_ENTER();
 800461e:	f7fb fdbb 	bl	8000198 <CPU_SR_Save>
 8004622:	6178      	str	r0, [r7, #20]
 8004624:	f7fc fd9a 	bl	800115c <CPU_IntDisMeasStart>
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8004628:	4b77      	ldr	r3, [pc, #476]	; (8004808 <OSTaskSemPend+0x238>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	2b00      	cmp	r3, #0
 8004630:	d037      	beq.n	80046a2 <OSTaskSemPend+0xd2>
        OSTCBCurPtr->SemCtr--;
 8004632:	4b75      	ldr	r3, [pc, #468]	; (8004808 <OSTaskSemPend+0x238>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004638:	3a01      	subs	r2, #1
 800463a:	645a      	str	r2, [r3, #68]	; 0x44
        ctr    = OSTCBCurPtr->SemCtr;
 800463c:	4b72      	ldr	r3, [pc, #456]	; (8004808 <OSTaskSemPend+0x238>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	613b      	str	r3, [r7, #16]
        if (p_ts != (CPU_TS *)0) {
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <OSTaskSemPend+0x84>
           *p_ts  = OSTCBCurPtr->TS;
 800464a:	4b6f      	ldr	r3, [pc, #444]	; (8004808 <OSTaskSemPend+0x238>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	601a      	str	r2, [r3, #0]
        }
#if OS_CFG_TASK_PROFILE_EN > 0u
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8004654:	4b6c      	ldr	r3, [pc, #432]	; (8004808 <OSTaskSemPend+0x238>)
 8004656:	681c      	ldr	r4, [r3, #0]
 8004658:	f7fc fa72 	bl	8000b40 <CPU_TS_TmrRd>
 800465c:	4602      	mov	r2, r0
 800465e:	4b6a      	ldr	r3, [pc, #424]	; (8004808 <OSTaskSemPend+0x238>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 800466a:	4b67      	ldr	r3, [pc, #412]	; (8004808 <OSTaskSemPend+0x238>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8004672:	4b65      	ldr	r3, [pc, #404]	; (8004808 <OSTaskSemPend+0x238>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800467a:	429a      	cmp	r2, r3
 800467c:	d207      	bcs.n	800468e <OSTaskSemPend+0xbe>
            OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 800467e:	4b62      	ldr	r3, [pc, #392]	; (8004808 <OSTaskSemPend+0x238>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a61      	ldr	r2, [pc, #388]	; (8004808 <OSTaskSemPend+0x238>)
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 800468a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        }
#endif
        CPU_CRITICAL_EXIT();
 800468e:	f7fc fd85 	bl	800119c <CPU_IntDisMeasStop>
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	f7fb fd84 	bl	80001a0 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	801a      	strh	r2, [r3, #0]
        return (ctr);
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	e0ab      	b.n	80047fa <OSTaskSemPend+0x22a>
    }

    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 80046a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da0a      	bge.n	80046c0 <OSTaskSemPend+0xf0>
        CPU_CRITICAL_EXIT();
 80046aa:	f7fc fd77 	bl	800119c <CPU_IntDisMeasStop>
 80046ae:	6978      	ldr	r0, [r7, #20]
 80046b0:	f7fb fd76 	bl	80001a0 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	f246 12b0 	movw	r2, #25008	; 0x61b0
 80046ba:	801a      	strh	r2, [r3, #0]
        return ((OS_SEM_CTR)0);
 80046bc:	2300      	movs	r3, #0
 80046be:	e09c      	b.n	80047fa <OSTaskSemPend+0x22a>
    } else {                                                /* Yes                                                    */
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 80046c0:	4b52      	ldr	r3, [pc, #328]	; (800480c <OSTaskSemPend+0x23c>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <OSTaskSemPend+0x10e>
            CPU_CRITICAL_EXIT();
 80046c8:	f7fc fd68 	bl	800119c <CPU_IntDisMeasStop>
 80046cc:	6978      	ldr	r0, [r7, #20]
 80046ce:	f7fb fd67 	bl	80001a0 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f646 5263 	movw	r2, #28003	; 0x6d63
 80046d8:	801a      	strh	r2, [r3, #0]
            return ((OS_SEM_CTR)0);
 80046da:	2300      	movs	r3, #0
 80046dc:	e08d      	b.n	80047fa <OSTaskSemPend+0x22a>
        }
    }
                                                            /* Lock the scheduler/re-enable interrupts                */
    OS_CRITICAL_ENTER_CPU_EXIT();                           
 80046de:	4b4b      	ldr	r3, [pc, #300]	; (800480c <OSTaskSemPend+0x23c>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4b49      	ldr	r3, [pc, #292]	; (800480c <OSTaskSemPend+0x23c>)
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	4b48      	ldr	r3, [pc, #288]	; (800480c <OSTaskSemPend+0x23c>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <OSTaskSemPend+0x126>
 80046f2:	f7fd ff99 	bl	8002628 <OS_SchedLockTimeMeasStart>
 80046f6:	f7fc fd51 	bl	800119c <CPU_IntDisMeasStop>
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f7fb fd50 	bl	80001a0 <CPU_SR_Restore>
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Signal                           */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2207      	movs	r2, #7
 8004704:	2100      	movs	r1, #0
 8004706:	2000      	movs	r0, #0
 8004708:	f7fd fb86 	bl	8001e18 <OS_Pend>
            (OS_PEND_OBJ  *)0,
            (OS_STATE      )OS_TASK_PEND_ON_TASK_SEM,
            (OS_TICK       )timeout);
    OS_CRITICAL_EXIT_NO_SCHED();
 800470c:	f7fb fd44 	bl	8000198 <CPU_SR_Save>
 8004710:	6178      	str	r0, [r7, #20]
 8004712:	f7fc fd23 	bl	800115c <CPU_IntDisMeasStart>
 8004716:	4b3d      	ldr	r3, [pc, #244]	; (800480c <OSTaskSemPend+0x23c>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	3b01      	subs	r3, #1
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4b3b      	ldr	r3, [pc, #236]	; (800480c <OSTaskSemPend+0x23c>)
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	4b3a      	ldr	r3, [pc, #232]	; (800480c <OSTaskSemPend+0x23c>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <OSTaskSemPend+0x15e>
 800472a:	f7fd ff8f 	bl	800264c <OS_SchedLockTimeMeasStop>
 800472e:	f7fc fd35 	bl	800119c <CPU_IntDisMeasStop>
 8004732:	6978      	ldr	r0, [r7, #20]
 8004734:	f7fb fd34 	bl	80001a0 <CPU_SR_Restore>

    OSSched();                                              /* Find next highest priority task ready to run           */
 8004738:	f7fd f9f2 	bl	8001b20 <OSSched>

    CPU_CRITICAL_ENTER();
 800473c:	f7fb fd2c 	bl	8000198 <CPU_SR_Save>
 8004740:	6178      	str	r0, [r7, #20]
 8004742:	f7fc fd0b 	bl	800115c <CPU_IntDisMeasStart>
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 8004746:	4b30      	ldr	r3, [pc, #192]	; (8004808 <OSTaskSemPend+0x238>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800474e:	2b01      	cmp	r3, #1
 8004750:	d02c      	beq.n	80047ac <OSTaskSemPend+0x1dc>
 8004752:	2b03      	cmp	r3, #3
 8004754:	d037      	beq.n	80047c6 <OSTaskSemPend+0x1f6>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d140      	bne.n	80047dc <OSTaskSemPend+0x20c>
        case OS_STATUS_PEND_OK:
             if (p_ts != (CPU_TS *)0) {
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d021      	beq.n	80047a4 <OSTaskSemPend+0x1d4>
                *p_ts                    =  OSTCBCurPtr->TS;
 8004760:	4b29      	ldr	r3, [pc, #164]	; (8004808 <OSTaskSemPend+0x238>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	601a      	str	r2, [r3, #0]
#if OS_CFG_TASK_PROFILE_EN > 0u
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 800476a:	4b27      	ldr	r3, [pc, #156]	; (8004808 <OSTaskSemPend+0x238>)
 800476c:	681c      	ldr	r4, [r3, #0]
 800476e:	f7fc f9e7 	bl	8000b40 <CPU_TS_TmrRd>
 8004772:	4602      	mov	r2, r0
 8004774:	4b24      	ldr	r3, [pc, #144]	; (8004808 <OSTaskSemPend+0x238>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8004780:	4b21      	ldr	r3, [pc, #132]	; (8004808 <OSTaskSemPend+0x238>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8004788:	4b1f      	ldr	r3, [pc, #124]	; (8004808 <OSTaskSemPend+0x238>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004790:	429a      	cmp	r2, r3
 8004792:	d207      	bcs.n	80047a4 <OSTaskSemPend+0x1d4>
                    OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8004794:	4b1c      	ldr	r3, [pc, #112]	; (8004808 <OSTaskSemPend+0x238>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <OSTaskSemPend+0x238>)
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 80047a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                }
#endif
             }
            *p_err = OS_ERR_NONE;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	801a      	strh	r2, [r3, #0]
             break;
 80047aa:	e01c      	b.n	80047e6 <OSTaskSemPend+0x216>

        case OS_STATUS_PEND_ABORT:
             if (p_ts != (CPU_TS *)0) {
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <OSTaskSemPend+0x1ec>
                *p_ts  =  OSTCBCurPtr->TS;
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <OSTaskSemPend+0x238>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]
             }
            *p_err = OS_ERR_PEND_ABORT;                     /* Indicate that we aborted                               */
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f246 12a9 	movw	r2, #25001	; 0x61a9
 80047c2:	801a      	strh	r2, [r3, #0]
             break;
 80047c4:	e00f      	b.n	80047e6 <OSTaskSemPend+0x216>

        case OS_STATUS_PEND_TIMEOUT:
             if (p_ts != (CPU_TS *)0) {
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <OSTaskSemPend+0x202>
                *p_ts  = (CPU_TS  )0;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
             }
            *p_err = OS_ERR_TIMEOUT;                        /* Indicate that we didn't get event within TO            */
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f247 22d9 	movw	r2, #29401	; 0x72d9
 80047d8:	801a      	strh	r2, [r3, #0]
             break;
 80047da:	e004      	b.n	80047e6 <OSTaskSemPend+0x216>

        default:
            *p_err = OS_ERR_STATUS_INVALID;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f646 622e 	movw	r2, #28206	; 0x6e2e
 80047e2:	801a      	strh	r2, [r3, #0]
             break;
 80047e4:	bf00      	nop
    }
    ctr = OSTCBCurPtr->SemCtr;
 80047e6:	4b08      	ldr	r3, [pc, #32]	; (8004808 <OSTaskSemPend+0x238>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	613b      	str	r3, [r7, #16]
    CPU_CRITICAL_EXIT();
 80047ee:	f7fc fcd5 	bl	800119c <CPU_IntDisMeasStop>
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f7fb fcd4 	bl	80001a0 <CPU_SR_Restore>
    return (ctr);
 80047f8:	693b      	ldr	r3, [r7, #16]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}
 8004802:	bf00      	nop
 8004804:	200087b4 	.word	0x200087b4
 8004808:	20008788 	.word	0x20008788
 800480c:	2000850c 	.word	0x2000850c

08004810 <OSTaskStkChk>:
#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
void  OSTaskStkChk (OS_TCB        *p_tcb,
                    CPU_STK_SIZE  *p_free,
                    CPU_STK_SIZE  *p_used,
                    OS_ERR        *p_err)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
    CPU_STK_SIZE  free_stk;
    CPU_STK      *p_stk;
    CPU_SR_ALLOC();
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if trying to check stack from ISR                  */
 8004822:	4b39      	ldr	r3, [pc, #228]	; (8004908 <OSTaskStkChk+0xf8>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <OSTaskStkChk+0x24>
       *p_err = OS_ERR_TASK_STK_CHK_ISR;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f247 1259 	movw	r2, #29017	; 0x7159
 8004830:	801a      	strh	r2, [r3, #0]
        return;
 8004832:	e065      	b.n	8004900 <OSTaskStkChk+0xf0>
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_free == (CPU_STK_SIZE*)0) {                       /* User must specify valid destinations for the sizes     */
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <OSTaskStkChk+0x34>
       *p_err  = OS_ERR_PTR_INVALID;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8004840:	801a      	strh	r2, [r3, #0]
        return;
 8004842:	e05d      	b.n	8004900 <OSTaskStkChk+0xf0>
    }

    if (p_used == (CPU_STK_SIZE*)0) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <OSTaskStkChk+0x44>
       *p_err  = OS_ERR_PTR_INVALID;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f246 22d5 	movw	r2, #25301	; 0x62d5
 8004850:	801a      	strh	r2, [r3, #0]
        return;
 8004852:	e055      	b.n	8004900 <OSTaskStkChk+0xf0>
    }
#endif

    CPU_CRITICAL_ENTER();
 8004854:	f7fb fca0 	bl	8000198 <CPU_SR_Save>
 8004858:	6178      	str	r0, [r7, #20]
 800485a:	f7fc fc7f 	bl	800115c <CPU_IntDisMeasStart>
    if (p_tcb == (OS_TCB *)0) {                             /* Check the stack of the current task?                   */
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <OSTaskStkChk+0x5a>
        p_tcb = OSTCBCurPtr;                                /* Yes                                                    */
 8004864:	4b29      	ldr	r3, [pc, #164]	; (800490c <OSTaskStkChk+0xfc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60fb      	str	r3, [r7, #12]
    }

    if (p_tcb->StkPtr == (CPU_STK*)0) {                     /* Make sure task exist                                   */
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <OSTaskStkChk+0x82>
        CPU_CRITICAL_EXIT();
 8004872:	f7fc fc93 	bl	800119c <CPU_IntDisMeasStop>
 8004876:	6978      	ldr	r0, [r7, #20]
 8004878:	f7fb fc92 	bl	80001a0 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_NOT_EXIST;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f247 1252 	movw	r2, #29010	; 0x7152
 800488e:	801a      	strh	r2, [r3, #0]
        return;
 8004890:	e036      	b.n	8004900 <OSTaskStkChk+0xf0>
    }

    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == (OS_OPT)0) {  /* Make sure stack checking option is set                 */
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10f      	bne.n	80048be <OSTaskStkChk+0xae>
        CPU_CRITICAL_EXIT();
 800489e:	f7fc fc7d 	bl	800119c <CPU_IntDisMeasStop>
 80048a2:	6978      	ldr	r0, [r7, #20]
 80048a4:	f7fb fc7c 	bl	80001a0 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
       *p_used = (CPU_STK_SIZE)0;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
       *p_err  =  OS_ERR_TASK_OPT;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	f247 1254 	movw	r2, #29012	; 0x7154
 80048ba:	801a      	strh	r2, [r3, #0]
        return;
 80048bc:	e020      	b.n	8004900 <OSTaskStkChk+0xf0>
    }
    CPU_CRITICAL_EXIT();
 80048be:	f7fc fc6d 	bl	800119c <CPU_IntDisMeasStop>
 80048c2:	6978      	ldr	r0, [r7, #20]
 80048c4:	f7fb fc6c 	bl	80001a0 <CPU_SR_Restore>

    free_stk  = 0u;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
#if CPU_CFG_STK_GROWTH == CPU_STK_GROWTH_HI_TO_LO
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	61bb      	str	r3, [r7, #24]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 80048d2:	e005      	b.n	80048e0 <OSTaskStkChk+0xd0>
        p_stk++;
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	3304      	adds	r3, #4
 80048d8:	61bb      	str	r3, [r7, #24]
        free_stk++;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	3301      	adds	r3, #1
 80048de:	61fb      	str	r3, [r7, #28]
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f5      	beq.n	80048d4 <OSTaskStkChk+0xc4>
    while (*p_stk == (CPU_STK)0) {
        free_stk++;
        p_stk--;
    }
#endif
   *p_free = free_stk;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	601a      	str	r2, [r3, #0]
   *p_used = (p_tcb->StkSize - free_stk);                   /* Compute number of entries used on the stack            */
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	1ad2      	subs	r2, r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	601a      	str	r2, [r3, #0]
   *p_err  = OS_ERR_NONE;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	801a      	strh	r2, [r3, #0]
}
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200087b4 	.word	0x200087b4
 800490c:	20008788 	.word	0x20008788

08004910 <OSTaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void   OSTaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af04      	add	r7, sp, #16
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
       *p_err = OS_ERR_TASK_SUSPEND_ISR;
        return;
    }
#endif

    if (p_tcb == &OSIdleTaskTCB) {                          /* Make sure not suspending the idle task                 */
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <OSTaskSuspend+0x64>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d104      	bne.n	800492c <OSTaskSuspend+0x1c>
       *p_err = OS_ERR_TASK_SUSPEND_IDLE;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f247 125b 	movw	r2, #29019	; 0x715b
 8004928:	801a      	strh	r2, [r3, #0]
        return;
 800492a:	e01f      	b.n	800496c <OSTaskSuspend+0x5c>
    }

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    if (p_tcb == &OSIntQTaskTCB) {                          /* Not allowed to suspend the ISR handler task            */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <OSTaskSuspend+0x68>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d104      	bne.n	800493e <OSTaskSuspend+0x2e>
       *p_err = OS_ERR_TASK_SUSPEND_INT_HANDLER;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f247 125c 	movw	r2, #29020	; 0x715c
 800493a:	801a      	strh	r2, [r3, #0]
        return;
 800493c:	e016      	b.n	800496c <OSTaskSuspend+0x5c>
    }

    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from an ISR                              */
 800493e:	4b0f      	ldr	r3, [pc, #60]	; (800497c <OSTaskSuspend+0x6c>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00e      	beq.n	8004964 <OSTaskSuspend+0x54>
        OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_TASK_SUSPEND,  /* Post to ISR queue                                      */
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	9303      	str	r3, [sp, #12]
 800494a:	2300      	movs	r3, #0
 800494c:	9302      	str	r3, [sp, #8]
 800494e:	2300      	movs	r3, #0
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	2300      	movs	r3, #0
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2300      	movs	r3, #0
 8004958:	2200      	movs	r2, #0
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4808      	ldr	r0, [pc, #32]	; (8004980 <OSTaskSuspend+0x70>)
 800495e:	f7fe fa13 	bl	8002d88 <OS_IntQPost>
                    (OS_MSG_SIZE)0,
                    (OS_FLAGS   )0,
                    (OS_OPT     )0,
                    (CPU_TS     )0,
                    (OS_ERR    *)p_err);
        return;
 8004962:	e003      	b.n	800496c <OSTaskSuspend+0x5c>
    }
#endif

    OS_TaskSuspend(p_tcb, p_err);
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fccc 	bl	8005304 <OS_TaskSuspend>
}
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20008890 	.word	0x20008890
 8004978:	2000895c 	.word	0x2000895c
 800497c:	200087b4 	.word	0x200087b4
 8004980:	53555354 	.word	0x53555354

08004984 <OS_TaskDbgListAdd>:
************************************************************************************************************************
*/

#if OS_CFG_DBG_EN > 0u
void  OS_TaskDbgListAdd (OS_TCB  *p_tcb)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8004994:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <OS_TaskDbgListAdd+0x48>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d104      	bne.n	80049a6 <OS_TaskDbgListAdd+0x22>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80049a4:	e009      	b.n	80049ba <OS_TaskDbgListAdd+0x36>
    } else {
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 80049a6:	4b09      	ldr	r3, [pc, #36]	; (80049cc <OS_TaskDbgListAdd+0x48>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <OS_TaskDbgListAdd+0x48>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    }
    OSTaskDbgListPtr                 =  p_tcb;
 80049ba:	4a04      	ldr	r2, [pc, #16]	; (80049cc <OS_TaskDbgListAdd+0x48>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6013      	str	r3, [r2, #0]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	2000879c 	.word	0x2000879c

080049d0 <OS_TaskDbgListRemove>:



void  OS_TaskDbgListRemove (OS_TCB  *p_tcb)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
    OS_TCB  *p_tcb_next;
    OS_TCB  *p_tcb_prev;


    p_tcb_prev = p_tcb->DbgPrevPtr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80049de:	60fb      	str	r3, [r7, #12]
    p_tcb_next = p_tcb->DbgNextPtr;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80049e6:	60bb      	str	r3, [r7, #8]

    if (p_tcb_prev == (OS_TCB *)0) {
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10e      	bne.n	8004a0c <OS_TaskDbgListRemove+0x3c>
        OSTaskDbgListPtr = p_tcb_next;
 80049ee:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <OS_TaskDbgListRemove+0x80>)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	6013      	str	r3, [r2, #0]
        if (p_tcb_next != (OS_TCB *)0) {
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <OS_TaskDbgListRemove+0x32>
            p_tcb_next->DbgPrevPtr = (OS_TCB *)0;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        }
        p_tcb->DbgNextPtr = (OS_TCB *)0;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        p_tcb_prev->DbgNextPtr =  p_tcb_next;
        p_tcb_next->DbgPrevPtr =  p_tcb_prev;
        p_tcb->DbgNextPtr      = (OS_TCB *)0;
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
    }
}
 8004a0a:	e01b      	b.n	8004a44 <OS_TaskDbgListRemove+0x74>
    } else if (p_tcb_next == (OS_TCB *)0) {
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d108      	bne.n	8004a24 <OS_TaskDbgListRemove+0x54>
        p_tcb_prev->DbgNextPtr = (OS_TCB *)0;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8004a22:	e00f      	b.n	8004a44 <OS_TaskDbgListRemove+0x74>
        p_tcb_prev->DbgNextPtr =  p_tcb_next;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        p_tcb_next->DbgPrevPtr =  p_tcb_prev;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        p_tcb->DbgNextPtr      = (OS_TCB *)0;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        p_tcb->DbgPrevPtr      = (OS_TCB *)0;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	2000879c 	.word	0x2000879c

08004a54 <OS_TaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInit (OS_ERR  *p_err)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTaskDbgListPtr = (OS_TCB      *)0;
 8004a5c:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <OS_TaskInit+0x2c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
#endif

    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 8004a62:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <OS_TaskInit+0x30>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	801a      	strh	r2, [r3, #0]
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <OS_TaskInit+0x34>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]

   *p_err            = OS_ERR_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	801a      	strh	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	2000879c 	.word	0x2000879c
 8004a84:	200087b6 	.word	0x200087b6
 8004a88:	200087b0 	.word	0x200087b0

08004a8c <OS_TaskInitTCB>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskInitTCB (OS_TCB  *p_tcb)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
#if OS_CFG_TASK_PROFILE_EN > 0u
    CPU_TS      ts;
#endif


    p_tcb->StkPtr             = (CPU_STK       *)0;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
    p_tcb->StkLimitPtr        = (CPU_STK       *)0;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	609a      	str	r2, [r3, #8]

    p_tcb->ExtPtr             = (void          *)0;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	605a      	str	r2, [r3, #4]

    p_tcb->NextPtr            = (OS_TCB        *)0;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	60da      	str	r2, [r3, #12]
    p_tcb->PrevPtr            = (OS_TCB        *)0;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	611a      	str	r2, [r3, #16]

    p_tcb->TickNextPtr        = (OS_TCB        *)0;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	615a      	str	r2, [r3, #20]
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	619a      	str	r2, [r3, #24]
    p_tcb->TickSpokePtr       = (OS_TICK_SPOKE *)0;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	61da      	str	r2, [r3, #28]

    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a59      	ldr	r2, [pc, #356]	; (8004c2c <OS_TaskInitTCB+0x1a0>)
 8004ac8:	621a      	str	r2, [r3, #32]

    p_tcb->StkBasePtr         = (CPU_STK       *)0;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

    p_tcb->TaskEntryAddr      = (OS_TASK_PTR    )0;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	629a      	str	r2, [r3, #40]	; 0x28
    p_tcb->TaskEntryArg       = (void          *)0;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c

#if (OS_CFG_PEND_MULTI_EN > 0u)
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA  *)0;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY     )0u;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
#endif

    p_tcb->TS                 = (CPU_TS         )0u;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40

#if (OS_MSG_EN > 0u)
    p_tcb->MsgPtr             = (void          *)0;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	65da      	str	r2, [r3, #92]	; 0x5c
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3364      	adds	r3, #100	; 0x64
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe fc6c 	bl	80033e0 <OS_MsgQInit>
                (OS_MSG_QTY)0u);
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->MsgQPendTime       = (CPU_TS         )0u;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	675a      	str	r2, [r3, #116]	; 0x74
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	679a      	str	r2, [r3, #120]	; 0x78
#endif
#endif

#if OS_CFG_FLAG_EN > 0u
    p_tcb->FlagsPend          = (OS_FLAGS       )0u;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]
 8004b30:	e009      	b.n	8004b46 <OS_TaskInitTCB+0xba>
        p_tcb->RegTbl[reg_id] = (OS_REG)0u;
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	331e      	adds	r3, #30
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	605a      	str	r2, [r3, #4]
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	3301      	adds	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f2      	beq.n	8004b32 <OS_TaskInitTCB+0xa6>
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]    = (OS_TLS)0;
    }
#endif

    p_tcb->SemCtr             = (OS_SEM_CTR     )0u;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->SemPendTime        = (CPU_TS         )0u;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    p_tcb->SemPendTimeMax     = (CPU_TS         )0u;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif

    p_tcb->StkSize            = (CPU_STK_SIZE   )0u;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38


#if OS_CFG_TASK_SUSPEND_EN > 0u
    p_tcb->SuspendCtr         = (OS_NESTING_CTR )0u;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    p_tcb->StkFree            = (CPU_STK_SIZE   )0u;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    p_tcb->StkUsed            = (CPU_STK_SIZE   )0u;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

    p_tcb->Opt                = (OS_OPT         )0u;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	879a      	strh	r2, [r3, #60]	; 0x3c

    p_tcb->TickCtrPrev        = (OS_TICK        )OS_TICK_TH_INIT;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b8c:	649a      	str	r2, [r3, #72]	; 0x48
    p_tcb->TickCtrMatch       = (OS_TICK        )0u;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	64da      	str	r2, [r3, #76]	; 0x4c
    p_tcb->TickRemain         = (OS_TICK        )0u;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	651a      	str	r2, [r3, #80]	; 0x50

    p_tcb->TimeQuanta         = (OS_TICK        )0u;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
    p_tcb->TimeQuantaCtr      = (OS_TICK        )0u;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	659a      	str	r2, [r3, #88]	; 0x58

#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->CPUUsage           = (OS_CPU_USAGE   )0u;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
    p_tcb->CPUUsageMax        = (OS_CPU_USAGE   )0u;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
    p_tcb->CtxSwCtr           = (OS_CTX_SW_CTR  )0u;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    p_tcb->CyclesDelta        = (CPU_TS         )0u;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    ts                        = OS_TS_GET();                /* Read the current timestamp and save                    */
 8004bc6:	f7fb ffbb 	bl	8000b40 <CPU_TS_TmrRd>
 8004bca:	60b8      	str	r0, [r7, #8]
    p_tcb->CyclesStart        = ts;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    p_tcb->IntDisTimeMax      = (CPU_TS         )0u;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif

    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    p_tcb->PendStatus         = (OS_STATUS      )OS_STATUS_PEND_OK;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    p_tcb->TaskState          = (OS_STATE       )OS_TASK_STATE_RDY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

    p_tcb->Prio               = (OS_PRIO        )OS_PRIO_INIT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#if OS_CFG_DBG_EN > 0u
    p_tcb->DbgPrevPtr         = (OS_TCB        *)0;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <OS_TaskInitTCB+0x1a4>)
 8004c20:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
#endif
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	08006448 	.word	0x08006448
 8004c30:	08006450 	.word	0x08006450

08004c34 <OS_TaskQPost>:
                    void         *p_void,
                    OS_MSG_SIZE   msg_size,
                    OS_OPT        opt,
                    CPU_TS        ts,
                    OS_ERR       *p_err)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4611      	mov	r1, r2
 8004c40:	461a      	mov	r2, r3
 8004c42:	460b      	mov	r3, r1
 8004c44:	80fb      	strh	r3, [r7, #6]
 8004c46:	4613      	mov	r3, r2
 8004c48:	80bb      	strh	r3, [r7, #4]
    CPU_SR_ALLOC();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]



    OS_CRITICAL_ENTER();
 8004c4e:	f7fb faa3 	bl	8000198 <CPU_SR_Save>
 8004c52:	6178      	str	r0, [r7, #20]
 8004c54:	f7fc fa82 	bl	800115c <CPU_IntDisMeasStart>
 8004c58:	4b7e      	ldr	r3, [pc, #504]	; (8004e54 <OS_TaskQPost+0x220>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	4b7c      	ldr	r3, [pc, #496]	; (8004e54 <OS_TaskQPost+0x220>)
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	4b7b      	ldr	r3, [pc, #492]	; (8004e54 <OS_TaskQPost+0x220>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <OS_TaskQPost+0x3c>
 8004c6c:	f7fd fcdc 	bl	8002628 <OS_SchedLockTimeMeasStart>
 8004c70:	f7fc fa94 	bl	800119c <CPU_IntDisMeasStop>
 8004c74:	6978      	ldr	r0, [r7, #20]
 8004c76:	f7fb fa93 	bl	80001a0 <CPU_SR_Restore>
    if (p_tcb == (OS_TCB *)0) {                             /* Post msg to 'self'?                                    */
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <OS_TaskQPost+0x52>
        p_tcb = OSTCBCurPtr;
 8004c80:	4b75      	ldr	r3, [pc, #468]	; (8004e58 <OS_TaskQPost+0x224>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
    }
   *p_err  = OS_ERR_NONE;                                   /* Assume we won't have any errors                        */
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	2200      	movs	r2, #0
 8004c8a:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004c92:	2b07      	cmp	r3, #7
 8004c94:	f200 80ab 	bhi.w	8004dee <OS_TaskQPost+0x1ba>
 8004c98:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <OS_TaskQPost+0x6c>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cc1 	.word	0x08004cc1
 8004ca4:	08004cc1 	.word	0x08004cc1
 8004ca8:	08004d2d 	.word	0x08004d2d
 8004cac:	08004d2d 	.word	0x08004d2d
 8004cb0:	08004cc1 	.word	0x08004cc1
 8004cb4:	08004cc1 	.word	0x08004cc1
 8004cb8:	08004d2d 	.word	0x08004d2d
 8004cbc:	08004d2d 	.word	0x08004d2d
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
             OS_MsgQPut(&p_tcb->MsgQ,                       /* Deposit the message in the queue                       */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8004cc6:	88b9      	ldrh	r1, [r7, #4]
 8004cc8:	88fa      	ldrh	r2, [r7, #6]
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	f7fe fb9d 	bl	8003414 <OS_MsgQPut>
                        p_void,
                        msg_size,
                        opt,
                        ts,
                        p_err);
             OS_CRITICAL_EXIT();
 8004cda:	f7fb fa5d 	bl	8000198 <CPU_SR_Save>
 8004cde:	6178      	str	r0, [r7, #20]
 8004ce0:	f7fc fa3c 	bl	800115c <CPU_IntDisMeasStart>
 8004ce4:	4b5b      	ldr	r3, [pc, #364]	; (8004e54 <OS_TaskQPost+0x220>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	4b59      	ldr	r3, [pc, #356]	; (8004e54 <OS_TaskQPost+0x220>)
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	4b58      	ldr	r3, [pc, #352]	; (8004e54 <OS_TaskQPost+0x220>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d113      	bne.n	8004d20 <OS_TaskQPost+0xec>
 8004cf8:	f7fd fca8 	bl	800264c <OS_SchedLockTimeMeasStop>
 8004cfc:	4b57      	ldr	r3, [pc, #348]	; (8004e5c <OS_TaskQPost+0x228>)
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <OS_TaskQPost+0xe0>
 8004d04:	f7fc fa4a 	bl	800119c <CPU_IntDisMeasStop>
 8004d08:	6978      	ldr	r0, [r7, #20]
 8004d0a:	f7fb fa49 	bl	80001a0 <CPU_SR_Restore>
 8004d0e:	f7fd fc5b 	bl	80025c8 <OS_Sched0>
             break;
 8004d12:	e09a      	b.n	8004e4a <OS_TaskQPost+0x216>
             OS_CRITICAL_EXIT();
 8004d14:	f7fc fa42 	bl	800119c <CPU_IntDisMeasStop>
 8004d18:	6978      	ldr	r0, [r7, #20]
 8004d1a:	f7fb fa41 	bl	80001a0 <CPU_SR_Restore>
             break;
 8004d1e:	e094      	b.n	8004e4a <OS_TaskQPost+0x216>
             OS_CRITICAL_EXIT();
 8004d20:	f7fc fa3c 	bl	800119c <CPU_IntDisMeasStop>
 8004d24:	6978      	ldr	r0, [r7, #20]
 8004d26:	f7fb fa3b 	bl	80001a0 <CPU_SR_Restore>
             break;
 8004d2a:	e08e      	b.n	8004e4a <OS_TaskQPost+0x216>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_Q) { /* Is task waiting for a message to be sent to it?        */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d125      	bne.n	8004d82 <OS_TaskQPost+0x14e>
                 OS_Post((OS_PEND_OBJ *)0,
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	68f9      	ldr	r1, [r7, #12]
 8004d42:	2000      	movs	r0, #0
 8004d44:	f7fd fa24 	bl	8002190 <OS_Post>
                         p_tcb,
                         p_void,
                         msg_size,
                         ts);
                 OS_CRITICAL_EXIT_NO_SCHED();
 8004d48:	f7fb fa26 	bl	8000198 <CPU_SR_Save>
 8004d4c:	6178      	str	r0, [r7, #20]
 8004d4e:	f7fc fa05 	bl	800115c <CPU_IntDisMeasStart>
 8004d52:	4b40      	ldr	r3, [pc, #256]	; (8004e54 <OS_TaskQPost+0x220>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <OS_TaskQPost+0x220>)
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	; (8004e54 <OS_TaskQPost+0x220>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <OS_TaskQPost+0x136>
 8004d66:	f7fd fc71 	bl	800264c <OS_SchedLockTimeMeasStop>
 8004d6a:	f7fc fa17 	bl	800119c <CPU_IntDisMeasStop>
 8004d6e:	6978      	ldr	r0, [r7, #20]
 8004d70:	f7fb fa16 	bl	80001a0 <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
 8004d74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	db65      	blt.n	8004e48 <OS_TaskQPost+0x214>
                     OSSched();                             /* Run the scheduler                                      */
 8004d7c:	f7fc fed0 	bl	8001b20 <OSSched>
                            opt,
                            ts,
                            p_err);
                 OS_CRITICAL_EXIT();
             }
             break;
 8004d80:	e062      	b.n	8004e48 <OS_TaskQPost+0x214>
                 OS_MsgQPut(&p_tcb->MsgQ,                   /* No,  Task is pending on something else ...             */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8004d88:	88b9      	ldrh	r1, [r7, #4]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	460b      	mov	r3, r1
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	f7fe fb3c 	bl	8003414 <OS_MsgQPut>
                 OS_CRITICAL_EXIT();
 8004d9c:	f7fb f9fc 	bl	8000198 <CPU_SR_Save>
 8004da0:	6178      	str	r0, [r7, #20]
 8004da2:	f7fc f9db 	bl	800115c <CPU_IntDisMeasStart>
 8004da6:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <OS_TaskQPost+0x220>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <OS_TaskQPost+0x220>)
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <OS_TaskQPost+0x220>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d113      	bne.n	8004de2 <OS_TaskQPost+0x1ae>
 8004dba:	f7fd fc47 	bl	800264c <OS_SchedLockTimeMeasStop>
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <OS_TaskQPost+0x228>)
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <OS_TaskQPost+0x1a2>
 8004dc6:	f7fc f9e9 	bl	800119c <CPU_IntDisMeasStop>
 8004dca:	6978      	ldr	r0, [r7, #20]
 8004dcc:	f7fb f9e8 	bl	80001a0 <CPU_SR_Restore>
 8004dd0:	f7fd fbfa 	bl	80025c8 <OS_Sched0>
             break;
 8004dd4:	e038      	b.n	8004e48 <OS_TaskQPost+0x214>
                 OS_CRITICAL_EXIT();
 8004dd6:	f7fc f9e1 	bl	800119c <CPU_IntDisMeasStop>
 8004dda:	6978      	ldr	r0, [r7, #20]
 8004ddc:	f7fb f9e0 	bl	80001a0 <CPU_SR_Restore>
             break;
 8004de0:	e032      	b.n	8004e48 <OS_TaskQPost+0x214>
                 OS_CRITICAL_EXIT();
 8004de2:	f7fc f9db 	bl	800119c <CPU_IntDisMeasStop>
 8004de6:	6978      	ldr	r0, [r7, #20]
 8004de8:	f7fb f9da 	bl	80001a0 <CPU_SR_Restore>
             break;
 8004dec:	e02c      	b.n	8004e48 <OS_TaskQPost+0x214>

        default:
             OS_CRITICAL_EXIT();
 8004dee:	f7fb f9d3 	bl	8000198 <CPU_SR_Save>
 8004df2:	6178      	str	r0, [r7, #20]
 8004df4:	f7fc f9b2 	bl	800115c <CPU_IntDisMeasStart>
 8004df8:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <OS_TaskQPost+0x220>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <OS_TaskQPost+0x220>)
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <OS_TaskQPost+0x220>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d113      	bne.n	8004e34 <OS_TaskQPost+0x200>
 8004e0c:	f7fd fc1e 	bl	800264c <OS_SchedLockTimeMeasStop>
 8004e10:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <OS_TaskQPost+0x228>)
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <OS_TaskQPost+0x1f4>
 8004e18:	f7fc f9c0 	bl	800119c <CPU_IntDisMeasStop>
 8004e1c:	6978      	ldr	r0, [r7, #20]
 8004e1e:	f7fb f9bf 	bl	80001a0 <CPU_SR_Restore>
 8004e22:	f7fd fbd1 	bl	80025c8 <OS_Sched0>
 8004e26:	e00a      	b.n	8004e3e <OS_TaskQPost+0x20a>
 8004e28:	f7fc f9b8 	bl	800119c <CPU_IntDisMeasStop>
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f7fb f9b7 	bl	80001a0 <CPU_SR_Restore>
 8004e32:	e004      	b.n	8004e3e <OS_TaskQPost+0x20a>
 8004e34:	f7fc f9b2 	bl	800119c <CPU_IntDisMeasStop>
 8004e38:	6978      	ldr	r0, [r7, #20]
 8004e3a:	f7fb f9b1 	bl	80001a0 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8004e44:	801a      	strh	r2, [r3, #0]
             break;
 8004e46:	e000      	b.n	8004e4a <OS_TaskQPost+0x216>
             break;
 8004e48:	bf00      	nop
    }
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	2000850c 	.word	0x2000850c
 8004e58:	20008788 	.word	0x20008788
 8004e5c:	20008b44 	.word	0x20008b44

08004e60 <OS_TaskResume>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskResume (OS_TCB  *p_tcb,
                     OS_ERR  *p_err)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8004e6e:	f7fb f993 	bl	8000198 <CPU_SR_Save>
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	f7fc f972 	bl	800115c <CPU_IntDisMeasStart>
   *p_err  = OS_ERR_NONE;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004e84:	2b07      	cmp	r3, #7
 8004e86:	f200 809e 	bhi.w	8004fc6 <OS_TaskResume+0x166>
 8004e8a:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <OS_TaskResume+0x30>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004eb1 	.word	0x08004eb1
 8004e94:	08004eb1 	.word	0x08004eb1
 8004e98:	08004eb1 	.word	0x08004eb1
 8004e9c:	08004eb1 	.word	0x08004eb1
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004f3d 	.word	0x08004f3d
 8004ea8:	08004f6b 	.word	0x08004f6b
 8004eac:	08004f99 	.word	0x08004f99
        case OS_TASK_STATE_RDY:
        case OS_TASK_STATE_DLY:
        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
             CPU_CRITICAL_EXIT();
 8004eb0:	f7fc f974 	bl	800119c <CPU_IntDisMeasStop>
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7fb f973 	bl	80001a0 <CPU_SR_Restore>
            *p_err = OS_ERR_TASK_NOT_SUSPENDED;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f247 1253 	movw	r2, #29011	; 0x7153
 8004ec0:	801a      	strh	r2, [r3, #0]
             break;
 8004ec2:	e08a      	b.n	8004fda <OS_TaskResume+0x17a>

        case OS_TASK_STATE_SUSPENDED:
             OS_CRITICAL_ENTER_CPU_EXIT();
 8004ec4:	4b47      	ldr	r3, [pc, #284]	; (8004fe4 <OS_TaskResume+0x184>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	4b45      	ldr	r3, [pc, #276]	; (8004fe4 <OS_TaskResume+0x184>)
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	4b44      	ldr	r3, [pc, #272]	; (8004fe4 <OS_TaskResume+0x184>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <OS_TaskResume+0x7c>
 8004ed8:	f7fd fba6 	bl	8002628 <OS_SchedLockTimeMeasStart>
 8004edc:	f7fc f95e 	bl	800119c <CPU_IntDisMeasStop>
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7fb f95d 	bl	80001a0 <CPU_SR_Restore>
             p_tcb->SuspendCtr--;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <OS_TaskResume+0xae>
                 p_tcb->TaskState = OS_TASK_STATE_RDY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                 OS_TaskRdy(p_tcb);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fd fc62 	bl	80027d2 <OS_TaskRdy>
             }
             OS_CRITICAL_EXIT_NO_SCHED();
 8004f0e:	f7fb f943 	bl	8000198 <CPU_SR_Save>
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	f7fc f922 	bl	800115c <CPU_IntDisMeasStart>
 8004f18:	4b32      	ldr	r3, [pc, #200]	; (8004fe4 <OS_TaskResume+0x184>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	4b30      	ldr	r3, [pc, #192]	; (8004fe4 <OS_TaskResume+0x184>)
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	4b2f      	ldr	r3, [pc, #188]	; (8004fe4 <OS_TaskResume+0x184>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <OS_TaskResume+0xd0>
 8004f2c:	f7fd fb8e 	bl	800264c <OS_SchedLockTimeMeasStop>
 8004f30:	f7fc f934 	bl	800119c <CPU_IntDisMeasStop>
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7fb f933 	bl	80001a0 <CPU_SR_Restore>
             break;
 8004f3a:	e04e      	b.n	8004fda <OS_TaskResume+0x17a>

        case OS_TASK_STATE_DLY_SUSPENDED:
             p_tcb->SuspendCtr--;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <OS_TaskResume+0xfe>
                 p_tcb->TaskState = OS_TASK_STATE_DLY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8004f5e:	f7fc f91d 	bl	800119c <CPU_IntDisMeasStop>
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7fb f91c 	bl	80001a0 <CPU_SR_Restore>
             break;
 8004f68:	e037      	b.n	8004fda <OS_TaskResume+0x17a>

        case OS_TASK_STATE_PEND_SUSPENDED:
             p_tcb->SuspendCtr--;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d103      	bne.n	8004f8c <OS_TaskResume+0x12c>
                 p_tcb->TaskState = OS_TASK_STATE_PEND;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8004f8c:	f7fc f906 	bl	800119c <CPU_IntDisMeasStop>
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7fb f905 	bl	80001a0 <CPU_SR_Restore>
             break;
 8004f96:	e020      	b.n	8004fda <OS_TaskResume+0x17a>

        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr--;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
             if (p_tcb->SuspendCtr == (OS_NESTING_CTR)0) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <OS_TaskResume+0x15a>
                 p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             }
             CPU_CRITICAL_EXIT();
 8004fba:	f7fc f8ef 	bl	800119c <CPU_IntDisMeasStop>
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7fb f8ee 	bl	80001a0 <CPU_SR_Restore>
             break;
 8004fc4:	e009      	b.n	8004fda <OS_TaskResume+0x17a>

        default:
             CPU_CRITICAL_EXIT();
 8004fc6:	f7fc f8e9 	bl	800119c <CPU_IntDisMeasStop>
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f7fb f8e8 	bl	80001a0 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	f646 622d 	movw	r2, #28205	; 0x6e2d
 8004fd6:	801a      	strh	r2, [r3, #0]
             return;
 8004fd8:	e001      	b.n	8004fde <OS_TaskResume+0x17e>
    }

    OSSched();
 8004fda:	f7fc fda1 	bl	8001b20 <OSSched>
}
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	2000850c 	.word	0x2000850c

08004fe8 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
    OS_ERR  err;



    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 8004fee:	4b07      	ldr	r3, [pc, #28]	; (800500c <OS_TaskReturn+0x24>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fc faae 	bl	8001554 <OSTaskReturnHook>
#if OS_CFG_TASK_DEL_EN > 0u
    OSTaskDel((OS_TCB *)0,                                  /* Delete task if it accidentally returns!                */
 8004ff8:	1dbb      	adds	r3, r7, #6
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	f7ff f9a7 	bl	8004350 <OSTaskDel>
        OSTimeDly((OS_TICK )OSCfg_TickRate_Hz,
                  (OS_OPT  )OS_OPT_TIME_DLY,
                  (OS_ERR *)&err);
    }
#endif
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20008788 	.word	0x20008788

08005010 <OS_TaskSemPost>:

OS_SEM_CTR  OS_TaskSemPost (OS_TCB  *p_tcb,
                            OS_OPT   opt,
                            CPU_TS   ts,
                            OS_ERR  *p_err)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	460b      	mov	r3, r1
 800501e:	817b      	strh	r3, [r7, #10]
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]



    OS_CRITICAL_ENTER();
 8005024:	f7fb f8b8 	bl	8000198 <CPU_SR_Save>
 8005028:	6138      	str	r0, [r7, #16]
 800502a:	f7fc f897 	bl	800115c <CPU_IntDisMeasStart>
 800502e:	4baf      	ldr	r3, [pc, #700]	; (80052ec <OS_TaskSemPost+0x2dc>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	b2da      	uxtb	r2, r3
 8005036:	4bad      	ldr	r3, [pc, #692]	; (80052ec <OS_TaskSemPost+0x2dc>)
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	4bac      	ldr	r3, [pc, #688]	; (80052ec <OS_TaskSemPost+0x2dc>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <OS_TaskSemPost+0x36>
 8005042:	f7fd faf1 	bl	8002628 <OS_SchedLockTimeMeasStart>
 8005046:	f7fc f8a9 	bl	800119c <CPU_IntDisMeasStop>
 800504a:	6938      	ldr	r0, [r7, #16]
 800504c:	f7fb f8a8 	bl	80001a0 <CPU_SR_Restore>
    if (p_tcb == (OS_TCB *)0) {                             /* Post signal to 'self'?                                 */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <OS_TaskSemPost+0x4c>
        p_tcb = OSTCBCurPtr;
 8005056:	4ba6      	ldr	r3, [pc, #664]	; (80052f0 <OS_TaskSemPost+0x2e0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]
    }
    p_tcb->TS = ts;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	641a      	str	r2, [r3, #64]	; 0x40
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2200      	movs	r2, #0
 8005066:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800506e:	2b07      	cmp	r3, #7
 8005070:	f200 810c 	bhi.w	800528c <OS_TaskSemPost+0x27c>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <OS_TaskSemPost+0x6c>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	0800509d 	.word	0x0800509d
 8005080:	0800509d 	.word	0x0800509d
 8005084:	08005167 	.word	0x08005167
 8005088:	08005167 	.word	0x08005167
 800508c:	0800509d 	.word	0x0800509d
 8005090:	0800509d 	.word	0x0800509d
 8005094:	08005167 	.word	0x08005167
 8005098:	08005167 	.word	0x08005167
                          return ((OS_SEM_CTR)0);
                      }
                      break;

                 case 4u:
                      if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d12d      	bne.n	8005102 <OS_TaskSemPost+0xf2>
                          OS_CRITICAL_EXIT();
 80050a6:	f7fb f877 	bl	8000198 <CPU_SR_Save>
 80050aa:	6138      	str	r0, [r7, #16]
 80050ac:	f7fc f856 	bl	800115c <CPU_IntDisMeasStart>
 80050b0:	4b8e      	ldr	r3, [pc, #568]	; (80052ec <OS_TaskSemPost+0x2dc>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	4b8c      	ldr	r3, [pc, #560]	; (80052ec <OS_TaskSemPost+0x2dc>)
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	4b8b      	ldr	r3, [pc, #556]	; (80052ec <OS_TaskSemPost+0x2dc>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d113      	bne.n	80050ec <OS_TaskSemPost+0xdc>
 80050c4:	f7fd fac2 	bl	800264c <OS_SchedLockTimeMeasStop>
 80050c8:	4b8a      	ldr	r3, [pc, #552]	; (80052f4 <OS_TaskSemPost+0x2e4>)
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <OS_TaskSemPost+0xd0>
 80050d0:	f7fc f864 	bl	800119c <CPU_IntDisMeasStop>
 80050d4:	6938      	ldr	r0, [r7, #16]
 80050d6:	f7fb f863 	bl	80001a0 <CPU_SR_Restore>
 80050da:	f7fd fa75 	bl	80025c8 <OS_Sched0>
 80050de:	e00a      	b.n	80050f6 <OS_TaskSemPost+0xe6>
 80050e0:	f7fc f85c 	bl	800119c <CPU_IntDisMeasStop>
 80050e4:	6938      	ldr	r0, [r7, #16]
 80050e6:	f7fb f85b 	bl	80001a0 <CPU_SR_Restore>
 80050ea:	e004      	b.n	80050f6 <OS_TaskSemPost+0xe6>
 80050ec:	f7fc f856 	bl	800119c <CPU_IntDisMeasStop>
 80050f0:	6938      	ldr	r0, [r7, #16]
 80050f2:	f7fb f855 	bl	80001a0 <CPU_SR_Restore>
                         *p_err = OS_ERR_SEM_OVF;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 80050fc:	801a      	strh	r2, [r3, #0]
                          return ((OS_SEM_CTR)0);
 80050fe:	2300      	movs	r3, #0
 8005100:	e0fc      	b.n	80052fc <OS_TaskSemPost+0x2ec>
                      }
                      break;
 8005102:	bf00      	nop

                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	645a      	str	r2, [r3, #68]	; 0x44
             ctr = p_tcb->SemCtr;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	617b      	str	r3, [r7, #20]
             OS_CRITICAL_EXIT();
 8005114:	f7fb f840 	bl	8000198 <CPU_SR_Save>
 8005118:	6138      	str	r0, [r7, #16]
 800511a:	f7fc f81f 	bl	800115c <CPU_IntDisMeasStart>
 800511e:	4b73      	ldr	r3, [pc, #460]	; (80052ec <OS_TaskSemPost+0x2dc>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	3b01      	subs	r3, #1
 8005124:	b2da      	uxtb	r2, r3
 8005126:	4b71      	ldr	r3, [pc, #452]	; (80052ec <OS_TaskSemPost+0x2dc>)
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	4b70      	ldr	r3, [pc, #448]	; (80052ec <OS_TaskSemPost+0x2dc>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d113      	bne.n	800515a <OS_TaskSemPost+0x14a>
 8005132:	f7fd fa8b 	bl	800264c <OS_SchedLockTimeMeasStop>
 8005136:	4b6f      	ldr	r3, [pc, #444]	; (80052f4 <OS_TaskSemPost+0x2e4>)
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <OS_TaskSemPost+0x13e>
 800513e:	f7fc f82d 	bl	800119c <CPU_IntDisMeasStop>
 8005142:	6938      	ldr	r0, [r7, #16]
 8005144:	f7fb f82c 	bl	80001a0 <CPU_SR_Restore>
 8005148:	f7fd fa3e 	bl	80025c8 <OS_Sched0>
             break;
 800514c:	e0d5      	b.n	80052fa <OS_TaskSemPost+0x2ea>
             OS_CRITICAL_EXIT();
 800514e:	f7fc f825 	bl	800119c <CPU_IntDisMeasStop>
 8005152:	6938      	ldr	r0, [r7, #16]
 8005154:	f7fb f824 	bl	80001a0 <CPU_SR_Restore>
             break;
 8005158:	e0cf      	b.n	80052fa <OS_TaskSemPost+0x2ea>
             OS_CRITICAL_EXIT();
 800515a:	f7fc f81f 	bl	800119c <CPU_IntDisMeasStop>
 800515e:	6938      	ldr	r0, [r7, #16]
 8005160:	f7fb f81e 	bl	80001a0 <CPU_SR_Restore>
             break;
 8005164:	e0c9      	b.n	80052fa <OS_TaskSemPost+0x2ea>

        case OS_TASK_STATE_PEND:
        case OS_TASK_STATE_PEND_TIMEOUT:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_SEM) {   /* Is task signaled waiting for a signal?             */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800516c:	2b07      	cmp	r3, #7
 800516e:	d128      	bne.n	80051c2 <OS_TaskSemPost+0x1b2>
                 OS_Post((OS_PEND_OBJ *)0,                      /*      Task is pending on signal                     */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	2300      	movs	r3, #0
 8005176:	2200      	movs	r2, #0
 8005178:	68f9      	ldr	r1, [r7, #12]
 800517a:	2000      	movs	r0, #0
 800517c:	f7fd f808 	bl	8002190 <OS_Post>
                         (OS_TCB      *)p_tcb,
                         (void        *)0,
                         (OS_MSG_SIZE  )0u,
                         (CPU_TS       )ts);
                 ctr = p_tcb->SemCtr;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005184:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT_NO_SCHED();
 8005186:	f7fb f807 	bl	8000198 <CPU_SR_Save>
 800518a:	6138      	str	r0, [r7, #16]
 800518c:	f7fb ffe6 	bl	800115c <CPU_IntDisMeasStart>
 8005190:	4b56      	ldr	r3, [pc, #344]	; (80052ec <OS_TaskSemPost+0x2dc>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	3b01      	subs	r3, #1
 8005196:	b2da      	uxtb	r2, r3
 8005198:	4b54      	ldr	r3, [pc, #336]	; (80052ec <OS_TaskSemPost+0x2dc>)
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	4b53      	ldr	r3, [pc, #332]	; (80052ec <OS_TaskSemPost+0x2dc>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <OS_TaskSemPost+0x198>
 80051a4:	f7fd fa52 	bl	800264c <OS_SchedLockTimeMeasStop>
 80051a8:	f7fb fff8 	bl	800119c <CPU_IntDisMeasStop>
 80051ac:	6938      	ldr	r0, [r7, #16]
 80051ae:	f7fa fff7 	bl	80001a0 <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 80051b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f2c0 809e 	blt.w	80052f8 <OS_TaskSemPost+0x2e8>
                     OSSched();                                 /* Run the scheduler                                  */
 80051bc:	f7fc fcb0 	bl	8001b20 <OSSched>
                 }
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
                 OS_CRITICAL_EXIT();
             }
             break;
 80051c0:	e09a      	b.n	80052f8 <OS_TaskSemPost+0x2e8>
                          if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d12d      	bne.n	8005228 <OS_TaskSemPost+0x218>
                              OS_CRITICAL_EXIT();
 80051cc:	f7fa ffe4 	bl	8000198 <CPU_SR_Save>
 80051d0:	6138      	str	r0, [r7, #16]
 80051d2:	f7fb ffc3 	bl	800115c <CPU_IntDisMeasStart>
 80051d6:	4b45      	ldr	r3, [pc, #276]	; (80052ec <OS_TaskSemPost+0x2dc>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	3b01      	subs	r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4b43      	ldr	r3, [pc, #268]	; (80052ec <OS_TaskSemPost+0x2dc>)
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	4b42      	ldr	r3, [pc, #264]	; (80052ec <OS_TaskSemPost+0x2dc>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d113      	bne.n	8005212 <OS_TaskSemPost+0x202>
 80051ea:	f7fd fa2f 	bl	800264c <OS_SchedLockTimeMeasStop>
 80051ee:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <OS_TaskSemPost+0x2e4>)
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <OS_TaskSemPost+0x1f6>
 80051f6:	f7fb ffd1 	bl	800119c <CPU_IntDisMeasStop>
 80051fa:	6938      	ldr	r0, [r7, #16]
 80051fc:	f7fa ffd0 	bl	80001a0 <CPU_SR_Restore>
 8005200:	f7fd f9e2 	bl	80025c8 <OS_Sched0>
 8005204:	e00a      	b.n	800521c <OS_TaskSemPost+0x20c>
 8005206:	f7fb ffc9 	bl	800119c <CPU_IntDisMeasStop>
 800520a:	6938      	ldr	r0, [r7, #16]
 800520c:	f7fa ffc8 	bl	80001a0 <CPU_SR_Restore>
 8005210:	e004      	b.n	800521c <OS_TaskSemPost+0x20c>
 8005212:	f7fb ffc3 	bl	800119c <CPU_IntDisMeasStop>
 8005216:	6938      	ldr	r0, [r7, #16]
 8005218:	f7fa ffc2 	bl	80001a0 <CPU_SR_Restore>
                             *p_err = OS_ERR_SEM_OVF;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	f646 52c5 	movw	r2, #28101	; 0x6dc5
 8005222:	801a      	strh	r2, [r3, #0]
                              return ((OS_SEM_CTR)0);
 8005224:	2300      	movs	r3, #0
 8005226:	e069      	b.n	80052fc <OS_TaskSemPost+0x2ec>
                          break;
 8005228:	bf00      	nop
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	645a      	str	r2, [r3, #68]	; 0x44
                 ctr = p_tcb->SemCtr;                       /*      ... it must be waiting on something else          */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	617b      	str	r3, [r7, #20]
                 OS_CRITICAL_EXIT();
 800523a:	f7fa ffad 	bl	8000198 <CPU_SR_Save>
 800523e:	6138      	str	r0, [r7, #16]
 8005240:	f7fb ff8c 	bl	800115c <CPU_IntDisMeasStart>
 8005244:	4b29      	ldr	r3, [pc, #164]	; (80052ec <OS_TaskSemPost+0x2dc>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	3b01      	subs	r3, #1
 800524a:	b2da      	uxtb	r2, r3
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <OS_TaskSemPost+0x2dc>)
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	4b26      	ldr	r3, [pc, #152]	; (80052ec <OS_TaskSemPost+0x2dc>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d113      	bne.n	8005280 <OS_TaskSemPost+0x270>
 8005258:	f7fd f9f8 	bl	800264c <OS_SchedLockTimeMeasStop>
 800525c:	4b25      	ldr	r3, [pc, #148]	; (80052f4 <OS_TaskSemPost+0x2e4>)
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <OS_TaskSemPost+0x264>
 8005264:	f7fb ff9a 	bl	800119c <CPU_IntDisMeasStop>
 8005268:	6938      	ldr	r0, [r7, #16]
 800526a:	f7fa ff99 	bl	80001a0 <CPU_SR_Restore>
 800526e:	f7fd f9ab 	bl	80025c8 <OS_Sched0>
             break;
 8005272:	e041      	b.n	80052f8 <OS_TaskSemPost+0x2e8>
                 OS_CRITICAL_EXIT();
 8005274:	f7fb ff92 	bl	800119c <CPU_IntDisMeasStop>
 8005278:	6938      	ldr	r0, [r7, #16]
 800527a:	f7fa ff91 	bl	80001a0 <CPU_SR_Restore>
             break;
 800527e:	e03b      	b.n	80052f8 <OS_TaskSemPost+0x2e8>
                 OS_CRITICAL_EXIT();
 8005280:	f7fb ff8c 	bl	800119c <CPU_IntDisMeasStop>
 8005284:	6938      	ldr	r0, [r7, #16]
 8005286:	f7fa ff8b 	bl	80001a0 <CPU_SR_Restore>
             break;
 800528a:	e035      	b.n	80052f8 <OS_TaskSemPost+0x2e8>

        default:
             OS_CRITICAL_EXIT();
 800528c:	f7fa ff84 	bl	8000198 <CPU_SR_Save>
 8005290:	6138      	str	r0, [r7, #16]
 8005292:	f7fb ff63 	bl	800115c <CPU_IntDisMeasStart>
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <OS_TaskSemPost+0x2dc>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	3b01      	subs	r3, #1
 800529c:	b2da      	uxtb	r2, r3
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <OS_TaskSemPost+0x2dc>)
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	4b12      	ldr	r3, [pc, #72]	; (80052ec <OS_TaskSemPost+0x2dc>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d113      	bne.n	80052d2 <OS_TaskSemPost+0x2c2>
 80052aa:	f7fd f9cf 	bl	800264c <OS_SchedLockTimeMeasStop>
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <OS_TaskSemPost+0x2e4>)
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <OS_TaskSemPost+0x2b6>
 80052b6:	f7fb ff71 	bl	800119c <CPU_IntDisMeasStop>
 80052ba:	6938      	ldr	r0, [r7, #16]
 80052bc:	f7fa ff70 	bl	80001a0 <CPU_SR_Restore>
 80052c0:	f7fd f982 	bl	80025c8 <OS_Sched0>
 80052c4:	e00a      	b.n	80052dc <OS_TaskSemPost+0x2cc>
 80052c6:	f7fb ff69 	bl	800119c <CPU_IntDisMeasStop>
 80052ca:	6938      	ldr	r0, [r7, #16]
 80052cc:	f7fa ff68 	bl	80001a0 <CPU_SR_Restore>
 80052d0:	e004      	b.n	80052dc <OS_TaskSemPost+0x2cc>
 80052d2:	f7fb ff63 	bl	800119c <CPU_IntDisMeasStop>
 80052d6:	6938      	ldr	r0, [r7, #16]
 80052d8:	f7fa ff62 	bl	80001a0 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	f646 622d 	movw	r2, #28205	; 0x6e2d
 80052e2:	801a      	strh	r2, [r3, #0]
             ctr   = (OS_SEM_CTR)0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
             break;
 80052e8:	e007      	b.n	80052fa <OS_TaskSemPost+0x2ea>
 80052ea:	bf00      	nop
 80052ec:	2000850c 	.word	0x2000850c
 80052f0:	20008788 	.word	0x20008788
 80052f4:	20008b44 	.word	0x20008b44
             break;
 80052f8:	bf00      	nop
    }
    return (ctr);
 80052fa:	697b      	ldr	r3, [r7, #20]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <OS_TaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void   OS_TaskSuspend (OS_TCB  *p_tcb,
                       OS_ERR  *p_err)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]



    CPU_CRITICAL_ENTER();
 8005312:	f7fa ff41 	bl	8000198 <CPU_SR_Save>
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	f7fb ff20 	bl	800115c <CPU_IntDisMeasStart>
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d102      	bne.n	8005328 <OS_TaskSuspend+0x24>
        p_tcb = OSTCBCurPtr;
 8005322:	4b55      	ldr	r3, [pc, #340]	; (8005478 <OS_TaskSuspend+0x174>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	607b      	str	r3, [r7, #4]
    }

    if (p_tcb == OSTCBCurPtr) {
 8005328:	4b53      	ldr	r3, [pc, #332]	; (8005478 <OS_TaskSuspend+0x174>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	429a      	cmp	r2, r3
 8005330:	d10d      	bne.n	800534e <OS_TaskSuspend+0x4a>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't suspend when the scheduler is locked             */
 8005332:	4b52      	ldr	r3, [pc, #328]	; (800547c <OS_TaskSuspend+0x178>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <OS_TaskSuspend+0x4a>
            CPU_CRITICAL_EXIT();
 800533a:	f7fb ff2f 	bl	800119c <CPU_IntDisMeasStop>
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7fa ff2e 	bl	80001a0 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f646 5263 	movw	r2, #28003	; 0x6d63
 800534a:	801a      	strh	r2, [r3, #0]
            return;
 800534c:	e091      	b.n	8005472 <OS_TaskSuspend+0x16e>
        }
    }

   *p_err = OS_ERR_NONE;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2200      	movs	r2, #0
 8005352:	801a      	strh	r2, [r3, #0]
    switch (p_tcb->TaskState) {
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800535a:	2b07      	cmp	r3, #7
 800535c:	d87d      	bhi.n	800545a <OS_TaskSuspend+0x156>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <OS_TaskSuspend+0x60>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005385 	.word	0x08005385
 8005368:	080053eb 	.word	0x080053eb
 800536c:	08005407 	.word	0x08005407
 8005370:	08005423 	.word	0x08005423
 8005374:	0800543f 	.word	0x0800543f
 8005378:	0800543f 	.word	0x0800543f
 800537c:	0800543f 	.word	0x0800543f
 8005380:	0800543f 	.word	0x0800543f
        case OS_TASK_STATE_RDY:
             OS_CRITICAL_ENTER_CPU_EXIT();
 8005384:	4b3d      	ldr	r3, [pc, #244]	; (800547c <OS_TaskSuspend+0x178>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	3301      	adds	r3, #1
 800538a:	b2da      	uxtb	r2, r3
 800538c:	4b3b      	ldr	r3, [pc, #236]	; (800547c <OS_TaskSuspend+0x178>)
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	4b3a      	ldr	r3, [pc, #232]	; (800547c <OS_TaskSuspend+0x178>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <OS_TaskSuspend+0x98>
 8005398:	f7fd f946 	bl	8002628 <OS_SchedLockTimeMeasStart>
 800539c:	f7fb fefe 	bl	800119c <CPU_IntDisMeasStop>
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7fa fefd 	bl	80001a0 <CPU_SR_Restore>
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2204      	movs	r2, #4
 80053aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
             OS_RdyListRemove(p_tcb);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fd f8ae 	bl	8002518 <OS_RdyListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
 80053bc:	f7fa feec 	bl	8000198 <CPU_SR_Save>
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	f7fb fecb 	bl	800115c <CPU_IntDisMeasStart>
 80053c6:	4b2d      	ldr	r3, [pc, #180]	; (800547c <OS_TaskSuspend+0x178>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	4b2b      	ldr	r3, [pc, #172]	; (800547c <OS_TaskSuspend+0x178>)
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	4b2a      	ldr	r3, [pc, #168]	; (800547c <OS_TaskSuspend+0x178>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <OS_TaskSuspend+0xda>
 80053da:	f7fd f937 	bl	800264c <OS_SchedLockTimeMeasStop>
 80053de:	f7fb fedd 	bl	800119c <CPU_IntDisMeasStop>
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7fa fedc 	bl	80001a0 <CPU_SR_Restore>
             break;
 80053e8:	e041      	b.n	800546e <OS_TaskSuspend+0x16a>

        case OS_TASK_STATE_DLY:
             p_tcb->TaskState  = OS_TASK_STATE_DLY_SUSPENDED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2205      	movs	r2, #5
 80053ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
             CPU_CRITICAL_EXIT();
 80053fa:	f7fb fecf 	bl	800119c <CPU_IntDisMeasStop>
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7fa fece 	bl	80001a0 <CPU_SR_Restore>
             break;
 8005404:	e033      	b.n	800546e <OS_TaskSuspend+0x16a>

        case OS_TASK_STATE_PEND:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_SUSPENDED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2206      	movs	r2, #6
 800540a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
             CPU_CRITICAL_EXIT();
 8005416:	f7fb fec1 	bl	800119c <CPU_IntDisMeasStop>
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7fa fec0 	bl	80001a0 <CPU_SR_Restore>
             break;
 8005420:	e025      	b.n	800546e <OS_TaskSuspend+0x16a>

        case OS_TASK_STATE_PEND_TIMEOUT:
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2207      	movs	r2, #7
 8005426:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
             CPU_CRITICAL_EXIT();
 8005432:	f7fb feb3 	bl	800119c <CPU_IntDisMeasStop>
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7fa feb2 	bl	80001a0 <CPU_SR_Restore>
             break;
 800543c:	e017      	b.n	800546e <OS_TaskSuspend+0x16a>

        case OS_TASK_STATE_SUSPENDED:
        case OS_TASK_STATE_DLY_SUSPENDED:
        case OS_TASK_STATE_PEND_SUSPENDED:
        case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
             p_tcb->SuspendCtr++;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8005444:	3301      	adds	r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
             CPU_CRITICAL_EXIT();
 800544e:	f7fb fea5 	bl	800119c <CPU_IntDisMeasStop>
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7fa fea4 	bl	80001a0 <CPU_SR_Restore>
             break;
 8005458:	e009      	b.n	800546e <OS_TaskSuspend+0x16a>

        default:
             CPU_CRITICAL_EXIT();
 800545a:	f7fb fe9f 	bl	800119c <CPU_IntDisMeasStop>
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f7fa fe9e 	bl	80001a0 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f646 622d 	movw	r2, #28205	; 0x6e2d
 800546a:	801a      	strh	r2, [r3, #0]
             return;
 800546c:	e001      	b.n	8005472 <OS_TaskSuspend+0x16e>
    }

    OSSched();
 800546e:	f7fc fb57 	bl	8001b20 <OSSched>
}
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	20008788 	.word	0x20008788
 800547c:	2000850c 	.word	0x2000850c

08005480 <OS_TickTask>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTask (void  *p_arg)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]


    p_arg = p_arg;                                          /* Prevent compiler warning                               */

    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK  )0,
 8005488:	f107 030e 	add.w	r3, r7, #14
 800548c:	f107 0208 	add.w	r2, r7, #8
 8005490:	2100      	movs	r1, #0
 8005492:	2000      	movs	r0, #0
 8005494:	f7ff f89c 	bl	80045d0 <OSTaskSemPend>
                            (OS_OPT   )OS_OPT_PEND_BLOCKING,
                            (CPU_TS  *)&ts,
                            (OS_ERR  *)&err);               /* Wait for signal from tick interrupt                    */
        if (err == OS_ERR_NONE) {
 8005498:	89fb      	ldrh	r3, [r7, #14]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f4      	bne.n	8005488 <OS_TickTask+0x8>
            if (OSRunning == OS_STATE_OS_RUNNING) {
 800549e:	4b03      	ldr	r3, [pc, #12]	; (80054ac <OS_TickTask+0x2c>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d1f0      	bne.n	8005488 <OS_TickTask+0x8>
                OS_TickListUpdate();                        /* Update all tasks waiting for time                      */
 80054a6:	f000 f9e3 	bl	8005870 <OS_TickListUpdate>
        (void)OSTaskSemPend((OS_TICK  )0,
 80054aa:	e7ed      	b.n	8005488 <OS_TickTask+0x8>
 80054ac:	2000851d 	.word	0x2000851d

080054b0 <OS_TickTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTaskInit (OS_ERR  *p_err)
{
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b08d      	sub	sp, #52	; 0x34
 80054b4:	af0a      	add	r7, sp, #40	; 0x28
 80054b6:	6078      	str	r0, [r7, #4]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return;
    }
#endif

    OSTickCtr         = (OS_TICK)0u;                        /* Clear the tick counter                                 */
 80054b8:	4b21      	ldr	r3, [pc, #132]	; (8005540 <OS_TickTaskInit+0x90>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

    OSTickTaskTimeMax = (CPU_TS)0u;
 80054be:	4b21      	ldr	r3, [pc, #132]	; (8005544 <OS_TickTaskInit+0x94>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]


    OS_TickListInit();                                      /* Initialize the tick list data structures               */
 80054c4:	f000 f850 	bl	8005568 <OS_TickListInit>

                                                            /* ---------------- CREATE THE TICK TASK ---------------- */
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 80054c8:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <OS_TickTaskInit+0x98>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <OS_TickTaskInit+0x2a>
       *p_err = OS_ERR_TICK_STK_INVALID;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f247 2212 	movw	r2, #29202	; 0x7212
 80054d6:	801a      	strh	r2, [r3, #0]
        return;
 80054d8:	e02f      	b.n	800553a <OS_TickTaskInit+0x8a>
    }

    if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
 80054da:	4b1c      	ldr	r3, [pc, #112]	; (800554c <OS_TickTaskInit+0x9c>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <OS_TickTaskInit+0xa0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d204      	bcs.n	80054f0 <OS_TickTaskInit+0x40>
       *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f247 2213 	movw	r2, #29203	; 0x7213
 80054ec:	801a      	strh	r2, [r3, #0]
        return;
 80054ee:	e024      	b.n	800553a <OS_TickTaskInit+0x8a>
    }

    if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {     /* Only one task at the 'Idle Task' priority              */
 80054f0:	4b18      	ldr	r3, [pc, #96]	; (8005554 <OS_TickTaskInit+0xa4>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b1e      	cmp	r3, #30
 80054f6:	d904      	bls.n	8005502 <OS_TickTaskInit+0x52>
       *p_err = OS_ERR_TICK_PRIO_INVALID;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f247 2211 	movw	r2, #29201	; 0x7211
 80054fe:	801a      	strh	r2, [r3, #0]
        return;
 8005500:	e01b      	b.n	800553a <OS_TickTaskInit+0x8a>
    }

    OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
 8005502:	4b14      	ldr	r3, [pc, #80]	; (8005554 <OS_TickTaskInit+0xa4>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	4a10      	ldr	r2, [pc, #64]	; (8005548 <OS_TickTaskInit+0x98>)
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	4913      	ldr	r1, [pc, #76]	; (8005558 <OS_TickTaskInit+0xa8>)
 800550c:	6809      	ldr	r1, [r1, #0]
 800550e:	480f      	ldr	r0, [pc, #60]	; (800554c <OS_TickTaskInit+0x9c>)
 8005510:	6800      	ldr	r0, [r0, #0]
 8005512:	687c      	ldr	r4, [r7, #4]
 8005514:	9408      	str	r4, [sp, #32]
 8005516:	240b      	movs	r4, #11
 8005518:	9407      	str	r4, [sp, #28]
 800551a:	2400      	movs	r4, #0
 800551c:	9406      	str	r4, [sp, #24]
 800551e:	2400      	movs	r4, #0
 8005520:	9405      	str	r4, [sp, #20]
 8005522:	2400      	movs	r4, #0
 8005524:	9404      	str	r4, [sp, #16]
 8005526:	9003      	str	r0, [sp, #12]
 8005528:	9102      	str	r1, [sp, #8]
 800552a:	9201      	str	r2, [sp, #4]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2300      	movs	r3, #0
 8005530:	4a0a      	ldr	r2, [pc, #40]	; (800555c <OS_TickTaskInit+0xac>)
 8005532:	490b      	ldr	r1, [pc, #44]	; (8005560 <OS_TickTaskInit+0xb0>)
 8005534:	480b      	ldr	r0, [pc, #44]	; (8005564 <OS_TickTaskInit+0xb4>)
 8005536:	f7fe fda5 	bl	8004084 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bd90      	pop	{r4, r7, pc}
 8005540:	20008a38 	.word	0x20008a38
 8005544:	20008b34 	.word	0x20008b34
 8005548:	080064ec 	.word	0x080064ec
 800554c:	080064f4 	.word	0x080064f4
 8005550:	080064e0 	.word	0x080064e0
 8005554:	080064e8 	.word	0x080064e8
 8005558:	080064f0 	.word	0x080064f0
 800555c:	08005481 	.word	0x08005481
 8005560:	08006454 	.word	0x08006454
 8005564:	200086b4 	.word	0x200086b4

08005568 <OS_TickListInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TickListInit (void)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
    OS_TICK_SPOKE_IX   i;
    OS_TICK_SPOKE     *p_spoke;



    for (i = 0u; i < OSCfg_TickWheelSize; i++) {
 800556e:	2300      	movs	r3, #0
 8005570:	80fb      	strh	r3, [r7, #6]
 8005572:	e010      	b.n	8005596 <OS_TickListInit+0x2e>
        p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4a0c      	ldr	r2, [pc, #48]	; (80055ac <OS_TickListInit+0x44>)
 800557a:	4413      	add	r3, r2
 800557c:	603b      	str	r3, [r7, #0]
        p_spoke->FirstPtr      = (OS_TCB        *)0;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
        p_spoke->NbrEntries    = (OS_OBJ_QTY     )0u;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	809a      	strh	r2, [r3, #4]
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2200      	movs	r2, #0
 800558e:	80da      	strh	r2, [r3, #6]
    for (i = 0u; i < OSCfg_TickWheelSize; i++) {
 8005590:	88fb      	ldrh	r3, [r7, #6]
 8005592:	3301      	adds	r3, #1
 8005594:	80fb      	strh	r3, [r7, #6]
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <OS_TickListInit+0x48>)
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	429a      	cmp	r2, r3
 800559e:	d3e9      	bcc.n	8005574 <OS_TickListInit+0xc>
    }
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	20007478 	.word	0x20007478
 80055b0:	080064f8 	.word	0x080064f8

080055b4 <OS_TickListInsert>:

void  OS_TickListInsert (OS_TCB   *p_tcb,
                         OS_TICK   time,
                         OS_OPT    opt,
                         OS_ERR   *p_err)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b08b      	sub	sp, #44	; 0x2c
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	80fb      	strh	r3, [r7, #6]
    OS_TCB            *p_tcb1;
    OS_TICK_SPOKE_IX   spoke;



    if (opt == OS_OPT_TIME_MATCH) {                              /* Task time is absolute.                            */
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d11f      	bne.n	800560a <OS_TickListInsert+0x56>
        tick_delta = time - OSTickCtr - 1u;
 80055ca:	4b73      	ldr	r3, [pc, #460]	; (8005798 <OS_TickListInsert+0x1e4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	623b      	str	r3, [r7, #32]
        if (tick_delta > OS_TICK_TH_RDY) {                       /* If delay already occurred, ...                    */
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055dc:	d90d      	bls.n	80055fa <OS_TickListInsert+0x46>
            p_tcb->TickCtrMatch = (OS_TICK        )0u;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	64da      	str	r2, [r3, #76]	; 0x4c
            p_tcb->TickRemain   = (OS_TICK        )0u;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	61da      	str	r2, [r3, #28]
           *p_err               =  OS_ERR_TIME_ZERO_DLY;         /* ... do NOT delay.                                 */
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f247 227e 	movw	r2, #29310	; 0x727e
 80055f6:	801a      	strh	r2, [r3, #0]
            return;
 80055f8:	e0ca      	b.n	8005790 <OS_TickListInsert+0x1dc>
        }
        p_tcb->TickCtrMatch = time;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	64da      	str	r2, [r3, #76]	; 0x4c
        p_tcb->TickRemain   = tick_delta + 1u;
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	651a      	str	r2, [r3, #80]	; 0x50
 8005608:	e042      	b.n	8005690 <OS_TickListInsert+0xdc>

    } else if (time > (OS_TICK)0u) {
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d031      	beq.n	8005674 <OS_TickListInsert+0xc0>
        if (opt == OS_OPT_TIME_PERIODIC) {                       /* Task time is periodic.                            */
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	2b08      	cmp	r3, #8
 8005614:	d124      	bne.n	8005660 <OS_TickListInsert+0xac>
            tick_next  = p_tcb->TickCtrPrev + time;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4413      	add	r3, r2
 800561e:	61fb      	str	r3, [r7, #28]
            tick_delta = tick_next - OSTickCtr - 1u;
 8005620:	4b5d      	ldr	r3, [pc, #372]	; (8005798 <OS_TickListInsert+0x1e4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	623b      	str	r3, [r7, #32]
            if (tick_delta < time) {                             /* If next periodic delay did NOT already occur, ... */
 800562c:	6a3a      	ldr	r2, [r7, #32]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	429a      	cmp	r2, r3
 8005632:	d203      	bcs.n	800563c <OS_TickListInsert+0x88>
                p_tcb->TickCtrMatch = tick_next;                 /* ... set  next  periodic delay;                ... */
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	64da      	str	r2, [r3, #76]	; 0x4c
 800563a:	e005      	b.n	8005648 <OS_TickListInsert+0x94>
            } else {
                p_tcb->TickCtrMatch = OSTickCtr + time;          /* ... else reset periodic delay.                    */
 800563c:	4b56      	ldr	r3, [pc, #344]	; (8005798 <OS_TickListInsert+0x1e4>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	441a      	add	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            p_tcb->TickRemain   = p_tcb->TickCtrMatch - OSTickCtr;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800564c:	4b52      	ldr	r3, [pc, #328]	; (8005798 <OS_TickListInsert+0x1e4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	1ad2      	subs	r2, r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	651a      	str	r2, [r3, #80]	; 0x50
            p_tcb->TickCtrPrev  = p_tcb->TickCtrMatch;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	649a      	str	r2, [r3, #72]	; 0x48
 800565e:	e017      	b.n	8005690 <OS_TickListInsert+0xdc>

        } else {                                                 /* Task time is relative to current.                 */
            p_tcb->TickCtrMatch = OSTickCtr + time;
 8005660:	4b4d      	ldr	r3, [pc, #308]	; (8005798 <OS_TickListInsert+0x1e4>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	441a      	add	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	64da      	str	r2, [r3, #76]	; 0x4c
            p_tcb->TickRemain   = time;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	651a      	str	r2, [r3, #80]	; 0x50
 8005672:	e00d      	b.n	8005690 <OS_TickListInsert+0xdc>
        }

    } else {                                                     /* Zero time delay; ...                              */
        p_tcb->TickCtrMatch = (OS_TICK        )0u;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	64da      	str	r2, [r3, #76]	; 0x4c
        p_tcb->TickRemain   = (OS_TICK        )0u;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	651a      	str	r2, [r3, #80]	; 0x50
        p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	61da      	str	r2, [r3, #28]
       *p_err               =  OS_ERR_TIME_ZERO_DLY;             /* ... do NOT delay.                                 */
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f247 227e 	movw	r2, #29310	; 0x727e
 800568c:	801a      	strh	r2, [r3, #0]
        return;
 800568e:	e07f      	b.n	8005790 <OS_TickListInsert+0x1dc>
    }


    spoke   = (OS_TICK_SPOKE_IX)(p_tcb->TickCtrMatch % OSCfg_TickWheelSize);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005694:	4a41      	ldr	r2, [pc, #260]	; (800579c <OS_TickListInsert+0x1e8>)
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	fbb3 f1f2 	udiv	r1, r3, r2
 800569c:	fb02 f201 	mul.w	r2, r2, r1
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	837b      	strh	r3, [r7, #26]
    p_spoke = &OSCfg_TickWheel[spoke];
 80056a4:	8b7b      	ldrh	r3, [r7, #26]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4a3d      	ldr	r2, [pc, #244]	; (80057a0 <OS_TickListInsert+0x1ec>)
 80056aa:	4413      	add	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

    if (p_spoke->NbrEntries == (OS_OBJ_QTY)0u) {                 /* First entry in the spoke                          */
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	889b      	ldrh	r3, [r3, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10c      	bne.n	80056d0 <OS_TickListInsert+0x11c>
        p_tcb->TickNextPtr   = (OS_TCB   *)0;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr   = (OS_TCB   *)0;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	619a      	str	r2, [r3, #24]
        p_spoke->FirstPtr    =  p_tcb;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]
        p_spoke->NbrEntries  = (OS_OBJ_QTY)1u;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2201      	movs	r2, #1
 80056cc:	809a      	strh	r2, [r3, #4]
 80056ce:	e04f      	b.n	8005770 <OS_TickListInsert+0x1bc>
    } else {
        p_tcb1     = p_spoke->FirstPtr;                          /* Point to current first TCB in the list            */
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (p_tcb1 != (OS_TCB *)0) {
 80056d6:	e042      	b.n	800575e <OS_TickListInsert+0x1aa>
            p_tcb1->TickRemain = p_tcb1->TickCtrMatch            /* Compute time remaining of current TCB in list     */
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                               - OSTickCtr;
 80056dc:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <OS_TickListInsert+0x1e4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	1ad2      	subs	r2, r2, r3
            p_tcb1->TickRemain = p_tcb1->TickCtrMatch            /* Compute time remaining of current TCB in list     */
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (p_tcb->TickRemain > p_tcb1->TickRemain) {        /* Do we need to insert AFTER current TCB in list?   */
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d913      	bls.n	800571a <OS_TickListInsert+0x166>
                if (p_tcb1->TickNextPtr != (OS_TCB *)0) {        /* Yes, are we pointing at the last TCB in the list? */
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <OS_TickListInsert+0x14e>
                    p_tcb1               =  p_tcb1->TickNextPtr; /* No,  Point to next TCB in the list                */
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005700:	e02d      	b.n	800575e <OS_TickListInsert+0x1aa>
                } else {
                    p_tcb->TickNextPtr   = (OS_TCB *)0;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	615a      	str	r2, [r3, #20]
                    p_tcb->TickPrevPtr   =  p_tcb1;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570c:	619a      	str	r2, [r3, #24]
                    p_tcb1->TickNextPtr  =  p_tcb;               /* Yes, TCB to add is now new last entry in the list */
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	615a      	str	r2, [r3, #20]
                    p_tcb1               = (OS_TCB *)0;          /* Break loop                                        */
 8005714:	2300      	movs	r3, #0
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	e021      	b.n	800575e <OS_TickListInsert+0x1aa>
                }
            } else {                                             /* Insert before the current TCB                     */
                if (p_tcb1->TickPrevPtr == (OS_TCB *)0) {        /* Are we inserting before the first TCB?            */
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10c      	bne.n	800573c <OS_TickListInsert+0x188>
                    p_tcb->TickPrevPtr   = (OS_TCB *)0;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr   =  p_tcb1;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572c:	615a      	str	r2, [r3, #20]
                    p_tcb1->TickPrevPtr  =  p_tcb;
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	619a      	str	r2, [r3, #24]
                    p_spoke->FirstPtr    =  p_tcb;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e00e      	b.n	800575a <OS_TickListInsert+0x1a6>
                } else {                                         /* Insert in between 2 TCBs already in the list      */
                    p_tcb0               =  p_tcb1->TickPrevPtr;
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	613b      	str	r3, [r7, #16]
                    p_tcb->TickPrevPtr   =  p_tcb0;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	619a      	str	r2, [r3, #24]
                    p_tcb->TickNextPtr   =  p_tcb1;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574c:	615a      	str	r2, [r3, #20]
                    p_tcb0->TickNextPtr  =  p_tcb;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	615a      	str	r2, [r3, #20]
                    p_tcb1->TickPrevPtr  =  p_tcb;
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	619a      	str	r2, [r3, #24]
                }
                p_tcb1 = (OS_TCB *)0;                            /* Break loop                                        */
 800575a:	2300      	movs	r3, #0
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
        while (p_tcb1 != (OS_TCB *)0) {
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1b9      	bne.n	80056d8 <OS_TickListInsert+0x124>
            }
        }
        p_spoke->NbrEntries++;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	889b      	ldrh	r3, [r3, #4]
 8005768:	3301      	adds	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	809a      	strh	r2, [r3, #4]
    }
    if (p_spoke->NbrEntriesMax < p_spoke->NbrEntries) {          /* Keep track of maximum # of entries in each spoke  */
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	88da      	ldrh	r2, [r3, #6]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	889b      	ldrh	r3, [r3, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d203      	bcs.n	8005784 <OS_TickListInsert+0x1d0>
        p_spoke->NbrEntriesMax = p_spoke->NbrEntries;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	889a      	ldrh	r2, [r3, #4]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	80da      	strh	r2, [r3, #6]
    }
    p_tcb->TickSpokePtr = p_spoke;                               /* Link back to tick spoke                           */
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	61da      	str	r2, [r3, #28]
   *p_err               = OS_ERR_NONE;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2200      	movs	r2, #0
 800578e:	801a      	strh	r2, [r3, #0]
}
 8005790:	372c      	adds	r7, #44	; 0x2c
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr
 8005798:	20008a38 	.word	0x20008a38
 800579c:	080064f8 	.word	0x080064f8
 80057a0:	20007478 	.word	0x20007478

080057a4 <OS_TickListRemove>:
*              2) This function is assumed to be called with interrupts disabled.
************************************************************************************************************************
*/

void  OS_TickListRemove (OS_TCB  *p_tcb)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
    OS_TCB         *p_tcb1;
    OS_TCB         *p_tcb2;



    p_spoke = p_tcb->TickSpokePtr;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	617b      	str	r3, [r7, #20]
    if (p_spoke != (OS_TICK_SPOKE *)0) {                              /* Confirm that task is in tick list            */
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d035      	beq.n	8005824 <OS_TickListRemove+0x80>
        p_tcb->TickRemain = (OS_TICK)0u;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	651a      	str	r2, [r3, #80]	; 0x50
        if (p_spoke->FirstPtr == p_tcb) {                             /* Is timer to remove at the beginning of list? */
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d10c      	bne.n	80057e2 <OS_TickListRemove+0x3e>
            p_tcb1            = (OS_TCB *)p_tcb->TickNextPtr;         /* Yes                                          */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	613b      	str	r3, [r7, #16]
            p_spoke->FirstPtr = p_tcb1;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	601a      	str	r2, [r3, #0]
            if (p_tcb1 != (OS_TCB *)0) {
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d012      	beq.n	8005800 <OS_TickListRemove+0x5c>
                p_tcb1->TickPrevPtr = (OS_TCB *)0;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2200      	movs	r2, #0
 80057de:	619a      	str	r2, [r3, #24]
 80057e0:	e00e      	b.n	8005800 <OS_TickListRemove+0x5c>
            }
        } else {
            p_tcb1              = p_tcb->TickPrevPtr;                 /* No, remove timer from somewhere in the list  */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	613b      	str	r3, [r7, #16]
            p_tcb2              = p_tcb->TickNextPtr;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	60fb      	str	r3, [r7, #12]
            p_tcb1->TickNextPtr = p_tcb2;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	615a      	str	r2, [r3, #20]
            if (p_tcb2 != (OS_TCB *)0) {
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <OS_TickListRemove+0x5c>
                p_tcb2->TickPrevPtr = p_tcb1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	619a      	str	r2, [r3, #24]
            }
        }
        p_tcb->TickNextPtr  = (OS_TCB        *)0;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	615a      	str	r2, [r3, #20]
        p_tcb->TickPrevPtr  = (OS_TCB        *)0;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	619a      	str	r2, [r3, #24]
        p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	61da      	str	r2, [r3, #28]
        p_tcb->TickCtrMatch = (OS_TICK        )0u;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	64da      	str	r2, [r3, #76]	; 0x4c
        p_spoke->NbrEntries--;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	889b      	ldrh	r3, [r3, #4]
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	809a      	strh	r2, [r3, #4]
    }
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr
	...

08005830 <OS_TickListResetPeak>:
************************************************************************************************************************
*/


void  OS_TickListResetPeak (void)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
    OS_TICK_SPOKE_IX   i;
    OS_TICK_SPOKE     *p_spoke;



    for (i = 0u; i < OSCfg_TickWheelSize; i++) {
 8005836:	2300      	movs	r3, #0
 8005838:	80fb      	strh	r3, [r7, #6]
 800583a:	e00a      	b.n	8005852 <OS_TickListResetPeak+0x22>
        p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	4a09      	ldr	r2, [pc, #36]	; (8005868 <OS_TickListResetPeak+0x38>)
 8005842:	4413      	add	r3, r2
 8005844:	603b      	str	r3, [r7, #0]
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2200      	movs	r2, #0
 800584a:	80da      	strh	r2, [r3, #6]
    for (i = 0u; i < OSCfg_TickWheelSize; i++) {
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	3301      	adds	r3, #1
 8005850:	80fb      	strh	r3, [r7, #6]
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <OS_TickListResetPeak+0x3c>)
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	429a      	cmp	r2, r3
 800585a:	d3ef      	bcc.n	800583c <OS_TickListResetPeak+0xc>
    }
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20007478 	.word	0x20007478
 800586c:	080064f8 	.word	0x080064f8

08005870 <OS_TickListUpdate>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TickListUpdate (void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
    OS_TCB            *p_tcb;
    OS_TCB            *p_tcb_next;
    OS_TICK_SPOKE_IX   spoke;
    CPU_TS             ts_start;
    CPU_TS             ts_end;
    CPU_SR_ALLOC();
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]


    OS_CRITICAL_ENTER();
 800587a:	f7fa fc8d 	bl	8000198 <CPU_SR_Save>
 800587e:	6178      	str	r0, [r7, #20]
 8005880:	f7fb fc6c 	bl	800115c <CPU_IntDisMeasStart>
 8005884:	4b8f      	ldr	r3, [pc, #572]	; (8005ac4 <OS_TickListUpdate+0x254>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	b2da      	uxtb	r2, r3
 800588c:	4b8d      	ldr	r3, [pc, #564]	; (8005ac4 <OS_TickListUpdate+0x254>)
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	4b8c      	ldr	r3, [pc, #560]	; (8005ac4 <OS_TickListUpdate+0x254>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <OS_TickListUpdate+0x2c>
 8005898:	f7fc fec6 	bl	8002628 <OS_SchedLockTimeMeasStart>
 800589c:	f7fb fc7e 	bl	800119c <CPU_IntDisMeasStop>
 80058a0:	6978      	ldr	r0, [r7, #20]
 80058a2:	f7fa fc7d 	bl	80001a0 <CPU_SR_Restore>
    ts_start = OS_TS_GET();
 80058a6:	f7fb f94b 	bl	8000b40 <CPU_TS_TmrRd>
 80058aa:	6138      	str	r0, [r7, #16]
    OSTickCtr++;                                                       /* Keep track of the number of ticks           */
 80058ac:	4b86      	ldr	r3, [pc, #536]	; (8005ac8 <OS_TickListUpdate+0x258>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3301      	adds	r3, #1
 80058b2:	4a85      	ldr	r2, [pc, #532]	; (8005ac8 <OS_TickListUpdate+0x258>)
 80058b4:	6013      	str	r3, [r2, #0]
    spoke    = (OS_TICK_SPOKE_IX)(OSTickCtr % OSCfg_TickWheelSize);
 80058b6:	4b84      	ldr	r3, [pc, #528]	; (8005ac8 <OS_TickListUpdate+0x258>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a84      	ldr	r2, [pc, #528]	; (8005acc <OS_TickListUpdate+0x25c>)
 80058bc:	8812      	ldrh	r2, [r2, #0]
 80058be:	fbb3 f1f2 	udiv	r1, r3, r2
 80058c2:	fb02 f201 	mul.w	r2, r2, r1
 80058c6:	1a9b      	subs	r3, r3, r2
 80058c8:	81fb      	strh	r3, [r7, #14]
    p_spoke  = &OSCfg_TickWheel[spoke];
 80058ca:	89fb      	ldrh	r3, [r7, #14]
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4a80      	ldr	r2, [pc, #512]	; (8005ad0 <OS_TickListUpdate+0x260>)
 80058d0:	4413      	add	r3, r2
 80058d2:	60bb      	str	r3, [r7, #8]
    p_tcb    = p_spoke->FirstPtr;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	61bb      	str	r3, [r7, #24]
    done     = DEF_FALSE;
 80058da:	2300      	movs	r3, #0
 80058dc:	77fb      	strb	r3, [r7, #31]
    while (done == DEF_FALSE) {
 80058de:	e0b3      	b.n	8005a48 <OS_TickListUpdate+0x1d8>
        if (p_tcb != (OS_TCB *)0) {
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80ae 	beq.w	8005a44 <OS_TickListUpdate+0x1d4>
            p_tcb_next = p_tcb->TickNextPtr;                           /* Point to next TCB to update                 */
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	607b      	str	r3, [r7, #4]
            switch (p_tcb->TaskState) {
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80058f4:	2b07      	cmp	r3, #7
 80058f6:	f200 80a1 	bhi.w	8005a3c <OS_TickListUpdate+0x1cc>
 80058fa:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <OS_TickListUpdate+0x90>)
 80058fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005900:	08005a3d 	.word	0x08005a3d
 8005904:	08005921 	.word	0x08005921
 8005908:	08005a3d 	.word	0x08005a3d
 800590c:	08005951 	.word	0x08005951
 8005910:	08005a3d 	.word	0x08005a3d
 8005914:	080059af 	.word	0x080059af
 8005918:	08005a3d 	.word	0x08005a3d
 800591c:	080059df 	.word	0x080059df
                case OS_TASK_STATE_SUSPENDED:
                case OS_TASK_STATE_PEND_SUSPENDED:
                     break;

                case OS_TASK_STATE_DLY:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                                       - OSTickCtr;
 8005924:	4b68      	ldr	r3, [pc, #416]	; (8005ac8 <OS_TickListUpdate+0x258>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	1ad2      	subs	r2, r2, r3
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	651a      	str	r2, [r3, #80]	; 0x50
                     if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005932:	4b65      	ldr	r3, [pc, #404]	; (8005ac8 <OS_TickListUpdate+0x258>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d107      	bne.n	800594a <OS_TickListUpdate+0xda>
                         p_tcb->TaskState = OS_TASK_STATE_RDY;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                         OS_TaskRdy(p_tcb);                            /* Make task ready to run                      */
 8005942:	69b8      	ldr	r0, [r7, #24]
 8005944:	f7fc ff45 	bl	80027d2 <OS_TaskRdy>
                     } else {
                         done             = DEF_TRUE;                  /* Don't find a match, we're done!             */
                     }
                     break;
 8005948:	e079      	b.n	8005a3e <OS_TickListUpdate+0x1ce>
                         done             = DEF_TRUE;                  /* Don't find a match, we're done!             */
 800594a:	2301      	movs	r3, #1
 800594c:	77fb      	strb	r3, [r7, #31]
                     break;
 800594e:	e076      	b.n	8005a3e <OS_TickListUpdate+0x1ce>

                case OS_TASK_STATE_PEND_TIMEOUT:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                                       - OSTickCtr;
 8005954:	4b5c      	ldr	r3, [pc, #368]	; (8005ac8 <OS_TickListUpdate+0x258>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	1ad2      	subs	r2, r2, r3
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	651a      	str	r2, [r3, #80]	; 0x50
                     if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005962:	4b59      	ldr	r3, [pc, #356]	; (8005ac8 <OS_TickListUpdate+0x258>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d11e      	bne.n	80059a8 <OS_TickListUpdate+0x138>
#if (OS_MSG_EN > 0u)
                         p_tcb->MsgPtr     = (void      *)0;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2200      	movs	r2, #0
 800596e:	65da      	str	r2, [r3, #92]	; 0x5c
                         p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2200      	movs	r2, #0
 8005974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
#endif
                         p_tcb->TS         = OS_TS_GET();
 8005978:	f7fb f8e2 	bl	8000b40 <CPU_TS_TmrRd>
 800597c:	4602      	mov	r2, r0
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	641a      	str	r2, [r3, #64]	; 0x40
                         OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
 8005982:	69b8      	ldr	r0, [r7, #24]
 8005984:	f7fc fb93 	bl	80020ae <OS_PendListRemove>
                         OS_TaskRdy(p_tcb);
 8005988:	69b8      	ldr	r0, [r7, #24]
 800598a:	f7fc ff22 	bl	80027d2 <OS_TaskRdy>
                         p_tcb->TaskState  = OS_TASK_STATE_RDY;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                         p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2203      	movs	r2, #3
 800599a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                         p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                     } else {
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
                     }
                     break;
 80059a6:	e04a      	b.n	8005a3e <OS_TickListUpdate+0x1ce>
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
 80059a8:	2301      	movs	r3, #1
 80059aa:	77fb      	strb	r3, [r7, #31]
                     break;
 80059ac:	e047      	b.n	8005a3e <OS_TickListUpdate+0x1ce>

                case OS_TASK_STATE_DLY_SUSPENDED:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                                       - OSTickCtr;
 80059b2:	4b45      	ldr	r3, [pc, #276]	; (8005ac8 <OS_TickListUpdate+0x258>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	1ad2      	subs	r2, r2, r3
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	651a      	str	r2, [r3, #80]	; 0x50
                     if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059c0:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <OS_TickListUpdate+0x258>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d107      	bne.n	80059d8 <OS_TickListUpdate+0x168>
                         p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2204      	movs	r2, #4
 80059cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                         OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
 80059d0:	69b8      	ldr	r0, [r7, #24]
 80059d2:	f7ff fee7 	bl	80057a4 <OS_TickListRemove>
                     } else {
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
                     }
                     break;
 80059d6:	e032      	b.n	8005a3e <OS_TickListUpdate+0x1ce>
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
 80059d8:	2301      	movs	r3, #1
 80059da:	77fb      	strb	r3, [r7, #31]
                     break;
 80059dc:	e02f      	b.n	8005a3e <OS_TickListUpdate+0x1ce>

                case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                                       - OSTickCtr;
 80059e2:	4b39      	ldr	r3, [pc, #228]	; (8005ac8 <OS_TickListUpdate+0x258>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	1ad2      	subs	r2, r2, r3
                     p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	651a      	str	r2, [r3, #80]	; 0x50
                     if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059f0:	4b35      	ldr	r3, [pc, #212]	; (8005ac8 <OS_TickListUpdate+0x258>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d11e      	bne.n	8005a36 <OS_TickListUpdate+0x1c6>
#if (OS_MSG_EN > 0u)
                         p_tcb->MsgPtr     = (void      *)0;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2200      	movs	r2, #0
 80059fc:	65da      	str	r2, [r3, #92]	; 0x5c
                         p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
#endif
                         p_tcb->TS         = OS_TS_GET();
 8005a06:	f7fb f89b 	bl	8000b40 <CPU_TS_TmrRd>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40
                         OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
 8005a10:	69b8      	ldr	r0, [r7, #24]
 8005a12:	f7fc fb4c 	bl	80020ae <OS_PendListRemove>
                         OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
 8005a16:	69b8      	ldr	r0, [r7, #24]
 8005a18:	f7ff fec4 	bl	80057a4 <OS_TickListRemove>
                         p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2204      	movs	r2, #4
 8005a20:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                         p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2203      	movs	r2, #3
 8005a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                         p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                     } else {
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
                     }
                     break;
 8005a34:	e003      	b.n	8005a3e <OS_TickListUpdate+0x1ce>
                         done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
 8005a36:	2301      	movs	r3, #1
 8005a38:	77fb      	strb	r3, [r7, #31]
                     break;
 8005a3a:	e000      	b.n	8005a3e <OS_TickListUpdate+0x1ce>

                default:
                     break;
 8005a3c:	bf00      	nop
            }
            p_tcb = p_tcb_next;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	e001      	b.n	8005a48 <OS_TickListUpdate+0x1d8>
        } else {
            done  = DEF_TRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	77fb      	strb	r3, [r7, #31]
    while (done == DEF_FALSE) {
 8005a48:	7ffb      	ldrb	r3, [r7, #31]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f43f af48 	beq.w	80058e0 <OS_TickListUpdate+0x70>
        }
    }
    ts_end = OS_TS_GET() - ts_start;                                   /* Measure execution time of tick task         */
 8005a50:	f7fb f876 	bl	8000b40 <CPU_TS_TmrRd>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	603b      	str	r3, [r7, #0]
    if (OSTickTaskTimeMax < ts_end) {
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <OS_TickListUpdate+0x264>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d202      	bcs.n	8005a6c <OS_TickListUpdate+0x1fc>
        OSTickTaskTimeMax = ts_end;
 8005a66:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <OS_TickListUpdate+0x264>)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6013      	str	r3, [r2, #0]
    }
    OS_CRITICAL_EXIT();
 8005a6c:	f7fa fb94 	bl	8000198 <CPU_SR_Save>
 8005a70:	6178      	str	r0, [r7, #20]
 8005a72:	f7fb fb73 	bl	800115c <CPU_IntDisMeasStart>
 8005a76:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <OS_TickListUpdate+0x254>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <OS_TickListUpdate+0x254>)
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <OS_TickListUpdate+0x254>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d113      	bne.n	8005ab2 <OS_TickListUpdate+0x242>
 8005a8a:	f7fc fddf 	bl	800264c <OS_SchedLockTimeMeasStop>
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <OS_TickListUpdate+0x268>)
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <OS_TickListUpdate+0x236>
 8005a96:	f7fb fb81 	bl	800119c <CPU_IntDisMeasStop>
 8005a9a:	6978      	ldr	r0, [r7, #20]
 8005a9c:	f7fa fb80 	bl	80001a0 <CPU_SR_Restore>
 8005aa0:	f7fc fd92 	bl	80025c8 <OS_Sched0>
}
 8005aa4:	e00a      	b.n	8005abc <OS_TickListUpdate+0x24c>
    OS_CRITICAL_EXIT();
 8005aa6:	f7fb fb79 	bl	800119c <CPU_IntDisMeasStop>
 8005aaa:	6978      	ldr	r0, [r7, #20]
 8005aac:	f7fa fb78 	bl	80001a0 <CPU_SR_Restore>
}
 8005ab0:	e004      	b.n	8005abc <OS_TickListUpdate+0x24c>
    OS_CRITICAL_EXIT();
 8005ab2:	f7fb fb73 	bl	800119c <CPU_IntDisMeasStop>
 8005ab6:	6978      	ldr	r0, [r7, #20]
 8005ab8:	f7fa fb72 	bl	80001a0 <CPU_SR_Restore>
}
 8005abc:	bf00      	nop
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	2000850c 	.word	0x2000850c
 8005ac8:	20008a38 	.word	0x20008a38
 8005acc:	080064f8 	.word	0x080064f8
 8005ad0:	20007478 	.word	0x20007478
 8005ad4:	20008b34 	.word	0x20008b34
 8005ad8:	20008b44 	.word	0x20008b44

08005adc <OSTimeDly>:
*/

void  OSTimeDly (OS_TICK   dly,
                 OS_OPT    opt,
                 OS_ERR   *p_err)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	817b      	strh	r3, [r7, #10]
    CPU_SR_ALLOC();
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 8005aee:	4b4d      	ldr	r3, [pc, #308]	; (8005c24 <OSTimeDly+0x148>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d004      	beq.n	8005b00 <OSTimeDly+0x24>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f247 2275 	movw	r2, #29301	; 0x7275
 8005afc:	801a      	strh	r2, [r3, #0]
        return;
 8005afe:	e08e      	b.n	8005c1e <OSTimeDly+0x142>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8005b00:	4b49      	ldr	r3, [pc, #292]	; (8005c28 <OSTimeDly+0x14c>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d004      	beq.n	8005b12 <OSTimeDly+0x36>
       *p_err = OS_ERR_SCHED_LOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f646 5263 	movw	r2, #28003	; 0x6d63
 8005b0e:	801a      	strh	r2, [r3, #0]
        return;
 8005b10:	e085      	b.n	8005c1e <OSTimeDly+0x142>
    }

    switch (opt) {
 8005b12:	897b      	ldrh	r3, [r7, #10]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d81d      	bhi.n	8005b54 <OSTimeDly+0x78>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <OSTimeDly+0x44>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b55 	.word	0x08005b55
 8005b28:	08005b45 	.word	0x08005b45
 8005b2c:	08005b55 	.word	0x08005b55
 8005b30:	08005b5f 	.word	0x08005b5f
 8005b34:	08005b55 	.word	0x08005b55
 8005b38:	08005b55 	.word	0x08005b55
 8005b3c:	08005b55 	.word	0x08005b55
 8005b40:	08005b45 	.word	0x08005b45
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <OSTimeDly+0x86>
                *p_err = OS_ERR_TIME_ZERO_DLY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f247 227e 	movw	r2, #29310	; 0x727e
 8005b50:	801a      	strh	r2, [r3, #0]
                 return;
 8005b52:	e064      	b.n	8005c1e <OSTimeDly+0x142>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005b5a:	801a      	strh	r2, [r3, #0]
             return;
 8005b5c:	e05f      	b.n	8005c1e <OSTimeDly+0x142>
             break;
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <OSTimeDly+0x88>
             break;
 8005b62:	bf00      	nop
    }

    OS_CRITICAL_ENTER();
 8005b64:	f7fa fb18 	bl	8000198 <CPU_SR_Save>
 8005b68:	6178      	str	r0, [r7, #20]
 8005b6a:	f7fb faf7 	bl	800115c <CPU_IntDisMeasStart>
 8005b6e:	4b2e      	ldr	r3, [pc, #184]	; (8005c28 <OSTimeDly+0x14c>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	3301      	adds	r3, #1
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	4b2c      	ldr	r3, [pc, #176]	; (8005c28 <OSTimeDly+0x14c>)
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	4b2b      	ldr	r3, [pc, #172]	; (8005c28 <OSTimeDly+0x14c>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <OSTimeDly+0xaa>
 8005b82:	f7fc fd51 	bl	8002628 <OS_SchedLockTimeMeasStart>
 8005b86:	f7fb fb09 	bl	800119c <CPU_IntDisMeasStop>
 8005b8a:	6978      	ldr	r0, [r7, #20]
 8005b8c:	f7fa fb08 	bl	80001a0 <CPU_SR_Restore>
    OSTCBCurPtr->TaskState = OS_TASK_STATE_DLY;
 8005b90:	4b26      	ldr	r3, [pc, #152]	; (8005c2c <OSTimeDly+0x150>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    OS_TickListInsert(OSTCBCurPtr,
 8005b9a:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <OSTimeDly+0x150>)
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	897a      	ldrh	r2, [r7, #10]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	f7ff fd06 	bl	80055b4 <OS_TickListInsert>
                      dly,
                      opt,
                      p_err);
    if (*p_err != OS_ERR_NONE) {
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d016      	beq.n	8005bde <OSTimeDly+0x102>
         OS_CRITICAL_EXIT_NO_SCHED();
 8005bb0:	f7fa faf2 	bl	8000198 <CPU_SR_Save>
 8005bb4:	6178      	str	r0, [r7, #20]
 8005bb6:	f7fb fad1 	bl	800115c <CPU_IntDisMeasStart>
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <OSTimeDly+0x14c>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <OSTimeDly+0x14c>)
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <OSTimeDly+0x14c>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <OSTimeDly+0xf6>
 8005bce:	f7fc fd3d 	bl	800264c <OS_SchedLockTimeMeasStop>
 8005bd2:	f7fb fae3 	bl	800119c <CPU_IntDisMeasStop>
 8005bd6:	6978      	ldr	r0, [r7, #20]
 8005bd8:	f7fa fae2 	bl	80001a0 <CPU_SR_Restore>
         return;
 8005bdc:	e01f      	b.n	8005c1e <OSTimeDly+0x142>
    }
    OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <OSTimeDly+0x150>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fc fc98 	bl	8002518 <OS_RdyListRemove>
    OS_CRITICAL_EXIT_NO_SCHED();
 8005be8:	f7fa fad6 	bl	8000198 <CPU_SR_Save>
 8005bec:	6178      	str	r0, [r7, #20]
 8005bee:	f7fb fab5 	bl	800115c <CPU_IntDisMeasStart>
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <OSTimeDly+0x14c>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <OSTimeDly+0x14c>)
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <OSTimeDly+0x14c>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <OSTimeDly+0x12e>
 8005c06:	f7fc fd21 	bl	800264c <OS_SchedLockTimeMeasStop>
 8005c0a:	f7fb fac7 	bl	800119c <CPU_IntDisMeasStop>
 8005c0e:	6978      	ldr	r0, [r7, #20]
 8005c10:	f7fa fac6 	bl	80001a0 <CPU_SR_Restore>
    OSSched();                                              /* Find next task to run!                                 */
 8005c14:	f7fb ff84 	bl	8001b20 <OSSched>
   *p_err = OS_ERR_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	801a      	strh	r2, [r3, #0]
}
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	200087b4 	.word	0x200087b4
 8005c28:	2000850c 	.word	0x2000850c
 8005c2c:	20008788 	.word	0x20008788

08005c30 <OSTimeDlyHMSM>:
                     CPU_INT16U   minutes,
                     CPU_INT16U   seconds,
                     CPU_INT32U   milli,
                     OS_OPT       opt,
                     OS_ERR      *p_err)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	607b      	str	r3, [r7, #4]
 8005c38:	4603      	mov	r3, r0
 8005c3a:	81fb      	strh	r3, [r7, #14]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	81bb      	strh	r3, [r7, #12]
 8005c40:	4613      	mov	r3, r2
 8005c42:	817b      	strh	r3, [r7, #10]
    CPU_BOOLEAN  opt_non_strict;
#endif
    OS_OPT       opt_time;
    OS_RATE_HZ   tick_rate;
    OS_TICK      ticks;
    CPU_SR_ALLOC();
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 8005c48:	4b91      	ldr	r3, [pc, #580]	; (8005e90 <OSTimeDlyHMSM+0x260>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d004      	beq.n	8005c5a <OSTimeDlyHMSM+0x2a>
       *p_err = OS_ERR_TIME_DLY_ISR;
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	f247 2275 	movw	r2, #29301	; 0x7275
 8005c56:	801a      	strh	r2, [r3, #0]
        return;
 8005c58:	e116      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8005c5a:	4b8e      	ldr	r3, [pc, #568]	; (8005e94 <OSTimeDlyHMSM+0x264>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <OSTimeDlyHMSM+0x3c>
       *p_err = OS_ERR_SCHED_LOCKED;
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	f646 5263 	movw	r2, #28003	; 0x6d63
 8005c68:	801a      	strh	r2, [r3, #0]
        return;
 8005c6a:	e10d      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
    }

    opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
 8005c6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c6e:	f003 030e 	and.w	r3, r3, #14
 8005c72:	837b      	strh	r3, [r7, #26]
    switch (opt_time) {
 8005c74:	8b7b      	ldrh	r3, [r7, #26]
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	d825      	bhi.n	8005cc6 <OSTimeDlyHMSM+0x96>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <OSTimeDlyHMSM+0x50>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cc7 	.word	0x08005cc7
 8005c88:	08005ca5 	.word	0x08005ca5
 8005c8c:	08005cc7 	.word	0x08005cc7
 8005c90:	08005cd1 	.word	0x08005cd1
 8005c94:	08005cc7 	.word	0x08005cc7
 8005c98:	08005cc7 	.word	0x08005cc7
 8005c9c:	08005cc7 	.word	0x08005cc7
 8005ca0:	08005ca5 	.word	0x08005ca5
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d114      	bne.n	8005cd4 <OSTimeDlyHMSM+0xa4>
                 if (seconds == (CPU_INT16U)0u) {
 8005caa:	897b      	ldrh	r3, [r7, #10]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d111      	bne.n	8005cd4 <OSTimeDlyHMSM+0xa4>
                     if (minutes == (CPU_INT16U)0u) {
 8005cb0:	89bb      	ldrh	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10e      	bne.n	8005cd4 <OSTimeDlyHMSM+0xa4>
                         if (hours == (CPU_INT16U)0u) {
 8005cb6:	89fb      	ldrh	r3, [r7, #14]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <OSTimeDlyHMSM+0xa4>
                            *p_err = OS_ERR_TIME_ZERO_DLY;
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	f247 227e 	movw	r2, #29310	; 0x727e
 8005cc2:	801a      	strh	r2, [r3, #0]
                             return;
 8005cc4:	e0e0      	b.n	8005e88 <OSTimeDlyHMSM+0x258>

        case OS_OPT_TIME_MATCH:
             break;

        default:
            *p_err = OS_ERR_OPT_INVALID;
 8005cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc8:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005ccc:	801a      	strh	r2, [r3, #0]
             return;
 8005cce:	e0db      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
             break;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <OSTimeDlyHMSM+0xa6>
             break;
 8005cd4:	bf00      	nop
    }

#if OS_CFG_ARG_CHK_EN > 0u                                  /* Validate arguments to be within range                  */
    opt_invalid = DEF_BIT_IS_SET_ANY(opt, ~OS_OPT_TIME_OPTS_MASK);
 8005cd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cd8:	f023 031e 	bic.w	r3, r3, #30
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bf14      	ite	ne
 8005ce0:	2301      	movne	r3, #1
 8005ce2:	2300      	moveq	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	767b      	strb	r3, [r7, #25]
    if (opt_invalid == DEF_YES) {
 8005ce8:	7e7b      	ldrb	r3, [r7, #25]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d104      	bne.n	8005cf8 <OSTimeDlyHMSM+0xc8>
       *p_err = OS_ERR_OPT_INVALID;
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	f645 6225 	movw	r2, #24101	; 0x5e25
 8005cf4:	801a      	strh	r2, [r3, #0]
        return;
 8005cf6:	e0c7      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
    }

    opt_non_strict = DEF_BIT_IS_SET(opt, OS_OPT_TIME_HMSM_NON_STRICT);
 8005cf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <OSTimeDlyHMSM+0xd6>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <OSTimeDlyHMSM+0xd8>
 8005d06:	2300      	movs	r3, #0
 8005d08:	763b      	strb	r3, [r7, #24]
    if (opt_non_strict != DEF_YES) {
 8005d0a:	7e3b      	ldrb	r3, [r7, #24]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d020      	beq.n	8005d52 <OSTimeDlyHMSM+0x122>
         if (milli   > (CPU_INT32U)999u) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d16:	d304      	bcc.n	8005d22 <OSTimeDlyHMSM+0xf2>
            *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	f247 227b 	movw	r2, #29307	; 0x727b
 8005d1e:	801a      	strh	r2, [r3, #0]
             return;
 8005d20:	e0b2      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
         }
         if (seconds > (CPU_INT16U)59u) {
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	2b3b      	cmp	r3, #59	; 0x3b
 8005d26:	d904      	bls.n	8005d32 <OSTimeDlyHMSM+0x102>
            *p_err = OS_ERR_TIME_INVALID_SECONDS;
 8005d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2a:	f247 227a 	movw	r2, #29306	; 0x727a
 8005d2e:	801a      	strh	r2, [r3, #0]
             return;
 8005d30:	e0aa      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
         }
         if (minutes > (CPU_INT16U)59u) {
 8005d32:	89bb      	ldrh	r3, [r7, #12]
 8005d34:	2b3b      	cmp	r3, #59	; 0x3b
 8005d36:	d904      	bls.n	8005d42 <OSTimeDlyHMSM+0x112>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	f247 2279 	movw	r2, #29305	; 0x7279
 8005d3e:	801a      	strh	r2, [r3, #0]
             return;
 8005d40:	e0a2      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
         }
         if (hours   > (CPU_INT16U)99u) {
 8005d42:	89fb      	ldrh	r3, [r7, #14]
 8005d44:	2b63      	cmp	r3, #99	; 0x63
 8005d46:	d917      	bls.n	8005d78 <OSTimeDlyHMSM+0x148>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	f247 2278 	movw	r2, #29304	; 0x7278
 8005d4e:	801a      	strh	r2, [r3, #0]
             return;
 8005d50:	e09a      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
         }
    } else {
         if (minutes > (CPU_INT16U)9999u) {
 8005d52:	89bb      	ldrh	r3, [r7, #12]
 8005d54:	f242 720f 	movw	r2, #9999	; 0x270f
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d904      	bls.n	8005d66 <OSTimeDlyHMSM+0x136>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	f247 2279 	movw	r2, #29305	; 0x7279
 8005d62:	801a      	strh	r2, [r3, #0]
             return;
 8005d64:	e090      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
         }
         if (hours   > (CPU_INT16U)999u) {
 8005d66:	89fb      	ldrh	r3, [r7, #14]
 8005d68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d6c:	d304      	bcc.n	8005d78 <OSTimeDlyHMSM+0x148>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	f247 2278 	movw	r2, #29304	; 0x7278
 8005d74:	801a      	strh	r2, [r3, #0]
             return;
 8005d76:	e087      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
    }
#endif

                                                            /* Compute the total number of clock ticks required..     */
                                                            /* .. (rounded to the nearest tick)                       */
    tick_rate = OSCfg_TickRate_Hz;
 8005d78:	4b47      	ldr	r3, [pc, #284]	; (8005e98 <OSTimeDlyHMSM+0x268>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	617b      	str	r3, [r7, #20]
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 8005d7e:	89fb      	ldrh	r3, [r7, #14]
 8005d80:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8005d84:	fb02 f103 	mul.w	r1, r2, r3
 8005d88:	89ba      	ldrh	r2, [r7, #12]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	18ca      	adds	r2, r1, r3
 8005d94:	897b      	ldrh	r3, [r7, #10]
 8005d96:	4413      	add	r3, r2
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	fb02 f203 	mul.w	r2, r2, r3
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
 8005d9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	fbb1 f1f3 	udiv	r1, r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	440b      	add	r3, r1
 8005dac:	6979      	ldr	r1, [r7, #20]
 8005dae:	fb01 f303 	mul.w	r3, r1, r3
 8005db2:	493a      	ldr	r1, [pc, #232]	; (8005e9c <OSTimeDlyHMSM+0x26c>)
 8005db4:	fba1 1303 	umull	r1, r3, r1, r3
 8005db8:	099b      	lsrs	r3, r3, #6
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 8005dba:	4413      	add	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]

    if (ticks > (OS_TICK)0u) {
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d05d      	beq.n	8005e80 <OSTimeDlyHMSM+0x250>
        OS_CRITICAL_ENTER();
 8005dc4:	f7fa f9e8 	bl	8000198 <CPU_SR_Save>
 8005dc8:	61f8      	str	r0, [r7, #28]
 8005dca:	f7fb f9c7 	bl	800115c <CPU_IntDisMeasStart>
 8005dce:	4b31      	ldr	r3, [pc, #196]	; (8005e94 <OSTimeDlyHMSM+0x264>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <OSTimeDlyHMSM+0x264>)
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	4b2e      	ldr	r3, [pc, #184]	; (8005e94 <OSTimeDlyHMSM+0x264>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <OSTimeDlyHMSM+0x1b6>
 8005de2:	f7fc fc21 	bl	8002628 <OS_SchedLockTimeMeasStart>
 8005de6:	f7fb f9d9 	bl	800119c <CPU_IntDisMeasStop>
 8005dea:	69f8      	ldr	r0, [r7, #28]
 8005dec:	f7fa f9d8 	bl	80001a0 <CPU_SR_Restore>
        OSTCBCurPtr->TaskState = OS_TASK_STATE_DLY;
 8005df0:	4b2b      	ldr	r3, [pc, #172]	; (8005ea0 <OSTimeDlyHMSM+0x270>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        OS_TickListInsert(OSTCBCurPtr,
 8005dfa:	4b29      	ldr	r3, [pc, #164]	; (8005ea0 <OSTimeDlyHMSM+0x270>)
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	8b7a      	ldrh	r2, [r7, #26]
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	6939      	ldr	r1, [r7, #16]
 8005e04:	f7ff fbd6 	bl	80055b4 <OS_TickListInsert>
                          ticks,
                          opt_time,
                          p_err);
        if (*p_err != OS_ERR_NONE) {
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d016      	beq.n	8005e3e <OSTimeDlyHMSM+0x20e>
             OS_CRITICAL_EXIT_NO_SCHED();
 8005e10:	f7fa f9c2 	bl	8000198 <CPU_SR_Save>
 8005e14:	61f8      	str	r0, [r7, #28]
 8005e16:	f7fb f9a1 	bl	800115c <CPU_IntDisMeasStart>
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <OSTimeDlyHMSM+0x264>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <OSTimeDlyHMSM+0x264>)
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <OSTimeDlyHMSM+0x264>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <OSTimeDlyHMSM+0x202>
 8005e2e:	f7fc fc0d 	bl	800264c <OS_SchedLockTimeMeasStop>
 8005e32:	f7fb f9b3 	bl	800119c <CPU_IntDisMeasStop>
 8005e36:	69f8      	ldr	r0, [r7, #28]
 8005e38:	f7fa f9b2 	bl	80001a0 <CPU_SR_Restore>
             return;
 8005e3c:	e024      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
        }
        OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
 8005e3e:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <OSTimeDlyHMSM+0x270>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fc fb68 	bl	8002518 <OS_RdyListRemove>
        OS_CRITICAL_EXIT_NO_SCHED();
 8005e48:	f7fa f9a6 	bl	8000198 <CPU_SR_Save>
 8005e4c:	61f8      	str	r0, [r7, #28]
 8005e4e:	f7fb f985 	bl	800115c <CPU_IntDisMeasStart>
 8005e52:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <OSTimeDlyHMSM+0x264>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <OSTimeDlyHMSM+0x264>)
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <OSTimeDlyHMSM+0x264>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <OSTimeDlyHMSM+0x23a>
 8005e66:	f7fc fbf1 	bl	800264c <OS_SchedLockTimeMeasStop>
 8005e6a:	f7fb f997 	bl	800119c <CPU_IntDisMeasStop>
 8005e6e:	69f8      	ldr	r0, [r7, #28]
 8005e70:	f7fa f996 	bl	80001a0 <CPU_SR_Restore>
        OSSched();                                          /* Find next task to run!                                 */
 8005e74:	f7fb fe54 	bl	8001b20 <OSSched>
       *p_err = OS_ERR_NONE;
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	e003      	b.n	8005e88 <OSTimeDlyHMSM+0x258>
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	f247 227e 	movw	r2, #29310	; 0x727e
 8005e86:	801a      	strh	r2, [r3, #0]
    }
}
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200087b4 	.word	0x200087b4
 8005e94:	2000850c 	.word	0x2000850c
 8005e98:	080064e4 	.word	0x080064e4
 8005e9c:	10624dd3 	.word	0x10624dd3
 8005ea0:	20008788 	.word	0x20008788

08005ea4 <OSTimeTick>:
* Returns    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af04      	add	r7, sp, #16
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    CPU_TS  ts;
#endif


    OSTimeTickHook();                                       /* Call user definable hook                               */
 8005eaa:	f7fb fc41 	bl	8001730 <OSTimeTickHook>

#if OS_CFG_ISR_POST_DEFERRED_EN > 0u

    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8005eae:	f7fa fe47 	bl	8000b40 <CPU_TS_TmrRd>
 8005eb2:	6078      	str	r0, [r7, #4]
    OS_IntQPost((OS_OBJ_TYPE) OS_OBJ_TYPE_TICK,             /* Post to ISR queue                                      */
                (void      *)&OSRdyList[OSPrioCur],
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <OSTimeTick+0x44>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4613      	mov	r3, r2
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <OSTimeTick+0x48>)
 8005ec4:	1899      	adds	r1, r3, r2
    OS_IntQPost((OS_OBJ_TYPE) OS_OBJ_TYPE_TICK,             /* Post to ISR queue                                      */
 8005ec6:	1cbb      	adds	r3, r7, #2
 8005ec8:	9303      	str	r3, [sp, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	9302      	str	r3, [sp, #8]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <OSTimeTick+0x4c>)
 8005edc:	f7fc ff54 	bl	8002d88 <OS_IntQPost>
                      (OS_ERR *)&err);
    }
#endif

#endif
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	200086b0 	.word	0x200086b0
 8005eec:	20008520 	.word	0x20008520
 8005ef0:	4b434954 	.word	0x4b434954

08005ef4 <OS_TmrInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrInit (OS_ERR  *p_err)
{
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b08f      	sub	sp, #60	; 0x3c
 8005ef8:	af0a      	add	r7, sp, #40	; 0x28
 8005efa:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSTmrDbgListPtr = (OS_TMR *)0;
 8005efc:	4b3b      	ldr	r3, [pc, #236]	; (8005fec <OS_TmrInit+0xf8>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
#endif

    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
 8005f02:	4b3b      	ldr	r3, [pc, #236]	; (8005ff0 <OS_TmrInit+0xfc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <OS_TmrInit+0x28>
        OSTmrUpdateCnt = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 8005f0a:	4b3a      	ldr	r3, [pc, #232]	; (8005ff4 <OS_TmrInit+0x100>)
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b38      	ldr	r3, [pc, #224]	; (8005ff0 <OS_TmrInit+0xfc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	4a38      	ldr	r2, [pc, #224]	; (8005ff8 <OS_TmrInit+0x104>)
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	e007      	b.n	8005f2c <OS_TmrInit+0x38>
    } else {
        OSTmrUpdateCnt = OSCfg_TickRate_Hz / (OS_RATE_HZ)10;
 8005f1c:	4b35      	ldr	r3, [pc, #212]	; (8005ff4 <OS_TmrInit+0x100>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a36      	ldr	r2, [pc, #216]	; (8005ffc <OS_TmrInit+0x108>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	08db      	lsrs	r3, r3, #3
 8005f28:	4a33      	ldr	r2, [pc, #204]	; (8005ff8 <OS_TmrInit+0x104>)
 8005f2a:	6013      	str	r3, [r2, #0]
    }
    OSTmrUpdateCtr   = OSTmrUpdateCnt;
 8005f2c:	4b32      	ldr	r3, [pc, #200]	; (8005ff8 <OS_TmrInit+0x104>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a33      	ldr	r2, [pc, #204]	; (8006000 <OS_TmrInit+0x10c>)
 8005f32:	6013      	str	r3, [r2, #0]

    OSTmrTickCtr     = (OS_TICK)0;
 8005f34:	4b33      	ldr	r3, [pc, #204]	; (8006004 <OS_TmrInit+0x110>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]

    OSTmrTaskTimeMax = (CPU_TS)0;
 8005f3a:	4b33      	ldr	r3, [pc, #204]	; (8006008 <OS_TmrInit+0x114>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]

    for (i = 0u; i < OSCfg_TmrWheelSize; i++) {
 8005f40:	2300      	movs	r3, #0
 8005f42:	81fb      	strh	r3, [r7, #14]
 8005f44:	e010      	b.n	8005f68 <OS_TmrInit+0x74>
        p_spoke                = &OSCfg_TmrWheel[i];
 8005f46:	89fb      	ldrh	r3, [r7, #14]
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	4a30      	ldr	r2, [pc, #192]	; (800600c <OS_TmrInit+0x118>)
 8005f4c:	4413      	add	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
        p_spoke->NbrEntries    = (OS_OBJ_QTY)0;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2200      	movs	r2, #0
 8005f54:	809a      	strh	r2, [r3, #4]
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY)0;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	80da      	strh	r2, [r3, #6]
        p_spoke->FirstPtr      = (OS_TMR   *)0;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
    for (i = 0u; i < OSCfg_TmrWheelSize; i++) {
 8005f62:	89fb      	ldrh	r3, [r7, #14]
 8005f64:	3301      	adds	r3, #1
 8005f66:	81fb      	strh	r3, [r7, #14]
 8005f68:	4b29      	ldr	r3, [pc, #164]	; (8006010 <OS_TmrInit+0x11c>)
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	89fa      	ldrh	r2, [r7, #14]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3e9      	bcc.n	8005f46 <OS_TmrInit+0x52>
    }

                                                            /* ---------------- CREATE THE TIMER TASK --------------- */
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK*)0) {
 8005f72:	4b28      	ldr	r3, [pc, #160]	; (8006014 <OS_TmrInit+0x120>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <OS_TmrInit+0x90>
       *p_err = OS_ERR_TMR_STK_INVALID;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f247 3247 	movw	r2, #29511	; 0x7347
 8005f80:	801a      	strh	r2, [r3, #0]
        return;
 8005f82:	e02f      	b.n	8005fe4 <OS_TmrInit+0xf0>
    }

    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8005f84:	4b24      	ldr	r3, [pc, #144]	; (8006018 <OS_TmrInit+0x124>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b24      	ldr	r3, [pc, #144]	; (800601c <OS_TmrInit+0x128>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d204      	bcs.n	8005f9a <OS_TmrInit+0xa6>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f247 3248 	movw	r2, #29512	; 0x7348
 8005f96:	801a      	strh	r2, [r3, #0]
        return;
 8005f98:	e024      	b.n	8005fe4 <OS_TmrInit+0xf0>
    }

    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8005f9a:	4b21      	ldr	r3, [pc, #132]	; (8006020 <OS_TmrInit+0x12c>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b1e      	cmp	r3, #30
 8005fa0:	d904      	bls.n	8005fac <OS_TmrInit+0xb8>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f247 3246 	movw	r2, #29510	; 0x7346
 8005fa8:	801a      	strh	r2, [r3, #0]
        return;
 8005faa:	e01b      	b.n	8005fe4 <OS_TmrInit+0xf0>
    }

    OSTaskCreate((OS_TCB     *)&OSTmrTaskTCB,
 8005fac:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <OS_TmrInit+0x12c>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	4a18      	ldr	r2, [pc, #96]	; (8006014 <OS_TmrInit+0x120>)
 8005fb2:	6812      	ldr	r2, [r2, #0]
 8005fb4:	491b      	ldr	r1, [pc, #108]	; (8006024 <OS_TmrInit+0x130>)
 8005fb6:	6809      	ldr	r1, [r1, #0]
 8005fb8:	4817      	ldr	r0, [pc, #92]	; (8006018 <OS_TmrInit+0x124>)
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	687c      	ldr	r4, [r7, #4]
 8005fbe:	9408      	str	r4, [sp, #32]
 8005fc0:	240b      	movs	r4, #11
 8005fc2:	9407      	str	r4, [sp, #28]
 8005fc4:	2400      	movs	r4, #0
 8005fc6:	9406      	str	r4, [sp, #24]
 8005fc8:	2400      	movs	r4, #0
 8005fca:	9405      	str	r4, [sp, #20]
 8005fcc:	2400      	movs	r4, #0
 8005fce:	9404      	str	r4, [sp, #16]
 8005fd0:	9003      	str	r0, [sp, #12]
 8005fd2:	9102      	str	r1, [sp, #8]
 8005fd4:	9201      	str	r2, [sp, #4]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4a13      	ldr	r2, [pc, #76]	; (8006028 <OS_TmrInit+0x134>)
 8005fdc:	4913      	ldr	r1, [pc, #76]	; (800602c <OS_TmrInit+0x138>)
 8005fde:	4814      	ldr	r0, [pc, #80]	; (8006030 <OS_TmrInit+0x13c>)
 8005fe0:	f7fe f850 	bl	8004084 <OSTaskCreate>
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd90      	pop	{r4, r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20008b30 	.word	0x20008b30
 8005ff0:	080064fc 	.word	0x080064fc
 8005ff4:	080064e4 	.word	0x080064e4
 8005ff8:	20008b38 	.word	0x20008b38
 8005ffc:	cccccccd 	.word	0xcccccccd
 8006000:	20008b48 	.word	0x20008b48
 8006004:	20008780 	.word	0x20008780
 8006008:	200087a0 	.word	0x200087a0
 800600c:	20007d40 	.word	0x20007d40
 8006010:	0800650c 	.word	0x0800650c
 8006014:	08006500 	.word	0x08006500
 8006018:	08006508 	.word	0x08006508
 800601c:	080064e0 	.word	0x080064e0
 8006020:	080064fa 	.word	0x080064fa
 8006024:	08006504 	.word	0x08006504
 8006028:	08006279 	.word	0x08006279
 800602c:	08006470 	.word	0x08006470
 8006030:	200087b8 	.word	0x200087b8

08006034 <OS_TmrLink>:
************************************************************************************************************************
*/

void  OS_TmrLink (OS_TMR  *p_tmr,
                  OS_OPT   opt)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	807b      	strh	r3, [r7, #2]
    OS_TMR           *p_tmr1;
    OS_TMR_SPOKE_IX   spoke;



    p_tmr->State = OS_TMR_STATE_RUNNING;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2202      	movs	r2, #2
 8006044:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    if (opt == OS_OPT_LINK_PERIODIC) {                      /* Determine when timer will expire                      */
 8006048:	887b      	ldrh	r3, [r7, #2]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d107      	bne.n	800605e <OS_TmrLink+0x2a>
        p_tmr->Match = p_tmr->Period + OSTmrTickCtr;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006052:	4b4f      	ldr	r3, [pc, #316]	; (8006190 <OS_TmrLink+0x15c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	441a      	add	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	619a      	str	r2, [r3, #24]
 800605c:	e012      	b.n	8006084 <OS_TmrLink+0x50>
    } else {
        if (p_tmr->Dly == (OS_TICK)0) {
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d107      	bne.n	8006076 <OS_TmrLink+0x42>
            p_tmr->Match = p_tmr->Period + OSTmrTickCtr;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800606a:	4b49      	ldr	r3, [pc, #292]	; (8006190 <OS_TmrLink+0x15c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	441a      	add	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	619a      	str	r2, [r3, #24]
 8006074:	e006      	b.n	8006084 <OS_TmrLink+0x50>
        } else {
            p_tmr->Match = p_tmr->Dly    + OSTmrTickCtr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1a      	ldr	r2, [r3, #32]
 800607a:	4b45      	ldr	r3, [pc, #276]	; (8006190 <OS_TmrLink+0x15c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	441a      	add	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	619a      	str	r2, [r3, #24]
        }
    }
    spoke  = (OS_TMR_SPOKE_IX)(p_tmr->Match % OSCfg_TmrWheelSize);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	4a42      	ldr	r2, [pc, #264]	; (8006194 <OS_TmrLink+0x160>)
 800608a:	8812      	ldrh	r2, [r2, #0]
 800608c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006090:	fb02 f201 	mul.w	r2, r2, r1
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	827b      	strh	r3, [r7, #18]
    p_spoke = &OSCfg_TmrWheel[spoke];
 8006098:	8a7b      	ldrh	r3, [r7, #18]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4a3e      	ldr	r2, [pc, #248]	; (8006198 <OS_TmrLink+0x164>)
 800609e:	4413      	add	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

    if (p_spoke->FirstPtr ==  (OS_TMR *)0) {                /* Link into timer wheel                                  */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10c      	bne.n	80060c4 <OS_TmrLink+0x90>
        p_tmr->NextPtr      = (OS_TMR *)0;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	611a      	str	r2, [r3, #16]
        p_tmr->PrevPtr      = (OS_TMR *)0;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	615a      	str	r2, [r3, #20]
        p_spoke->FirstPtr   = p_tmr;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	601a      	str	r2, [r3, #0]
        p_spoke->NbrEntries = 1u;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	809a      	strh	r2, [r3, #4]
 80060c2:	e056      	b.n	8006172 <OS_TmrLink+0x13e>
    } else {
        p_tmr->Remain  = p_tmr->Match                       /* Compute remaining time for timer                       */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699a      	ldr	r2, [r3, #24]
                       - OSTmrTickCtr;
 80060c8:	4b31      	ldr	r3, [pc, #196]	; (8006190 <OS_TmrLink+0x15c>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	1ad2      	subs	r2, r2, r3
        p_tmr->Remain  = p_tmr->Match                       /* Compute remaining time for timer                       */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	61da      	str	r2, [r3, #28]
        p_tmr1         = p_spoke->FirstPtr;                 /* Point to current first timer in the list               */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	617b      	str	r3, [r7, #20]
        while (p_tmr1 != (OS_TMR *)0) {
 80060d8:	e042      	b.n	8006160 <OS_TmrLink+0x12c>
            p_tmr1->Remain = p_tmr1->Match                  /* Compute time remaining of current timer in list        */
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	699a      	ldr	r2, [r3, #24]
                           - OSTmrTickCtr;
 80060de:	4b2c      	ldr	r3, [pc, #176]	; (8006190 <OS_TmrLink+0x15c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	1ad2      	subs	r2, r2, r3
            p_tmr1->Remain = p_tmr1->Match                  /* Compute time remaining of current timer in list        */
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	61da      	str	r2, [r3, #28]
            if (p_tmr->Remain > p_tmr1->Remain) {           /* Do we need to insert AFTER current timer in list?      */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	69da      	ldr	r2, [r3, #28]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d913      	bls.n	800611c <OS_TmrLink+0xe8>
                if (p_tmr1->NextPtr  != (OS_TMR *)0) {      /* Yes, are we pointing at the last timer in the list?    */
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <OS_TmrLink+0xd0>
                    p_tmr1            = p_tmr1->NextPtr;    /* No,  Point to next timer in the list                   */
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	e02d      	b.n	8006160 <OS_TmrLink+0x12c>
                } else {
                    p_tmr->NextPtr    = (OS_TMR *)0;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	611a      	str	r2, [r3, #16]
                    p_tmr->PrevPtr    =  p_tmr1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	615a      	str	r2, [r3, #20]
                    p_tmr1->NextPtr   =  p_tmr;             /* Yes, timer to insert is now new last entry in the list */
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	611a      	str	r2, [r3, #16]
                    p_tmr1            = (OS_TMR *)0;        /* Break loop                                             */
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e021      	b.n	8006160 <OS_TmrLink+0x12c>
                }
            } else {                                        /* Insert before the current timer                        */
                if (p_tmr1->PrevPtr == (OS_TMR *)0) {       /* Are we inserting before the first timer?               */
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10c      	bne.n	800613e <OS_TmrLink+0x10a>
                    p_tmr->PrevPtr    = (OS_TMR *)0;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	615a      	str	r2, [r3, #20]
                    p_tmr->NextPtr    = p_tmr1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	611a      	str	r2, [r3, #16]
                    p_tmr1->PrevPtr   = p_tmr;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	615a      	str	r2, [r3, #20]
                    p_spoke->FirstPtr = p_tmr;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e00e      	b.n	800615c <OS_TmrLink+0x128>
                } else {                                    /* Insert in between 2 timers already in the list         */
                    p_tmr0            = p_tmr1->PrevPtr;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	60bb      	str	r3, [r7, #8]
                    p_tmr->PrevPtr    = p_tmr0;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	615a      	str	r2, [r3, #20]
                    p_tmr->NextPtr    = p_tmr1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	611a      	str	r2, [r3, #16]
                    p_tmr0->NextPtr   = p_tmr;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	611a      	str	r2, [r3, #16]
                    p_tmr1->PrevPtr   = p_tmr;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	615a      	str	r2, [r3, #20]
                }
                p_tmr1 = (OS_TMR *)0;                       /* Break loop                                             */
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
        while (p_tmr1 != (OS_TMR *)0) {
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1b9      	bne.n	80060da <OS_TmrLink+0xa6>
            }
        }
        p_spoke->NbrEntries++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	889b      	ldrh	r3, [r3, #4]
 800616a:	3301      	adds	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	809a      	strh	r2, [r3, #4]
    }
    if (p_spoke->NbrEntriesMax < p_spoke->NbrEntries) {     /* Keep track of maximum number of entries in each spoke  */
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	88da      	ldrh	r2, [r3, #6]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	889b      	ldrh	r3, [r3, #4]
 800617a:	429a      	cmp	r2, r3
 800617c:	d203      	bcs.n	8006186 <OS_TmrLink+0x152>
        p_spoke->NbrEntriesMax = p_spoke->NbrEntries;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	889a      	ldrh	r2, [r3, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	80da      	strh	r2, [r3, #6]
    }
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	20008780 	.word	0x20008780
 8006194:	0800650c 	.word	0x0800650c
 8006198:	20007d40 	.word	0x20007d40

0800619c <OS_TmrResetPeak>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TmrResetPeak (void)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
    OS_TMR_SPOKE     *p_spoke;
    OS_TMR_SPOKE_IX   i;



    for (i = 0u; i < OSCfg_TmrWheelSize; i++) {
 80061a2:	2300      	movs	r3, #0
 80061a4:	80fb      	strh	r3, [r7, #6]
 80061a6:	e00a      	b.n	80061be <OS_TmrResetPeak+0x22>
        p_spoke                = (OS_TMR_SPOKE *)&OSCfg_TmrWheel[i];
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4a09      	ldr	r2, [pc, #36]	; (80061d4 <OS_TmrResetPeak+0x38>)
 80061ae:	4413      	add	r3, r2
 80061b0:	603b      	str	r3, [r7, #0]
        p_spoke->NbrEntriesMax = (OS_OBJ_QTY    )0u;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2200      	movs	r2, #0
 80061b6:	80da      	strh	r2, [r3, #6]
    for (i = 0u; i < OSCfg_TmrWheelSize; i++) {
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	3301      	adds	r3, #1
 80061bc:	80fb      	strh	r3, [r7, #6]
 80061be:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <OS_TmrResetPeak+0x3c>)
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d3ef      	bcc.n	80061a8 <OS_TmrResetPeak+0xc>
    }
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20007d40 	.word	0x20007d40
 80061d8:	0800650c 	.word	0x0800650c

080061dc <OS_TmrUnlink>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrUnlink (OS_TMR  *p_tmr)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
    OS_TMR          *p_tmr2;
    OS_TMR_SPOKE_IX  spoke;



    spoke   = (OS_TMR_SPOKE_IX)(p_tmr->Match % OSCfg_TmrWheelSize);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	4a21      	ldr	r2, [pc, #132]	; (8006270 <OS_TmrUnlink+0x94>)
 80061ea:	8812      	ldrh	r2, [r2, #0]
 80061ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80061f0:	fb02 f201 	mul.w	r2, r2, r1
 80061f4:	1a9b      	subs	r3, r3, r2
 80061f6:	82fb      	strh	r3, [r7, #22]
    p_spoke = &OSCfg_TmrWheel[spoke];
 80061f8:	8afb      	ldrh	r3, [r7, #22]
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <OS_TmrUnlink+0x98>)
 80061fe:	4413      	add	r3, r2
 8006200:	613b      	str	r3, [r7, #16]

    if (p_spoke->FirstPtr == p_tmr) {                       /* See if timer to remove is at the beginning of list     */
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	429a      	cmp	r2, r3
 800620a:	d10c      	bne.n	8006226 <OS_TmrUnlink+0x4a>
        p_tmr1            = (OS_TMR *)p_tmr->NextPtr;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	60fb      	str	r3, [r7, #12]
        p_spoke->FirstPtr = (OS_TMR *)p_tmr1;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	601a      	str	r2, [r3, #0]
        if (p_tmr1 != (OS_TMR *)0) {
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d012      	beq.n	8006244 <OS_TmrUnlink+0x68>
            p_tmr1->PrevPtr = (OS_TMR *)0;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	615a      	str	r2, [r3, #20]
 8006224:	e00e      	b.n	8006244 <OS_TmrUnlink+0x68>
        }
    } else {
        p_tmr1          = (OS_TMR *)p_tmr->PrevPtr;         /* Remove timer from somewhere in the list                */
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	60fb      	str	r3, [r7, #12]
        p_tmr2          = (OS_TMR *)p_tmr->NextPtr;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	60bb      	str	r3, [r7, #8]
        p_tmr1->NextPtr = p_tmr2;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	611a      	str	r2, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <OS_TmrUnlink+0x68>
            p_tmr2->PrevPtr = (OS_TMR *)p_tmr1;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	615a      	str	r2, [r3, #20]
        }
    }
    p_tmr->State   = OS_TMR_STATE_STOPPED;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    p_tmr->NextPtr = (OS_TMR *)0;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	611a      	str	r2, [r3, #16]
    p_tmr->PrevPtr = (OS_TMR *)0;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	615a      	str	r2, [r3, #20]
    p_spoke->NbrEntries--;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	889b      	ldrh	r3, [r3, #4]
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	809a      	strh	r2, [r3, #4]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	0800650c 	.word	0x0800650c
 8006274:	20007d40 	.word	0x20007d40

08006278 <OS_TmrTask>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08c      	sub	sp, #48	; 0x30
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]



    p_arg = p_arg;                                               /* Not using 'p_arg', prevent compiler warning       */
    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 8006280:	f107 030e 	add.w	r3, r7, #14
 8006284:	f107 0208 	add.w	r2, r7, #8
 8006288:	2100      	movs	r1, #0
 800628a:	2000      	movs	r0, #0
 800628c:	f7fe f9a0 	bl	80045d0 <OSTaskSemPend>
                            (OS_OPT  )OS_OPT_PEND_BLOCKING,
                            (CPU_TS *)&ts,
                            (OS_ERR *)&err);

        OSSchedLock(&err);
 8006290:	f107 030e 	add.w	r3, r7, #14
 8006294:	4618      	mov	r0, r3
 8006296:	f7fb fc99 	bl	8001bcc <OSSchedLock>
        ts_start = OS_TS_GET();
 800629a:	f7fa fc51 	bl	8000b40 <CPU_TS_TmrRd>
 800629e:	6278      	str	r0, [r7, #36]	; 0x24
        OSTmrTickCtr++;                                          /* Increment the current time                        */
 80062a0:	4b32      	ldr	r3, [pc, #200]	; (800636c <OS_TmrTask+0xf4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	4a31      	ldr	r2, [pc, #196]	; (800636c <OS_TmrTask+0xf4>)
 80062a8:	6013      	str	r3, [r2, #0]
        spoke    = (OS_TMR_SPOKE_IX)(OSTmrTickCtr % OSCfg_TmrWheelSize);
 80062aa:	4b30      	ldr	r3, [pc, #192]	; (800636c <OS_TmrTask+0xf4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a30      	ldr	r2, [pc, #192]	; (8006370 <OS_TmrTask+0xf8>)
 80062b0:	8812      	ldrh	r2, [r2, #0]
 80062b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80062b6:	fb02 f201 	mul.w	r2, r2, r1
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	847b      	strh	r3, [r7, #34]	; 0x22
        p_spoke  = &OSCfg_TmrWheel[spoke];
 80062be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	4a2c      	ldr	r2, [pc, #176]	; (8006374 <OS_TmrTask+0xfc>)
 80062c4:	4413      	add	r3, r2
 80062c6:	61fb      	str	r3, [r7, #28]
        p_tmr    = p_spoke->FirstPtr;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
        done     = DEF_FALSE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        while (done == DEF_FALSE) {
 80062d4:	e031      	b.n	800633a <OS_TmrTask+0xc2>
            if (p_tmr != (OS_TMR *)0) {
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d02b      	beq.n	8006334 <OS_TmrTask+0xbc>
                p_tmr_next = (OS_TMR *)p_tmr->NextPtr;           /* Point to next tmr to update because current ...   */
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	617b      	str	r3, [r7, #20]
                                                                 /* ... timer could get unlinked from the wheel.      */
                if (OSTmrTickCtr == p_tmr->Match) {              /* Process each timer that expires                   */
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	4b21      	ldr	r3, [pc, #132]	; (800636c <OS_TmrTask+0xf4>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d11e      	bne.n	800632c <OS_TmrTask+0xb4>
                    OS_TmrUnlink(p_tmr);                         /* Remove from current wheel spoke                   */
 80062ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f0:	f7ff ff74 	bl	80061dc <OS_TmrUnlink>
                    if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d104      	bne.n	8006306 <OS_TmrTask+0x8e>
                        OS_TmrLink(p_tmr,
 80062fc:	2101      	movs	r1, #1
 80062fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006300:	f7ff fe98 	bl	8006034 <OS_TmrLink>
 8006304:	e003      	b.n	800630e <OS_TmrTask+0x96>
                                   OS_OPT_LINK_PERIODIC);        /* Recalculate new position of timer in wheel        */
                    } else {
                        p_tmr->State = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	2203      	movs	r2, #3
 800630a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                    }
                    p_fnct = p_tmr->CallbackPtr;                 /* Execute callback function if available            */
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	613b      	str	r3, [r7, #16]
                    if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <OS_TmrTask+0xae>
                        (*p_fnct)((void *)p_tmr,
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4611      	mov	r1, r2
 8006322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006324:	4798      	blx	r3
                                  p_tmr->CallbackPtrArg);
                    }
                    p_tmr = p_tmr_next;                          /* See if next timer matches                         */
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28
 800632a:	e006      	b.n	800633a <OS_TmrTask+0xc2>
                } else {
                    done  = DEF_TRUE;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006332:	e002      	b.n	800633a <OS_TmrTask+0xc2>
                }
            } else {
                done = DEF_TRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        while (done == DEF_FALSE) {
 800633a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0c9      	beq.n	80062d6 <OS_TmrTask+0x5e>
            }
        }
        ts_end = OS_TS_GET() - ts_start;                         /* Measure execution time of timer task              */
 8006342:	f7fa fbfd 	bl	8000b40 <CPU_TS_TmrRd>
 8006346:	4602      	mov	r2, r0
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	61bb      	str	r3, [r7, #24]
        OSSchedUnlock(&err);
 800634e:	f107 030e 	add.w	r3, r7, #14
 8006352:	4618      	mov	r0, r3
 8006354:	f7fb fc7a 	bl	8001c4c <OSSchedUnlock>
        if (OSTmrTaskTimeMax < ts_end) {
 8006358:	4b07      	ldr	r3, [pc, #28]	; (8006378 <OS_TmrTask+0x100>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	429a      	cmp	r2, r3
 8006360:	d28e      	bcs.n	8006280 <OS_TmrTask+0x8>
            OSTmrTaskTimeMax = ts_end;
 8006362:	4a05      	ldr	r2, [pc, #20]	; (8006378 <OS_TmrTask+0x100>)
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	6013      	str	r3, [r2, #0]
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 8006368:	e78a      	b.n	8006280 <OS_TmrTask+0x8>
 800636a:	bf00      	nop
 800636c:	20008780 	.word	0x20008780
 8006370:	0800650c 	.word	0x0800650c
 8006374:	20007d40 	.word	0x20007d40
 8006378:	200087a0 	.word	0x200087a0

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	2500      	movs	r5, #0
 8006380:	4e0c      	ldr	r6, [pc, #48]	; (80063b4 <__libc_init_array+0x38>)
 8006382:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006384:	1ba4      	subs	r4, r4, r6
 8006386:	10a4      	asrs	r4, r4, #2
 8006388:	42a5      	cmp	r5, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	f000 f81a 	bl	80063c4 <_init>
 8006390:	2500      	movs	r5, #0
 8006392:	4e0a      	ldr	r6, [pc, #40]	; (80063bc <__libc_init_array+0x40>)
 8006394:	4c0a      	ldr	r4, [pc, #40]	; (80063c0 <__libc_init_array+0x44>)
 8006396:	1ba4      	subs	r4, r4, r6
 8006398:	10a4      	asrs	r4, r4, #2
 800639a:	42a5      	cmp	r5, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a4:	4798      	blx	r3
 80063a6:	3501      	adds	r5, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ae:	4798      	blx	r3
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	0800667c 	.word	0x0800667c
 80063b8:	0800667c 	.word	0x0800667c
 80063bc:	0800667c 	.word	0x0800667c
 80063c0:	08006680 	.word	0x08006680

080063c4 <_init>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr

080063d0 <_fini>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr
